
TEST_F723.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e0  08020000  08020000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c004  080201e0  080201e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000b840  0802c1e4  0802c1e4  0001c1e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08037a24  08037a24  00030164  2**0
                  CONTENTS
  4 .ARM          00000008  08037a24  08037a24  00027a24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08037a2c  08037a2c  00030164  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08037a2c  08037a2c  00027a2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08037a30  08037a30  00027a30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000164  20000000  08037a34  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000d44c  20000164  08037b98  00030164  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2000d5b0  08037b98  0003d5b0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030164  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00030194  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001a926  00000000  00000000  000301d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000047e6  00000000  00000000  0004aafd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000014e8  00000000  00000000  0004f2e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000fb3  00000000  00000000  000507d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00006576  00000000  00000000  00051783  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001da2b  00000000  00000000  00057cf9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d9a24  00000000  00000000  00075724  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005920  00000000  00000000  0014f148  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  00154a68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080201e0 <__do_global_dtors_aux>:
 80201e0:	b510      	push	{r4, lr}
 80201e2:	4c05      	ldr	r4, [pc, #20]	; (80201f8 <__do_global_dtors_aux+0x18>)
 80201e4:	7823      	ldrb	r3, [r4, #0]
 80201e6:	b933      	cbnz	r3, 80201f6 <__do_global_dtors_aux+0x16>
 80201e8:	4b04      	ldr	r3, [pc, #16]	; (80201fc <__do_global_dtors_aux+0x1c>)
 80201ea:	b113      	cbz	r3, 80201f2 <__do_global_dtors_aux+0x12>
 80201ec:	4804      	ldr	r0, [pc, #16]	; (8020200 <__do_global_dtors_aux+0x20>)
 80201ee:	f3af 8000 	nop.w
 80201f2:	2301      	movs	r3, #1
 80201f4:	7023      	strb	r3, [r4, #0]
 80201f6:	bd10      	pop	{r4, pc}
 80201f8:	20000164 	.word	0x20000164
 80201fc:	00000000 	.word	0x00000000
 8020200:	0802c1cc 	.word	0x0802c1cc

08020204 <frame_dummy>:
 8020204:	b508      	push	{r3, lr}
 8020206:	4b03      	ldr	r3, [pc, #12]	; (8020214 <frame_dummy+0x10>)
 8020208:	b11b      	cbz	r3, 8020212 <frame_dummy+0xe>
 802020a:	4903      	ldr	r1, [pc, #12]	; (8020218 <frame_dummy+0x14>)
 802020c:	4803      	ldr	r0, [pc, #12]	; (802021c <frame_dummy+0x18>)
 802020e:	f3af 8000 	nop.w
 8020212:	bd08      	pop	{r3, pc}
 8020214:	00000000 	.word	0x00000000
 8020218:	20000168 	.word	0x20000168
 802021c:	0802c1cc 	.word	0x0802c1cc

08020220 <memchr>:
 8020220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8020224:	2a10      	cmp	r2, #16
 8020226:	db2b      	blt.n	8020280 <memchr+0x60>
 8020228:	f010 0f07 	tst.w	r0, #7
 802022c:	d008      	beq.n	8020240 <memchr+0x20>
 802022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8020232:	3a01      	subs	r2, #1
 8020234:	428b      	cmp	r3, r1
 8020236:	d02d      	beq.n	8020294 <memchr+0x74>
 8020238:	f010 0f07 	tst.w	r0, #7
 802023c:	b342      	cbz	r2, 8020290 <memchr+0x70>
 802023e:	d1f6      	bne.n	802022e <memchr+0xe>
 8020240:	b4f0      	push	{r4, r5, r6, r7}
 8020242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8020246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 802024a:	f022 0407 	bic.w	r4, r2, #7
 802024e:	f07f 0700 	mvns.w	r7, #0
 8020252:	2300      	movs	r3, #0
 8020254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8020258:	3c08      	subs	r4, #8
 802025a:	ea85 0501 	eor.w	r5, r5, r1
 802025e:	ea86 0601 	eor.w	r6, r6, r1
 8020262:	fa85 f547 	uadd8	r5, r5, r7
 8020266:	faa3 f587 	sel	r5, r3, r7
 802026a:	fa86 f647 	uadd8	r6, r6, r7
 802026e:	faa5 f687 	sel	r6, r5, r7
 8020272:	b98e      	cbnz	r6, 8020298 <memchr+0x78>
 8020274:	d1ee      	bne.n	8020254 <memchr+0x34>
 8020276:	bcf0      	pop	{r4, r5, r6, r7}
 8020278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 802027c:	f002 0207 	and.w	r2, r2, #7
 8020280:	b132      	cbz	r2, 8020290 <memchr+0x70>
 8020282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8020286:	3a01      	subs	r2, #1
 8020288:	ea83 0301 	eor.w	r3, r3, r1
 802028c:	b113      	cbz	r3, 8020294 <memchr+0x74>
 802028e:	d1f8      	bne.n	8020282 <memchr+0x62>
 8020290:	2000      	movs	r0, #0
 8020292:	4770      	bx	lr
 8020294:	3801      	subs	r0, #1
 8020296:	4770      	bx	lr
 8020298:	2d00      	cmp	r5, #0
 802029a:	bf06      	itte	eq
 802029c:	4635      	moveq	r5, r6
 802029e:	3803      	subeq	r0, #3
 80202a0:	3807      	subne	r0, #7
 80202a2:	f015 0f01 	tst.w	r5, #1
 80202a6:	d107      	bne.n	80202b8 <memchr+0x98>
 80202a8:	3001      	adds	r0, #1
 80202aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80202ae:	bf02      	ittt	eq
 80202b0:	3001      	addeq	r0, #1
 80202b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80202b6:	3001      	addeq	r0, #1
 80202b8:	bcf0      	pop	{r4, r5, r6, r7}
 80202ba:	3801      	subs	r0, #1
 80202bc:	4770      	bx	lr
 80202be:	bf00      	nop

080202c0 <__aeabi_uldivmod>:
 80202c0:	b953      	cbnz	r3, 80202d8 <__aeabi_uldivmod+0x18>
 80202c2:	b94a      	cbnz	r2, 80202d8 <__aeabi_uldivmod+0x18>
 80202c4:	2900      	cmp	r1, #0
 80202c6:	bf08      	it	eq
 80202c8:	2800      	cmpeq	r0, #0
 80202ca:	bf1c      	itt	ne
 80202cc:	f04f 31ff 	movne.w	r1, #4294967295
 80202d0:	f04f 30ff 	movne.w	r0, #4294967295
 80202d4:	f000 b970 	b.w	80205b8 <__aeabi_idiv0>
 80202d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80202dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80202e0:	f000 f806 	bl	80202f0 <__udivmoddi4>
 80202e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80202e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80202ec:	b004      	add	sp, #16
 80202ee:	4770      	bx	lr

080202f0 <__udivmoddi4>:
 80202f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80202f4:	9e08      	ldr	r6, [sp, #32]
 80202f6:	460d      	mov	r5, r1
 80202f8:	4604      	mov	r4, r0
 80202fa:	460f      	mov	r7, r1
 80202fc:	2b00      	cmp	r3, #0
 80202fe:	d14a      	bne.n	8020396 <__udivmoddi4+0xa6>
 8020300:	428a      	cmp	r2, r1
 8020302:	4694      	mov	ip, r2
 8020304:	d965      	bls.n	80203d2 <__udivmoddi4+0xe2>
 8020306:	fab2 f382 	clz	r3, r2
 802030a:	b143      	cbz	r3, 802031e <__udivmoddi4+0x2e>
 802030c:	fa02 fc03 	lsl.w	ip, r2, r3
 8020310:	f1c3 0220 	rsb	r2, r3, #32
 8020314:	409f      	lsls	r7, r3
 8020316:	fa20 f202 	lsr.w	r2, r0, r2
 802031a:	4317      	orrs	r7, r2
 802031c:	409c      	lsls	r4, r3
 802031e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8020322:	fa1f f58c 	uxth.w	r5, ip
 8020326:	fbb7 f1fe 	udiv	r1, r7, lr
 802032a:	0c22      	lsrs	r2, r4, #16
 802032c:	fb0e 7711 	mls	r7, lr, r1, r7
 8020330:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8020334:	fb01 f005 	mul.w	r0, r1, r5
 8020338:	4290      	cmp	r0, r2
 802033a:	d90a      	bls.n	8020352 <__udivmoddi4+0x62>
 802033c:	eb1c 0202 	adds.w	r2, ip, r2
 8020340:	f101 37ff 	add.w	r7, r1, #4294967295
 8020344:	f080 811c 	bcs.w	8020580 <__udivmoddi4+0x290>
 8020348:	4290      	cmp	r0, r2
 802034a:	f240 8119 	bls.w	8020580 <__udivmoddi4+0x290>
 802034e:	3902      	subs	r1, #2
 8020350:	4462      	add	r2, ip
 8020352:	1a12      	subs	r2, r2, r0
 8020354:	b2a4      	uxth	r4, r4
 8020356:	fbb2 f0fe 	udiv	r0, r2, lr
 802035a:	fb0e 2210 	mls	r2, lr, r0, r2
 802035e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8020362:	fb00 f505 	mul.w	r5, r0, r5
 8020366:	42a5      	cmp	r5, r4
 8020368:	d90a      	bls.n	8020380 <__udivmoddi4+0x90>
 802036a:	eb1c 0404 	adds.w	r4, ip, r4
 802036e:	f100 32ff 	add.w	r2, r0, #4294967295
 8020372:	f080 8107 	bcs.w	8020584 <__udivmoddi4+0x294>
 8020376:	42a5      	cmp	r5, r4
 8020378:	f240 8104 	bls.w	8020584 <__udivmoddi4+0x294>
 802037c:	4464      	add	r4, ip
 802037e:	3802      	subs	r0, #2
 8020380:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8020384:	1b64      	subs	r4, r4, r5
 8020386:	2100      	movs	r1, #0
 8020388:	b11e      	cbz	r6, 8020392 <__udivmoddi4+0xa2>
 802038a:	40dc      	lsrs	r4, r3
 802038c:	2300      	movs	r3, #0
 802038e:	e9c6 4300 	strd	r4, r3, [r6]
 8020392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020396:	428b      	cmp	r3, r1
 8020398:	d908      	bls.n	80203ac <__udivmoddi4+0xbc>
 802039a:	2e00      	cmp	r6, #0
 802039c:	f000 80ed 	beq.w	802057a <__udivmoddi4+0x28a>
 80203a0:	2100      	movs	r1, #0
 80203a2:	e9c6 0500 	strd	r0, r5, [r6]
 80203a6:	4608      	mov	r0, r1
 80203a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80203ac:	fab3 f183 	clz	r1, r3
 80203b0:	2900      	cmp	r1, #0
 80203b2:	d149      	bne.n	8020448 <__udivmoddi4+0x158>
 80203b4:	42ab      	cmp	r3, r5
 80203b6:	d302      	bcc.n	80203be <__udivmoddi4+0xce>
 80203b8:	4282      	cmp	r2, r0
 80203ba:	f200 80f8 	bhi.w	80205ae <__udivmoddi4+0x2be>
 80203be:	1a84      	subs	r4, r0, r2
 80203c0:	eb65 0203 	sbc.w	r2, r5, r3
 80203c4:	2001      	movs	r0, #1
 80203c6:	4617      	mov	r7, r2
 80203c8:	2e00      	cmp	r6, #0
 80203ca:	d0e2      	beq.n	8020392 <__udivmoddi4+0xa2>
 80203cc:	e9c6 4700 	strd	r4, r7, [r6]
 80203d0:	e7df      	b.n	8020392 <__udivmoddi4+0xa2>
 80203d2:	b902      	cbnz	r2, 80203d6 <__udivmoddi4+0xe6>
 80203d4:	deff      	udf	#255	; 0xff
 80203d6:	fab2 f382 	clz	r3, r2
 80203da:	2b00      	cmp	r3, #0
 80203dc:	f040 8090 	bne.w	8020500 <__udivmoddi4+0x210>
 80203e0:	1a8a      	subs	r2, r1, r2
 80203e2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80203e6:	fa1f fe8c 	uxth.w	lr, ip
 80203ea:	2101      	movs	r1, #1
 80203ec:	fbb2 f5f7 	udiv	r5, r2, r7
 80203f0:	fb07 2015 	mls	r0, r7, r5, r2
 80203f4:	0c22      	lsrs	r2, r4, #16
 80203f6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80203fa:	fb0e f005 	mul.w	r0, lr, r5
 80203fe:	4290      	cmp	r0, r2
 8020400:	d908      	bls.n	8020414 <__udivmoddi4+0x124>
 8020402:	eb1c 0202 	adds.w	r2, ip, r2
 8020406:	f105 38ff 	add.w	r8, r5, #4294967295
 802040a:	d202      	bcs.n	8020412 <__udivmoddi4+0x122>
 802040c:	4290      	cmp	r0, r2
 802040e:	f200 80cb 	bhi.w	80205a8 <__udivmoddi4+0x2b8>
 8020412:	4645      	mov	r5, r8
 8020414:	1a12      	subs	r2, r2, r0
 8020416:	b2a4      	uxth	r4, r4
 8020418:	fbb2 f0f7 	udiv	r0, r2, r7
 802041c:	fb07 2210 	mls	r2, r7, r0, r2
 8020420:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8020424:	fb0e fe00 	mul.w	lr, lr, r0
 8020428:	45a6      	cmp	lr, r4
 802042a:	d908      	bls.n	802043e <__udivmoddi4+0x14e>
 802042c:	eb1c 0404 	adds.w	r4, ip, r4
 8020430:	f100 32ff 	add.w	r2, r0, #4294967295
 8020434:	d202      	bcs.n	802043c <__udivmoddi4+0x14c>
 8020436:	45a6      	cmp	lr, r4
 8020438:	f200 80bb 	bhi.w	80205b2 <__udivmoddi4+0x2c2>
 802043c:	4610      	mov	r0, r2
 802043e:	eba4 040e 	sub.w	r4, r4, lr
 8020442:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8020446:	e79f      	b.n	8020388 <__udivmoddi4+0x98>
 8020448:	f1c1 0720 	rsb	r7, r1, #32
 802044c:	408b      	lsls	r3, r1
 802044e:	fa22 fc07 	lsr.w	ip, r2, r7
 8020452:	ea4c 0c03 	orr.w	ip, ip, r3
 8020456:	fa05 f401 	lsl.w	r4, r5, r1
 802045a:	fa20 f307 	lsr.w	r3, r0, r7
 802045e:	40fd      	lsrs	r5, r7
 8020460:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8020464:	4323      	orrs	r3, r4
 8020466:	fbb5 f8f9 	udiv	r8, r5, r9
 802046a:	fa1f fe8c 	uxth.w	lr, ip
 802046e:	fb09 5518 	mls	r5, r9, r8, r5
 8020472:	0c1c      	lsrs	r4, r3, #16
 8020474:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8020478:	fb08 f50e 	mul.w	r5, r8, lr
 802047c:	42a5      	cmp	r5, r4
 802047e:	fa02 f201 	lsl.w	r2, r2, r1
 8020482:	fa00 f001 	lsl.w	r0, r0, r1
 8020486:	d90b      	bls.n	80204a0 <__udivmoddi4+0x1b0>
 8020488:	eb1c 0404 	adds.w	r4, ip, r4
 802048c:	f108 3aff 	add.w	sl, r8, #4294967295
 8020490:	f080 8088 	bcs.w	80205a4 <__udivmoddi4+0x2b4>
 8020494:	42a5      	cmp	r5, r4
 8020496:	f240 8085 	bls.w	80205a4 <__udivmoddi4+0x2b4>
 802049a:	f1a8 0802 	sub.w	r8, r8, #2
 802049e:	4464      	add	r4, ip
 80204a0:	1b64      	subs	r4, r4, r5
 80204a2:	b29d      	uxth	r5, r3
 80204a4:	fbb4 f3f9 	udiv	r3, r4, r9
 80204a8:	fb09 4413 	mls	r4, r9, r3, r4
 80204ac:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80204b0:	fb03 fe0e 	mul.w	lr, r3, lr
 80204b4:	45a6      	cmp	lr, r4
 80204b6:	d908      	bls.n	80204ca <__udivmoddi4+0x1da>
 80204b8:	eb1c 0404 	adds.w	r4, ip, r4
 80204bc:	f103 35ff 	add.w	r5, r3, #4294967295
 80204c0:	d26c      	bcs.n	802059c <__udivmoddi4+0x2ac>
 80204c2:	45a6      	cmp	lr, r4
 80204c4:	d96a      	bls.n	802059c <__udivmoddi4+0x2ac>
 80204c6:	3b02      	subs	r3, #2
 80204c8:	4464      	add	r4, ip
 80204ca:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80204ce:	fba3 9502 	umull	r9, r5, r3, r2
 80204d2:	eba4 040e 	sub.w	r4, r4, lr
 80204d6:	42ac      	cmp	r4, r5
 80204d8:	46c8      	mov	r8, r9
 80204da:	46ae      	mov	lr, r5
 80204dc:	d356      	bcc.n	802058c <__udivmoddi4+0x29c>
 80204de:	d053      	beq.n	8020588 <__udivmoddi4+0x298>
 80204e0:	b156      	cbz	r6, 80204f8 <__udivmoddi4+0x208>
 80204e2:	ebb0 0208 	subs.w	r2, r0, r8
 80204e6:	eb64 040e 	sbc.w	r4, r4, lr
 80204ea:	fa04 f707 	lsl.w	r7, r4, r7
 80204ee:	40ca      	lsrs	r2, r1
 80204f0:	40cc      	lsrs	r4, r1
 80204f2:	4317      	orrs	r7, r2
 80204f4:	e9c6 7400 	strd	r7, r4, [r6]
 80204f8:	4618      	mov	r0, r3
 80204fa:	2100      	movs	r1, #0
 80204fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020500:	f1c3 0120 	rsb	r1, r3, #32
 8020504:	fa02 fc03 	lsl.w	ip, r2, r3
 8020508:	fa20 f201 	lsr.w	r2, r0, r1
 802050c:	fa25 f101 	lsr.w	r1, r5, r1
 8020510:	409d      	lsls	r5, r3
 8020512:	432a      	orrs	r2, r5
 8020514:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8020518:	fa1f fe8c 	uxth.w	lr, ip
 802051c:	fbb1 f0f7 	udiv	r0, r1, r7
 8020520:	fb07 1510 	mls	r5, r7, r0, r1
 8020524:	0c11      	lsrs	r1, r2, #16
 8020526:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 802052a:	fb00 f50e 	mul.w	r5, r0, lr
 802052e:	428d      	cmp	r5, r1
 8020530:	fa04 f403 	lsl.w	r4, r4, r3
 8020534:	d908      	bls.n	8020548 <__udivmoddi4+0x258>
 8020536:	eb1c 0101 	adds.w	r1, ip, r1
 802053a:	f100 38ff 	add.w	r8, r0, #4294967295
 802053e:	d22f      	bcs.n	80205a0 <__udivmoddi4+0x2b0>
 8020540:	428d      	cmp	r5, r1
 8020542:	d92d      	bls.n	80205a0 <__udivmoddi4+0x2b0>
 8020544:	3802      	subs	r0, #2
 8020546:	4461      	add	r1, ip
 8020548:	1b49      	subs	r1, r1, r5
 802054a:	b292      	uxth	r2, r2
 802054c:	fbb1 f5f7 	udiv	r5, r1, r7
 8020550:	fb07 1115 	mls	r1, r7, r5, r1
 8020554:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8020558:	fb05 f10e 	mul.w	r1, r5, lr
 802055c:	4291      	cmp	r1, r2
 802055e:	d908      	bls.n	8020572 <__udivmoddi4+0x282>
 8020560:	eb1c 0202 	adds.w	r2, ip, r2
 8020564:	f105 38ff 	add.w	r8, r5, #4294967295
 8020568:	d216      	bcs.n	8020598 <__udivmoddi4+0x2a8>
 802056a:	4291      	cmp	r1, r2
 802056c:	d914      	bls.n	8020598 <__udivmoddi4+0x2a8>
 802056e:	3d02      	subs	r5, #2
 8020570:	4462      	add	r2, ip
 8020572:	1a52      	subs	r2, r2, r1
 8020574:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8020578:	e738      	b.n	80203ec <__udivmoddi4+0xfc>
 802057a:	4631      	mov	r1, r6
 802057c:	4630      	mov	r0, r6
 802057e:	e708      	b.n	8020392 <__udivmoddi4+0xa2>
 8020580:	4639      	mov	r1, r7
 8020582:	e6e6      	b.n	8020352 <__udivmoddi4+0x62>
 8020584:	4610      	mov	r0, r2
 8020586:	e6fb      	b.n	8020380 <__udivmoddi4+0x90>
 8020588:	4548      	cmp	r0, r9
 802058a:	d2a9      	bcs.n	80204e0 <__udivmoddi4+0x1f0>
 802058c:	ebb9 0802 	subs.w	r8, r9, r2
 8020590:	eb65 0e0c 	sbc.w	lr, r5, ip
 8020594:	3b01      	subs	r3, #1
 8020596:	e7a3      	b.n	80204e0 <__udivmoddi4+0x1f0>
 8020598:	4645      	mov	r5, r8
 802059a:	e7ea      	b.n	8020572 <__udivmoddi4+0x282>
 802059c:	462b      	mov	r3, r5
 802059e:	e794      	b.n	80204ca <__udivmoddi4+0x1da>
 80205a0:	4640      	mov	r0, r8
 80205a2:	e7d1      	b.n	8020548 <__udivmoddi4+0x258>
 80205a4:	46d0      	mov	r8, sl
 80205a6:	e77b      	b.n	80204a0 <__udivmoddi4+0x1b0>
 80205a8:	3d02      	subs	r5, #2
 80205aa:	4462      	add	r2, ip
 80205ac:	e732      	b.n	8020414 <__udivmoddi4+0x124>
 80205ae:	4608      	mov	r0, r1
 80205b0:	e70a      	b.n	80203c8 <__udivmoddi4+0xd8>
 80205b2:	4464      	add	r4, ip
 80205b4:	3802      	subs	r0, #2
 80205b6:	e742      	b.n	802043e <__udivmoddi4+0x14e>

080205b8 <__aeabi_idiv0>:
 80205b8:	4770      	bx	lr
 80205ba:	bf00      	nop

080205bc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80205bc:	b580      	push	{r7, lr}
 80205be:	b082      	sub	sp, #8
 80205c0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80205c2:	4b0c      	ldr	r3, [pc, #48]	; (80205f4 <MX_DMA_Init+0x38>)
 80205c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80205c6:	4a0b      	ldr	r2, [pc, #44]	; (80205f4 <MX_DMA_Init+0x38>)
 80205c8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80205cc:	6313      	str	r3, [r2, #48]	; 0x30
 80205ce:	4b09      	ldr	r3, [pc, #36]	; (80205f4 <MX_DMA_Init+0x38>)
 80205d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80205d2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80205d6:	607b      	str	r3, [r7, #4]
 80205d8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80205da:	2200      	movs	r2, #0
 80205dc:	2100      	movs	r1, #0
 80205de:	200b      	movs	r0, #11
 80205e0:	f001 fdbd 	bl	802215e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80205e4:	200b      	movs	r0, #11
 80205e6:	f001 fdd6 	bl	8022196 <HAL_NVIC_EnableIRQ>

}
 80205ea:	bf00      	nop
 80205ec:	3708      	adds	r7, #8
 80205ee:	46bd      	mov	sp, r7
 80205f0:	bd80      	pop	{r7, pc}
 80205f2:	bf00      	nop
 80205f4:	40023800 	.word	0x40023800

080205f8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80205f8:	b580      	push	{r7, lr}
 80205fa:	b08c      	sub	sp, #48	; 0x30
 80205fc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80205fe:	f107 031c 	add.w	r3, r7, #28
 8020602:	2200      	movs	r2, #0
 8020604:	601a      	str	r2, [r3, #0]
 8020606:	605a      	str	r2, [r3, #4]
 8020608:	609a      	str	r2, [r3, #8]
 802060a:	60da      	str	r2, [r3, #12]
 802060c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 802060e:	4b6d      	ldr	r3, [pc, #436]	; (80207c4 <MX_GPIO_Init+0x1cc>)
 8020610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020612:	4a6c      	ldr	r2, [pc, #432]	; (80207c4 <MX_GPIO_Init+0x1cc>)
 8020614:	f043 0304 	orr.w	r3, r3, #4
 8020618:	6313      	str	r3, [r2, #48]	; 0x30
 802061a:	4b6a      	ldr	r3, [pc, #424]	; (80207c4 <MX_GPIO_Init+0x1cc>)
 802061c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802061e:	f003 0304 	and.w	r3, r3, #4
 8020622:	61bb      	str	r3, [r7, #24]
 8020624:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8020626:	4b67      	ldr	r3, [pc, #412]	; (80207c4 <MX_GPIO_Init+0x1cc>)
 8020628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802062a:	4a66      	ldr	r2, [pc, #408]	; (80207c4 <MX_GPIO_Init+0x1cc>)
 802062c:	f043 0308 	orr.w	r3, r3, #8
 8020630:	6313      	str	r3, [r2, #48]	; 0x30
 8020632:	4b64      	ldr	r3, [pc, #400]	; (80207c4 <MX_GPIO_Init+0x1cc>)
 8020634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020636:	f003 0308 	and.w	r3, r3, #8
 802063a:	617b      	str	r3, [r7, #20]
 802063c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 802063e:	4b61      	ldr	r3, [pc, #388]	; (80207c4 <MX_GPIO_Init+0x1cc>)
 8020640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020642:	4a60      	ldr	r2, [pc, #384]	; (80207c4 <MX_GPIO_Init+0x1cc>)
 8020644:	f043 0302 	orr.w	r3, r3, #2
 8020648:	6313      	str	r3, [r2, #48]	; 0x30
 802064a:	4b5e      	ldr	r3, [pc, #376]	; (80207c4 <MX_GPIO_Init+0x1cc>)
 802064c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802064e:	f003 0302 	and.w	r3, r3, #2
 8020652:	613b      	str	r3, [r7, #16]
 8020654:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8020656:	4b5b      	ldr	r3, [pc, #364]	; (80207c4 <MX_GPIO_Init+0x1cc>)
 8020658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802065a:	4a5a      	ldr	r2, [pc, #360]	; (80207c4 <MX_GPIO_Init+0x1cc>)
 802065c:	f043 0301 	orr.w	r3, r3, #1
 8020660:	6313      	str	r3, [r2, #48]	; 0x30
 8020662:	4b58      	ldr	r3, [pc, #352]	; (80207c4 <MX_GPIO_Init+0x1cc>)
 8020664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020666:	f003 0301 	and.w	r3, r3, #1
 802066a:	60fb      	str	r3, [r7, #12]
 802066c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 802066e:	4b55      	ldr	r3, [pc, #340]	; (80207c4 <MX_GPIO_Init+0x1cc>)
 8020670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020672:	4a54      	ldr	r2, [pc, #336]	; (80207c4 <MX_GPIO_Init+0x1cc>)
 8020674:	f043 0310 	orr.w	r3, r3, #16
 8020678:	6313      	str	r3, [r2, #48]	; 0x30
 802067a:	4b52      	ldr	r3, [pc, #328]	; (80207c4 <MX_GPIO_Init+0x1cc>)
 802067c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802067e:	f003 0310 	and.w	r3, r3, #16
 8020682:	60bb      	str	r3, [r7, #8]
 8020684:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8020686:	4b4f      	ldr	r3, [pc, #316]	; (80207c4 <MX_GPIO_Init+0x1cc>)
 8020688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802068a:	4a4e      	ldr	r2, [pc, #312]	; (80207c4 <MX_GPIO_Init+0x1cc>)
 802068c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8020690:	6313      	str	r3, [r2, #48]	; 0x30
 8020692:	4b4c      	ldr	r3, [pc, #304]	; (80207c4 <MX_GPIO_Init+0x1cc>)
 8020694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020696:	f003 0380 	and.w	r3, r3, #128	; 0x80
 802069a:	607b      	str	r3, [r7, #4]
 802069c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TOF_RST_GPIO_Port, TOF_RST_Pin, GPIO_PIN_RESET);
 802069e:	2200      	movs	r2, #0
 80206a0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80206a4:	4848      	ldr	r0, [pc, #288]	; (80207c8 <MX_GPIO_Init+0x1d0>)
 80206a6:	f002 fbcd 	bl	8022e44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, PNL_3V3_EN_Pin|PNL_1V8_EN_Pin|PNL_6V6_N_EN_Pin, GPIO_PIN_RESET);
 80206aa:	2200      	movs	r2, #0
 80206ac:	2107      	movs	r1, #7
 80206ae:	4847      	ldr	r0, [pc, #284]	; (80207cc <MX_GPIO_Init+0x1d4>)
 80206b0:	f002 fbc8 	bl	8022e44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, IMU_RST_Pin|PNL_L_XCLR_Pin|PNL_R_XCLR_Pin|CAM_RST_Pin
 80206b4:	2200      	movs	r2, #0
 80206b6:	f641 1107 	movw	r1, #6407	; 0x1907
 80206ba:	4845      	ldr	r0, [pc, #276]	; (80207d0 <MX_GPIO_Init+0x1d8>)
 80206bc:	f002 fbc2 	bl	8022e44 <HAL_GPIO_WritePin>
                          |PNL_L_NSS_Pin|LT7911_RSTN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PNL_R_NSS_GPIO_Port, PNL_R_NSS_Pin, GPIO_PIN_RESET);
 80206c0:	2200      	movs	r2, #0
 80206c2:	2110      	movs	r1, #16
 80206c4:	4843      	ldr	r0, [pc, #268]	; (80207d4 <MX_GPIO_Init+0x1dc>)
 80206c6:	f002 fbbd 	bl	8022e44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SW_BRG_2D3D_Pin|ALS_RST_Pin|LT7911_INT_Pin, GPIO_PIN_RESET);
 80206ca:	2200      	movs	r2, #0
 80206cc:	210e      	movs	r1, #14
 80206ce:	4842      	ldr	r0, [pc, #264]	; (80207d8 <MX_GPIO_Init+0x1e0>)
 80206d0:	f002 fbb8 	bl	8022e44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TOF_RST_Pin;
 80206d4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80206d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80206da:	2301      	movs	r3, #1
 80206dc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80206de:	2300      	movs	r3, #0
 80206e0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80206e2:	2300      	movs	r3, #0
 80206e4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(TOF_RST_GPIO_Port, &GPIO_InitStruct);
 80206e6:	f107 031c 	add.w	r3, r7, #28
 80206ea:	4619      	mov	r1, r3
 80206ec:	4836      	ldr	r0, [pc, #216]	; (80207c8 <MX_GPIO_Init+0x1d0>)
 80206ee:	f002 f911 	bl	8022914 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = PNL_3V3_EN_Pin|PNL_1V8_EN_Pin|PNL_6V6_N_EN_Pin;
 80206f2:	2307      	movs	r3, #7
 80206f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80206f6:	2301      	movs	r3, #1
 80206f8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80206fa:	2300      	movs	r3, #0
 80206fc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80206fe:	2300      	movs	r3, #0
 8020700:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8020702:	f107 031c 	add.w	r3, r7, #28
 8020706:	4619      	mov	r1, r3
 8020708:	4830      	ldr	r0, [pc, #192]	; (80207cc <MX_GPIO_Init+0x1d4>)
 802070a:	f002 f903 	bl	8022914 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin */
  GPIO_InitStruct.Pin = IMU_RST_Pin|PNL_L_XCLR_Pin|PNL_R_XCLR_Pin|CAM_RST_Pin
 802070e:	f641 1307 	movw	r3, #6407	; 0x1907
 8020712:	61fb      	str	r3, [r7, #28]
                          |PNL_L_NSS_Pin|LT7911_RSTN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8020714:	2301      	movs	r3, #1
 8020716:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8020718:	2300      	movs	r3, #0
 802071a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 802071c:	2300      	movs	r3, #0
 802071e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8020720:	f107 031c 	add.w	r3, r7, #28
 8020724:	4619      	mov	r1, r3
 8020726:	482a      	ldr	r0, [pc, #168]	; (80207d0 <MX_GPIO_Init+0x1d8>)
 8020728:	f002 f8f4 	bl	8022914 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = ALS_INT_Pin|PS_INT_Pin;
 802072c:	f240 1301 	movw	r3, #257	; 0x101
 8020730:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8020732:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8020736:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8020738:	2300      	movs	r3, #0
 802073a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 802073c:	f107 031c 	add.w	r3, r7, #28
 8020740:	4619      	mov	r1, r3
 8020742:	4821      	ldr	r0, [pc, #132]	; (80207c8 <MX_GPIO_Init+0x1d0>)
 8020744:	f002 f8e6 	bl	8022914 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin PDPin */
  GPIO_InitStruct.Pin = TEST1_Pin|TEST5_Pin|TEST2_Pin|TEST6_Pin
 8020748:	f647 03c0 	movw	r3, #30912	; 0x78c0
 802074c:	61fb      	str	r3, [r7, #28]
                          |TEST4_Pin|TEST3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 802074e:	2300      	movs	r3, #0
 8020750:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8020752:	2301      	movs	r3, #1
 8020754:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8020756:	f107 031c 	add.w	r3, r7, #28
 802075a:	4619      	mov	r1, r3
 802075c:	481b      	ldr	r0, [pc, #108]	; (80207cc <MX_GPIO_Init+0x1d4>)
 802075e:	f002 f8d9 	bl	8022914 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PNL_R_NSS_Pin;
 8020762:	2310      	movs	r3, #16
 8020764:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8020766:	2301      	movs	r3, #1
 8020768:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 802076a:	2300      	movs	r3, #0
 802076c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 802076e:	2300      	movs	r3, #0
 8020770:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(PNL_R_NSS_GPIO_Port, &GPIO_InitStruct);
 8020772:	f107 031c 	add.w	r3, r7, #28
 8020776:	4619      	mov	r1, r3
 8020778:	4816      	ldr	r0, [pc, #88]	; (80207d4 <MX_GPIO_Init+0x1dc>)
 802077a:	f002 f8cb 	bl	8022914 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = SW_BRG_2D3D_Pin|ALS_RST_Pin|LT7911_INT_Pin;
 802077e:	230e      	movs	r3, #14
 8020780:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8020782:	2301      	movs	r3, #1
 8020784:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8020786:	2300      	movs	r3, #0
 8020788:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 802078a:	2300      	movs	r3, #0
 802078c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 802078e:	f107 031c 	add.w	r3, r7, #28
 8020792:	4619      	mov	r1, r3
 8020794:	4810      	ldr	r0, [pc, #64]	; (80207d8 <MX_GPIO_Init+0x1e0>)
 8020796:	f002 f8bd 	bl	8022914 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 1, 0);
 802079a:	2200      	movs	r2, #0
 802079c:	2101      	movs	r1, #1
 802079e:	2006      	movs	r0, #6
 80207a0:	f001 fcdd 	bl	802215e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80207a4:	2006      	movs	r0, #6
 80207a6:	f001 fcf6 	bl	8022196 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 1, 0);
 80207aa:	2200      	movs	r2, #0
 80207ac:	2101      	movs	r1, #1
 80207ae:	2017      	movs	r0, #23
 80207b0:	f001 fcd5 	bl	802215e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80207b4:	2017      	movs	r0, #23
 80207b6:	f001 fcee 	bl	8022196 <HAL_NVIC_EnableIRQ>

}
 80207ba:	bf00      	nop
 80207bc:	3730      	adds	r7, #48	; 0x30
 80207be:	46bd      	mov	sp, r7
 80207c0:	bd80      	pop	{r7, pc}
 80207c2:	bf00      	nop
 80207c4:	40023800 	.word	0x40023800
 80207c8:	40020800 	.word	0x40020800
 80207cc:	40020c00 	.word	0x40020c00
 80207d0:	40020400 	.word	0x40020400
 80207d4:	40021000 	.word	0x40021000
 80207d8:	40020000 	.word	0x40020000

080207dc <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c3;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80207dc:	b580      	push	{r7, lr}
 80207de:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80207e0:	4b1b      	ldr	r3, [pc, #108]	; (8020850 <MX_I2C1_Init+0x74>)
 80207e2:	4a1c      	ldr	r2, [pc, #112]	; (8020854 <MX_I2C1_Init+0x78>)
 80207e4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20404768;
 80207e6:	4b1a      	ldr	r3, [pc, #104]	; (8020850 <MX_I2C1_Init+0x74>)
 80207e8:	4a1b      	ldr	r2, [pc, #108]	; (8020858 <MX_I2C1_Init+0x7c>)
 80207ea:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80207ec:	4b18      	ldr	r3, [pc, #96]	; (8020850 <MX_I2C1_Init+0x74>)
 80207ee:	2200      	movs	r2, #0
 80207f0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80207f2:	4b17      	ldr	r3, [pc, #92]	; (8020850 <MX_I2C1_Init+0x74>)
 80207f4:	2201      	movs	r2, #1
 80207f6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80207f8:	4b15      	ldr	r3, [pc, #84]	; (8020850 <MX_I2C1_Init+0x74>)
 80207fa:	2200      	movs	r2, #0
 80207fc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80207fe:	4b14      	ldr	r3, [pc, #80]	; (8020850 <MX_I2C1_Init+0x74>)
 8020800:	2200      	movs	r2, #0
 8020802:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8020804:	4b12      	ldr	r3, [pc, #72]	; (8020850 <MX_I2C1_Init+0x74>)
 8020806:	2200      	movs	r2, #0
 8020808:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 802080a:	4b11      	ldr	r3, [pc, #68]	; (8020850 <MX_I2C1_Init+0x74>)
 802080c:	2200      	movs	r2, #0
 802080e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8020810:	4b0f      	ldr	r3, [pc, #60]	; (8020850 <MX_I2C1_Init+0x74>)
 8020812:	2200      	movs	r2, #0
 8020814:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8020816:	480e      	ldr	r0, [pc, #56]	; (8020850 <MX_I2C1_Init+0x74>)
 8020818:	f002 fb46 	bl	8022ea8 <HAL_I2C_Init>
 802081c:	4603      	mov	r3, r0
 802081e:	2b00      	cmp	r3, #0
 8020820:	d001      	beq.n	8020826 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8020822:	f001 f8ed 	bl	8021a00 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8020826:	2100      	movs	r1, #0
 8020828:	4809      	ldr	r0, [pc, #36]	; (8020850 <MX_I2C1_Init+0x74>)
 802082a:	f003 fdf1 	bl	8024410 <HAL_I2CEx_ConfigAnalogFilter>
 802082e:	4603      	mov	r3, r0
 8020830:	2b00      	cmp	r3, #0
 8020832:	d001      	beq.n	8020838 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8020834:	f001 f8e4 	bl	8021a00 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8020838:	2100      	movs	r1, #0
 802083a:	4805      	ldr	r0, [pc, #20]	; (8020850 <MX_I2C1_Init+0x74>)
 802083c:	f003 fe33 	bl	80244a6 <HAL_I2CEx_ConfigDigitalFilter>
 8020840:	4603      	mov	r3, r0
 8020842:	2b00      	cmp	r3, #0
 8020844:	d001      	beq.n	802084a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8020846:	f001 f8db 	bl	8021a00 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 802084a:	bf00      	nop
 802084c:	bd80      	pop	{r7, pc}
 802084e:	bf00      	nop
 8020850:	20000180 	.word	0x20000180
 8020854:	40005400 	.word	0x40005400
 8020858:	20404768 	.word	0x20404768

0802085c <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 802085c:	b580      	push	{r7, lr}
 802085e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8020860:	4b1b      	ldr	r3, [pc, #108]	; (80208d0 <MX_I2C3_Init+0x74>)
 8020862:	4a1c      	ldr	r2, [pc, #112]	; (80208d4 <MX_I2C3_Init+0x78>)
 8020864:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x20404768;
 8020866:	4b1a      	ldr	r3, [pc, #104]	; (80208d0 <MX_I2C3_Init+0x74>)
 8020868:	4a1b      	ldr	r2, [pc, #108]	; (80208d8 <MX_I2C3_Init+0x7c>)
 802086a:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 802086c:	4b18      	ldr	r3, [pc, #96]	; (80208d0 <MX_I2C3_Init+0x74>)
 802086e:	2200      	movs	r2, #0
 8020870:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8020872:	4b17      	ldr	r3, [pc, #92]	; (80208d0 <MX_I2C3_Init+0x74>)
 8020874:	2201      	movs	r2, #1
 8020876:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8020878:	4b15      	ldr	r3, [pc, #84]	; (80208d0 <MX_I2C3_Init+0x74>)
 802087a:	2200      	movs	r2, #0
 802087c:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 802087e:	4b14      	ldr	r3, [pc, #80]	; (80208d0 <MX_I2C3_Init+0x74>)
 8020880:	2200      	movs	r2, #0
 8020882:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8020884:	4b12      	ldr	r3, [pc, #72]	; (80208d0 <MX_I2C3_Init+0x74>)
 8020886:	2200      	movs	r2, #0
 8020888:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 802088a:	4b11      	ldr	r3, [pc, #68]	; (80208d0 <MX_I2C3_Init+0x74>)
 802088c:	2200      	movs	r2, #0
 802088e:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8020890:	4b0f      	ldr	r3, [pc, #60]	; (80208d0 <MX_I2C3_Init+0x74>)
 8020892:	2200      	movs	r2, #0
 8020894:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8020896:	480e      	ldr	r0, [pc, #56]	; (80208d0 <MX_I2C3_Init+0x74>)
 8020898:	f002 fb06 	bl	8022ea8 <HAL_I2C_Init>
 802089c:	4603      	mov	r3, r0
 802089e:	2b00      	cmp	r3, #0
 80208a0:	d001      	beq.n	80208a6 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 80208a2:	f001 f8ad 	bl	8021a00 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80208a6:	2100      	movs	r1, #0
 80208a8:	4809      	ldr	r0, [pc, #36]	; (80208d0 <MX_I2C3_Init+0x74>)
 80208aa:	f003 fdb1 	bl	8024410 <HAL_I2CEx_ConfigAnalogFilter>
 80208ae:	4603      	mov	r3, r0
 80208b0:	2b00      	cmp	r3, #0
 80208b2:	d001      	beq.n	80208b8 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 80208b4:	f001 f8a4 	bl	8021a00 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80208b8:	2100      	movs	r1, #0
 80208ba:	4805      	ldr	r0, [pc, #20]	; (80208d0 <MX_I2C3_Init+0x74>)
 80208bc:	f003 fdf3 	bl	80244a6 <HAL_I2CEx_ConfigDigitalFilter>
 80208c0:	4603      	mov	r3, r0
 80208c2:	2b00      	cmp	r3, #0
 80208c4:	d001      	beq.n	80208ca <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 80208c6:	f001 f89b 	bl	8021a00 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80208ca:	bf00      	nop
 80208cc:	bd80      	pop	{r7, pc}
 80208ce:	bf00      	nop
 80208d0:	200001d4 	.word	0x200001d4
 80208d4:	40005c00 	.word	0x40005c00
 80208d8:	20404768 	.word	0x20404768

080208dc <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80208dc:	b580      	push	{r7, lr}
 80208de:	b0ac      	sub	sp, #176	; 0xb0
 80208e0:	af00      	add	r7, sp, #0
 80208e2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80208e4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80208e8:	2200      	movs	r2, #0
 80208ea:	601a      	str	r2, [r3, #0]
 80208ec:	605a      	str	r2, [r3, #4]
 80208ee:	609a      	str	r2, [r3, #8]
 80208f0:	60da      	str	r2, [r3, #12]
 80208f2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80208f4:	f107 031c 	add.w	r3, r7, #28
 80208f8:	2280      	movs	r2, #128	; 0x80
 80208fa:	2100      	movs	r1, #0
 80208fc:	4618      	mov	r0, r3
 80208fe:	f00b f88d 	bl	802ba1c <memset>
  if(i2cHandle->Instance==I2C1)
 8020902:	687b      	ldr	r3, [r7, #4]
 8020904:	681b      	ldr	r3, [r3, #0]
 8020906:	4a64      	ldr	r2, [pc, #400]	; (8020a98 <HAL_I2C_MspInit+0x1bc>)
 8020908:	4293      	cmp	r3, r2
 802090a:	d14c      	bne.n	80209a6 <HAL_I2C_MspInit+0xca>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 802090c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8020910:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8020912:	2300      	movs	r3, #0
 8020914:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8020916:	f107 031c 	add.w	r3, r7, #28
 802091a:	4618      	mov	r0, r3
 802091c:	f005 ffca 	bl	80268b4 <HAL_RCCEx_PeriphCLKConfig>
 8020920:	4603      	mov	r3, r0
 8020922:	2b00      	cmp	r3, #0
 8020924:	d001      	beq.n	802092a <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8020926:	f001 f86b 	bl	8021a00 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 802092a:	4b5c      	ldr	r3, [pc, #368]	; (8020a9c <HAL_I2C_MspInit+0x1c0>)
 802092c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802092e:	4a5b      	ldr	r2, [pc, #364]	; (8020a9c <HAL_I2C_MspInit+0x1c0>)
 8020930:	f043 0302 	orr.w	r3, r3, #2
 8020934:	6313      	str	r3, [r2, #48]	; 0x30
 8020936:	4b59      	ldr	r3, [pc, #356]	; (8020a9c <HAL_I2C_MspInit+0x1c0>)
 8020938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802093a:	f003 0302 	and.w	r3, r3, #2
 802093e:	61bb      	str	r3, [r7, #24]
 8020940:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB6     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = PS_ALS_SDA_Pin|PS_ALS_SCL_Pin;
 8020942:	23c0      	movs	r3, #192	; 0xc0
 8020944:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8020948:	2312      	movs	r3, #18
 802094a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 802094e:	2300      	movs	r3, #0
 8020950:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8020954:	2303      	movs	r3, #3
 8020956:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 802095a:	2304      	movs	r3, #4
 802095c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8020960:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8020964:	4619      	mov	r1, r3
 8020966:	484e      	ldr	r0, [pc, #312]	; (8020aa0 <HAL_I2C_MspInit+0x1c4>)
 8020968:	f001 ffd4 	bl	8022914 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 802096c:	4b4b      	ldr	r3, [pc, #300]	; (8020a9c <HAL_I2C_MspInit+0x1c0>)
 802096e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8020970:	4a4a      	ldr	r2, [pc, #296]	; (8020a9c <HAL_I2C_MspInit+0x1c0>)
 8020972:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8020976:	6413      	str	r3, [r2, #64]	; 0x40
 8020978:	4b48      	ldr	r3, [pc, #288]	; (8020a9c <HAL_I2C_MspInit+0x1c0>)
 802097a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802097c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8020980:	617b      	str	r3, [r7, #20]
 8020982:	697b      	ldr	r3, [r7, #20]

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 2, 0);
 8020984:	2200      	movs	r2, #0
 8020986:	2102      	movs	r1, #2
 8020988:	201f      	movs	r0, #31
 802098a:	f001 fbe8 	bl	802215e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 802098e:	201f      	movs	r0, #31
 8020990:	f001 fc01 	bl	8022196 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 2, 0);
 8020994:	2200      	movs	r2, #0
 8020996:	2102      	movs	r1, #2
 8020998:	2020      	movs	r0, #32
 802099a:	f001 fbe0 	bl	802215e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 802099e:	2020      	movs	r0, #32
 80209a0:	f001 fbf9 	bl	8022196 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(I2C3_ER_IRQn);
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 80209a4:	e074      	b.n	8020a90 <HAL_I2C_MspInit+0x1b4>
  else if(i2cHandle->Instance==I2C3)
 80209a6:	687b      	ldr	r3, [r7, #4]
 80209a8:	681b      	ldr	r3, [r3, #0]
 80209aa:	4a3e      	ldr	r2, [pc, #248]	; (8020aa4 <HAL_I2C_MspInit+0x1c8>)
 80209ac:	4293      	cmp	r3, r2
 80209ae:	d16f      	bne.n	8020a90 <HAL_I2C_MspInit+0x1b4>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 80209b0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80209b4:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 80209b6:	2300      	movs	r3, #0
 80209b8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80209bc:	f107 031c 	add.w	r3, r7, #28
 80209c0:	4618      	mov	r0, r3
 80209c2:	f005 ff77 	bl	80268b4 <HAL_RCCEx_PeriphCLKConfig>
 80209c6:	4603      	mov	r3, r0
 80209c8:	2b00      	cmp	r3, #0
 80209ca:	d001      	beq.n	80209d0 <HAL_I2C_MspInit+0xf4>
      Error_Handler();
 80209cc:	f001 f818 	bl	8021a00 <Error_Handler>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80209d0:	4b32      	ldr	r3, [pc, #200]	; (8020a9c <HAL_I2C_MspInit+0x1c0>)
 80209d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80209d4:	4a31      	ldr	r2, [pc, #196]	; (8020a9c <HAL_I2C_MspInit+0x1c0>)
 80209d6:	f043 0304 	orr.w	r3, r3, #4
 80209da:	6313      	str	r3, [r2, #48]	; 0x30
 80209dc:	4b2f      	ldr	r3, [pc, #188]	; (8020a9c <HAL_I2C_MspInit+0x1c0>)
 80209de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80209e0:	f003 0304 	and.w	r3, r3, #4
 80209e4:	613b      	str	r3, [r7, #16]
 80209e6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80209e8:	4b2c      	ldr	r3, [pc, #176]	; (8020a9c <HAL_I2C_MspInit+0x1c0>)
 80209ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80209ec:	4a2b      	ldr	r2, [pc, #172]	; (8020a9c <HAL_I2C_MspInit+0x1c0>)
 80209ee:	f043 0301 	orr.w	r3, r3, #1
 80209f2:	6313      	str	r3, [r2, #48]	; 0x30
 80209f4:	4b29      	ldr	r3, [pc, #164]	; (8020a9c <HAL_I2C_MspInit+0x1c0>)
 80209f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80209f8:	f003 0301 	and.w	r3, r3, #1
 80209fc:	60fb      	str	r3, [r7, #12]
 80209fe:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = LT7911_CFG_SDA_Pin;
 8020a00:	f44f 7300 	mov.w	r3, #512	; 0x200
 8020a04:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8020a08:	2312      	movs	r3, #18
 8020a0a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8020a0e:	2300      	movs	r3, #0
 8020a10:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8020a14:	2303      	movs	r3, #3
 8020a16:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8020a1a:	2304      	movs	r3, #4
 8020a1c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(LT7911_CFG_SDA_GPIO_Port, &GPIO_InitStruct);
 8020a20:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8020a24:	4619      	mov	r1, r3
 8020a26:	4820      	ldr	r0, [pc, #128]	; (8020aa8 <HAL_I2C_MspInit+0x1cc>)
 8020a28:	f001 ff74 	bl	8022914 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = LT7911_CFG_SCL_Pin;
 8020a2c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8020a30:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8020a34:	2312      	movs	r3, #18
 8020a36:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8020a3a:	2300      	movs	r3, #0
 8020a3c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8020a40:	2303      	movs	r3, #3
 8020a42:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8020a46:	2304      	movs	r3, #4
 8020a48:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(LT7911_CFG_SCL_GPIO_Port, &GPIO_InitStruct);
 8020a4c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8020a50:	4619      	mov	r1, r3
 8020a52:	4816      	ldr	r0, [pc, #88]	; (8020aac <HAL_I2C_MspInit+0x1d0>)
 8020a54:	f001 ff5e 	bl	8022914 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8020a58:	4b10      	ldr	r3, [pc, #64]	; (8020a9c <HAL_I2C_MspInit+0x1c0>)
 8020a5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8020a5c:	4a0f      	ldr	r2, [pc, #60]	; (8020a9c <HAL_I2C_MspInit+0x1c0>)
 8020a5e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8020a62:	6413      	str	r3, [r2, #64]	; 0x40
 8020a64:	4b0d      	ldr	r3, [pc, #52]	; (8020a9c <HAL_I2C_MspInit+0x1c0>)
 8020a66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8020a68:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8020a6c:	60bb      	str	r3, [r7, #8]
 8020a6e:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(I2C3_EV_IRQn, 2, 0);
 8020a70:	2200      	movs	r2, #0
 8020a72:	2102      	movs	r1, #2
 8020a74:	2048      	movs	r0, #72	; 0x48
 8020a76:	f001 fb72 	bl	802215e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C3_EV_IRQn);
 8020a7a:	2048      	movs	r0, #72	; 0x48
 8020a7c:	f001 fb8b 	bl	8022196 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C3_ER_IRQn, 2, 0);
 8020a80:	2200      	movs	r2, #0
 8020a82:	2102      	movs	r1, #2
 8020a84:	2049      	movs	r0, #73	; 0x49
 8020a86:	f001 fb6a 	bl	802215e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C3_ER_IRQn);
 8020a8a:	2049      	movs	r0, #73	; 0x49
 8020a8c:	f001 fb83 	bl	8022196 <HAL_NVIC_EnableIRQ>
}
 8020a90:	bf00      	nop
 8020a92:	37b0      	adds	r7, #176	; 0xb0
 8020a94:	46bd      	mov	sp, r7
 8020a96:	bd80      	pop	{r7, pc}
 8020a98:	40005400 	.word	0x40005400
 8020a9c:	40023800 	.word	0x40023800
 8020aa0:	40020400 	.word	0x40020400
 8020aa4:	40005c00 	.word	0x40005c00
 8020aa8:	40020800 	.word	0x40020800
 8020aac:	40020000 	.word	0x40020000

08020ab0 <MX_I2S3_Init>:
I2S_HandleTypeDef hi2s3;
DMA_HandleTypeDef hdma_spi3_rx;

/* I2S3 init function */
void MX_I2S3_Init(void)
{
 8020ab0:	b580      	push	{r7, lr}
 8020ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2S3_Init 0 */
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */
  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8020ab4:	4b11      	ldr	r3, [pc, #68]	; (8020afc <MX_I2S3_Init+0x4c>)
 8020ab6:	4a12      	ldr	r2, [pc, #72]	; (8020b00 <MX_I2S3_Init+0x50>)
 8020ab8:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_RX;
 8020aba:	4b10      	ldr	r3, [pc, #64]	; (8020afc <MX_I2S3_Init+0x4c>)
 8020abc:	f44f 7240 	mov.w	r2, #768	; 0x300
 8020ac0:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8020ac2:	4b0e      	ldr	r3, [pc, #56]	; (8020afc <MX_I2S3_Init+0x4c>)
 8020ac4:	2200      	movs	r2, #0
 8020ac6:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B_EXTENDED;
 8020ac8:	4b0c      	ldr	r3, [pc, #48]	; (8020afc <MX_I2S3_Init+0x4c>)
 8020aca:	2201      	movs	r2, #1
 8020acc:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 8020ace:	4b0b      	ldr	r3, [pc, #44]	; (8020afc <MX_I2S3_Init+0x4c>)
 8020ad0:	2200      	movs	r2, #0
 8020ad2:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_16K;
 8020ad4:	4b09      	ldr	r3, [pc, #36]	; (8020afc <MX_I2S3_Init+0x4c>)
 8020ad6:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 8020ada:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8020adc:	4b07      	ldr	r3, [pc, #28]	; (8020afc <MX_I2S3_Init+0x4c>)
 8020ade:	2200      	movs	r2, #0
 8020ae0:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8020ae2:	4b06      	ldr	r3, [pc, #24]	; (8020afc <MX_I2S3_Init+0x4c>)
 8020ae4:	2202      	movs	r2, #2
 8020ae6:	61da      	str	r2, [r3, #28]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8020ae8:	4804      	ldr	r0, [pc, #16]	; (8020afc <MX_I2S3_Init+0x4c>)
 8020aea:	f003 fd29 	bl	8024540 <HAL_I2S_Init>
 8020aee:	4603      	mov	r3, r0
 8020af0:	2b00      	cmp	r3, #0
 8020af2:	d001      	beq.n	8020af8 <MX_I2S3_Init+0x48>
  {
    Error_Handler();
 8020af4:	f000 ff84 	bl	8021a00 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */
  /* USER CODE END I2S3_Init 2 */

}
 8020af8:	bf00      	nop
 8020afa:	bd80      	pop	{r7, pc}
 8020afc:	20000228 	.word	0x20000228
 8020b00:	40003c00 	.word	0x40003c00

08020b04 <HAL_I2S_MspInit>:

void HAL_I2S_MspInit(I2S_HandleTypeDef* i2sHandle)
{
 8020b04:	b580      	push	{r7, lr}
 8020b06:	b0aa      	sub	sp, #168	; 0xa8
 8020b08:	af00      	add	r7, sp, #0
 8020b0a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8020b0c:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8020b10:	2200      	movs	r2, #0
 8020b12:	601a      	str	r2, [r3, #0]
 8020b14:	605a      	str	r2, [r3, #4]
 8020b16:	609a      	str	r2, [r3, #8]
 8020b18:	60da      	str	r2, [r3, #12]
 8020b1a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8020b1c:	f107 0314 	add.w	r3, r7, #20
 8020b20:	2280      	movs	r2, #128	; 0x80
 8020b22:	2100      	movs	r1, #0
 8020b24:	4618      	mov	r0, r3
 8020b26:	f00a ff79 	bl	802ba1c <memset>
  if(i2sHandle->Instance==SPI3)
 8020b2a:	687b      	ldr	r3, [r7, #4]
 8020b2c:	681b      	ldr	r3, [r3, #0]
 8020b2e:	4a52      	ldr	r2, [pc, #328]	; (8020c78 <HAL_I2S_MspInit+0x174>)
 8020b30:	4293      	cmp	r3, r2
 8020b32:	f040 809c 	bne.w	8020c6e <HAL_I2S_MspInit+0x16a>
  /* USER CODE BEGIN SPI3_MspInit 0 */
  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 96;
 8020b36:	2360      	movs	r3, #96	; 0x60
 8020b38:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8020b3a:	2302      	movs	r3, #2
 8020b3c:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLI2S.PLLI2SQ = 2;
 8020b3e:	2302      	movs	r3, #2
 8020b40:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLLI2SDivQ = 1;
 8020b42:	2301      	movs	r3, #1
 8020b44:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.I2sClockSelection = RCC_I2SCLKSOURCE_PLLI2S;
 8020b46:	2300      	movs	r3, #0
 8020b48:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8020b4a:	f107 0314 	add.w	r3, r7, #20
 8020b4e:	4618      	mov	r0, r3
 8020b50:	f005 feb0 	bl	80268b4 <HAL_RCCEx_PeriphCLKConfig>
 8020b54:	4603      	mov	r3, r0
 8020b56:	2b00      	cmp	r3, #0
 8020b58:	d001      	beq.n	8020b5e <HAL_I2S_MspInit+0x5a>
    {
      Error_Handler();
 8020b5a:	f000 ff51 	bl	8021a00 <Error_Handler>
    }

    /* I2S3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8020b5e:	4b47      	ldr	r3, [pc, #284]	; (8020c7c <HAL_I2S_MspInit+0x178>)
 8020b60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8020b62:	4a46      	ldr	r2, [pc, #280]	; (8020c7c <HAL_I2S_MspInit+0x178>)
 8020b64:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8020b68:	6413      	str	r3, [r2, #64]	; 0x40
 8020b6a:	4b44      	ldr	r3, [pc, #272]	; (8020c7c <HAL_I2S_MspInit+0x178>)
 8020b6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8020b6e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8020b72:	613b      	str	r3, [r7, #16]
 8020b74:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8020b76:	4b41      	ldr	r3, [pc, #260]	; (8020c7c <HAL_I2S_MspInit+0x178>)
 8020b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020b7a:	4a40      	ldr	r2, [pc, #256]	; (8020c7c <HAL_I2S_MspInit+0x178>)
 8020b7c:	f043 0302 	orr.w	r3, r3, #2
 8020b80:	6313      	str	r3, [r2, #48]	; 0x30
 8020b82:	4b3e      	ldr	r3, [pc, #248]	; (8020c7c <HAL_I2S_MspInit+0x178>)
 8020b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020b86:	f003 0302 	and.w	r3, r3, #2
 8020b8a:	60fb      	str	r3, [r7, #12]
 8020b8c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8020b8e:	4b3b      	ldr	r3, [pc, #236]	; (8020c7c <HAL_I2S_MspInit+0x178>)
 8020b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020b92:	4a3a      	ldr	r2, [pc, #232]	; (8020c7c <HAL_I2S_MspInit+0x178>)
 8020b94:	f043 0301 	orr.w	r3, r3, #1
 8020b98:	6313      	str	r3, [r2, #48]	; 0x30
 8020b9a:	4b38      	ldr	r3, [pc, #224]	; (8020c7c <HAL_I2S_MspInit+0x178>)
 8020b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020b9e:	f003 0301 	and.w	r3, r3, #1
 8020ba2:	60bb      	str	r3, [r7, #8]
 8020ba4:	68bb      	ldr	r3, [r7, #8]
    /**I2S3 GPIO Configuration
    PB3     ------> I2S3_CK
    PA15     ------> I2S3_WS
    PB5     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = MIC_CK_Pin|MIC_SD_Pin;
 8020ba6:	2328      	movs	r3, #40	; 0x28
 8020ba8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8020bac:	2302      	movs	r3, #2
 8020bae:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8020bb2:	2300      	movs	r3, #0
 8020bb4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8020bb8:	2300      	movs	r3, #0
 8020bba:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8020bbe:	2306      	movs	r3, #6
 8020bc0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8020bc4:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8020bc8:	4619      	mov	r1, r3
 8020bca:	482d      	ldr	r0, [pc, #180]	; (8020c80 <HAL_I2S_MspInit+0x17c>)
 8020bcc:	f001 fea2 	bl	8022914 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MIC_WS_Pin;
 8020bd0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8020bd4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8020bd8:	2302      	movs	r3, #2
 8020bda:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8020bde:	2300      	movs	r3, #0
 8020be0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8020be4:	2300      	movs	r3, #0
 8020be6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8020bea:	2306      	movs	r3, #6
 8020bec:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(MIC_WS_GPIO_Port, &GPIO_InitStruct);
 8020bf0:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8020bf4:	4619      	mov	r1, r3
 8020bf6:	4823      	ldr	r0, [pc, #140]	; (8020c84 <HAL_I2S_MspInit+0x180>)
 8020bf8:	f001 fe8c 	bl	8022914 <HAL_GPIO_Init>

    /* I2S3 DMA Init */
    /* SPI3_RX Init */
    hdma_spi3_rx.Instance = DMA1_Stream0;
 8020bfc:	4b22      	ldr	r3, [pc, #136]	; (8020c88 <HAL_I2S_MspInit+0x184>)
 8020bfe:	4a23      	ldr	r2, [pc, #140]	; (8020c8c <HAL_I2S_MspInit+0x188>)
 8020c00:	601a      	str	r2, [r3, #0]
    hdma_spi3_rx.Init.Channel = DMA_CHANNEL_0;
 8020c02:	4b21      	ldr	r3, [pc, #132]	; (8020c88 <HAL_I2S_MspInit+0x184>)
 8020c04:	2200      	movs	r2, #0
 8020c06:	605a      	str	r2, [r3, #4]
    hdma_spi3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8020c08:	4b1f      	ldr	r3, [pc, #124]	; (8020c88 <HAL_I2S_MspInit+0x184>)
 8020c0a:	2200      	movs	r2, #0
 8020c0c:	609a      	str	r2, [r3, #8]
    hdma_spi3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8020c0e:	4b1e      	ldr	r3, [pc, #120]	; (8020c88 <HAL_I2S_MspInit+0x184>)
 8020c10:	2200      	movs	r2, #0
 8020c12:	60da      	str	r2, [r3, #12]
    hdma_spi3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8020c14:	4b1c      	ldr	r3, [pc, #112]	; (8020c88 <HAL_I2S_MspInit+0x184>)
 8020c16:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8020c1a:	611a      	str	r2, [r3, #16]
    hdma_spi3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8020c1c:	4b1a      	ldr	r3, [pc, #104]	; (8020c88 <HAL_I2S_MspInit+0x184>)
 8020c1e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8020c22:	615a      	str	r2, [r3, #20]
    hdma_spi3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8020c24:	4b18      	ldr	r3, [pc, #96]	; (8020c88 <HAL_I2S_MspInit+0x184>)
 8020c26:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8020c2a:	619a      	str	r2, [r3, #24]
    hdma_spi3_rx.Init.Mode = DMA_CIRCULAR;
 8020c2c:	4b16      	ldr	r3, [pc, #88]	; (8020c88 <HAL_I2S_MspInit+0x184>)
 8020c2e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8020c32:	61da      	str	r2, [r3, #28]
    hdma_spi3_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8020c34:	4b14      	ldr	r3, [pc, #80]	; (8020c88 <HAL_I2S_MspInit+0x184>)
 8020c36:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8020c3a:	621a      	str	r2, [r3, #32]
    hdma_spi3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8020c3c:	4b12      	ldr	r3, [pc, #72]	; (8020c88 <HAL_I2S_MspInit+0x184>)
 8020c3e:	2200      	movs	r2, #0
 8020c40:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi3_rx) != HAL_OK)
 8020c42:	4811      	ldr	r0, [pc, #68]	; (8020c88 <HAL_I2S_MspInit+0x184>)
 8020c44:	f001 fb4c 	bl	80222e0 <HAL_DMA_Init>
 8020c48:	4603      	mov	r3, r0
 8020c4a:	2b00      	cmp	r3, #0
 8020c4c:	d001      	beq.n	8020c52 <HAL_I2S_MspInit+0x14e>
    {
      Error_Handler();
 8020c4e:	f000 fed7 	bl	8021a00 <Error_Handler>
    }

    __HAL_LINKDMA(i2sHandle,hdmarx,hdma_spi3_rx);
 8020c52:	687b      	ldr	r3, [r7, #4]
 8020c54:	4a0c      	ldr	r2, [pc, #48]	; (8020c88 <HAL_I2S_MspInit+0x184>)
 8020c56:	635a      	str	r2, [r3, #52]	; 0x34
 8020c58:	4a0b      	ldr	r2, [pc, #44]	; (8020c88 <HAL_I2S_MspInit+0x184>)
 8020c5a:	687b      	ldr	r3, [r7, #4]
 8020c5c:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2S3 interrupt Init */
    HAL_NVIC_SetPriority(SPI3_IRQn, 0, 0);
 8020c5e:	2200      	movs	r2, #0
 8020c60:	2100      	movs	r1, #0
 8020c62:	2033      	movs	r0, #51	; 0x33
 8020c64:	f001 fa7b 	bl	802215e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 8020c68:	2033      	movs	r0, #51	; 0x33
 8020c6a:	f001 fa94 	bl	8022196 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI3_MspInit 1 */
  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8020c6e:	bf00      	nop
 8020c70:	37a8      	adds	r7, #168	; 0xa8
 8020c72:	46bd      	mov	sp, r7
 8020c74:	bd80      	pop	{r7, pc}
 8020c76:	bf00      	nop
 8020c78:	40003c00 	.word	0x40003c00
 8020c7c:	40023800 	.word	0x40023800
 8020c80:	40020400 	.word	0x40020400
 8020c84:	40020000 	.word	0x40020000
 8020c88:	20000268 	.word	0x20000268
 8020c8c:	40026010 	.word	0x40026010

08020c90 <LT7911_Init>:
#define Flash_flag 1

uint8_t FW_CRC = 0;

void LT7911_Init( void)
{
 8020c90:	b580      	push	{r7, lr}
 8020c92:	af00      	add	r7, sp, #0
    /* Reset LT7911 */
    HAL_GPIO_WritePin( LT7911_RSTN_GPIO_Port, LT7911_RSTN_Pin, GPIO_PIN_RESET);
 8020c94:	2200      	movs	r2, #0
 8020c96:	2104      	movs	r1, #4
 8020c98:	4807      	ldr	r0, [pc, #28]	; (8020cb8 <LT7911_Init+0x28>)
 8020c9a:	f002 f8d3 	bl	8022e44 <HAL_GPIO_WritePin>
    HAL_Delay( 12);
 8020c9e:	200c      	movs	r0, #12
 8020ca0:	f001 f93a 	bl	8021f18 <HAL_Delay>
    /* Release LT7911 into working mode. */
    HAL_GPIO_WritePin( LT7911_RSTN_GPIO_Port, LT7911_RSTN_Pin, GPIO_PIN_SET);
 8020ca4:	2201      	movs	r2, #1
 8020ca6:	2104      	movs	r1, #4
 8020ca8:	4803      	ldr	r0, [pc, #12]	; (8020cb8 <LT7911_Init+0x28>)
 8020caa:	f002 f8cb 	bl	8022e44 <HAL_GPIO_WritePin>
    HAL_Delay( 12);
 8020cae:	200c      	movs	r0, #12
 8020cb0:	f001 f932 	bl	8021f18 <HAL_Delay>

}
 8020cb4:	bf00      	nop
 8020cb6:	bd80      	pop	{r7, pc}
 8020cb8:	40020400 	.word	0x40020400

08020cbc <HDMI_WriteI2C_Byte>:
    HAL_Delay(12);

}

HAL_StatusTypeDef HDMI_WriteI2C_Byte( uint16_t addr, uint8_t buf)
{
 8020cbc:	b580      	push	{r7, lr}
 8020cbe:	b088      	sub	sp, #32
 8020cc0:	af04      	add	r7, sp, #16
 8020cc2:	4603      	mov	r3, r0
 8020cc4:	460a      	mov	r2, r1
 8020cc6:	80fb      	strh	r3, [r7, #6]
 8020cc8:	4613      	mov	r3, r2
 8020cca:	717b      	strb	r3, [r7, #5]
    HAL_StatusTypeDef nRet = HAL_I2C_Mem_Write( &hi2c3, (LT7911_DEV_ADDR << 1),
 8020ccc:	88fa      	ldrh	r2, [r7, #6]
 8020cce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8020cd2:	9302      	str	r3, [sp, #8]
 8020cd4:	2301      	movs	r3, #1
 8020cd6:	9301      	str	r3, [sp, #4]
 8020cd8:	1d7b      	adds	r3, r7, #5
 8020cda:	9300      	str	r3, [sp, #0]
 8020cdc:	2301      	movs	r3, #1
 8020cde:	2186      	movs	r1, #134	; 0x86
 8020ce0:	4804      	ldr	r0, [pc, #16]	; (8020cf4 <HDMI_WriteI2C_Byte+0x38>)
 8020ce2:	f002 f971 	bl	8022fc8 <HAL_I2C_Mem_Write>
 8020ce6:	4603      	mov	r3, r0
 8020ce8:	73fb      	strb	r3, [r7, #15]
    {
        usb_printf( "err %s: [%d]\n", __FUNCTION__, __LINE__);
    }
#endif

    return nRet;
 8020cea:	7bfb      	ldrb	r3, [r7, #15]
}
 8020cec:	4618      	mov	r0, r3
 8020cee:	3710      	adds	r7, #16
 8020cf0:	46bd      	mov	sp, r7
 8020cf2:	bd80      	pop	{r7, pc}
 8020cf4:	200001d4 	.word	0x200001d4

08020cf8 <HDMI_WriteI2C_ByteN>:

HAL_StatusTypeDef HDMI_WriteI2C_ByteN( uint16_t addr, uint8_t *buf,
        uint16_t size)
{
 8020cf8:	b580      	push	{r7, lr}
 8020cfa:	b088      	sub	sp, #32
 8020cfc:	af04      	add	r7, sp, #16
 8020cfe:	4603      	mov	r3, r0
 8020d00:	6039      	str	r1, [r7, #0]
 8020d02:	80fb      	strh	r3, [r7, #6]
 8020d04:	4613      	mov	r3, r2
 8020d06:	80bb      	strh	r3, [r7, #4]
    HAL_StatusTypeDef nRet = HAL_I2C_Mem_Write( &hi2c3, (LT7911_DEV_ADDR << 1),
 8020d08:	88fa      	ldrh	r2, [r7, #6]
 8020d0a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8020d0e:	9302      	str	r3, [sp, #8]
 8020d10:	88bb      	ldrh	r3, [r7, #4]
 8020d12:	9301      	str	r3, [sp, #4]
 8020d14:	683b      	ldr	r3, [r7, #0]
 8020d16:	9300      	str	r3, [sp, #0]
 8020d18:	2301      	movs	r3, #1
 8020d1a:	2186      	movs	r1, #134	; 0x86
 8020d1c:	4804      	ldr	r0, [pc, #16]	; (8020d30 <HDMI_WriteI2C_ByteN+0x38>)
 8020d1e:	f002 f953 	bl	8022fc8 <HAL_I2C_Mem_Write>
 8020d22:	4603      	mov	r3, r0
 8020d24:	73fb      	strb	r3, [r7, #15]
    {
        usb_printf( "err %s: [%d]\n", __FUNCTION__, __LINE__);
    }
#endif

    return nRet;
 8020d26:	7bfb      	ldrb	r3, [r7, #15]
}
 8020d28:	4618      	mov	r0, r3
 8020d2a:	3710      	adds	r7, #16
 8020d2c:	46bd      	mov	sp, r7
 8020d2e:	bd80      	pop	{r7, pc}
 8020d30:	200001d4 	.word	0x200001d4

08020d34 <HDMI_ReadI2C_ByteN>:
}


HAL_StatusTypeDef HDMI_ReadI2C_ByteN( uint16_t addr, uint8_t *buf,
        uint16_t size)
{
 8020d34:	b580      	push	{r7, lr}
 8020d36:	b086      	sub	sp, #24
 8020d38:	af04      	add	r7, sp, #16
 8020d3a:	4603      	mov	r3, r0
 8020d3c:	6039      	str	r1, [r7, #0]
 8020d3e:	80fb      	strh	r3, [r7, #6]
 8020d40:	4613      	mov	r3, r2
 8020d42:	80bb      	strh	r3, [r7, #4]
    return HAL_I2C_Mem_Read( &hi2c3, (LT7911_DEV_ADDR << 1), addr,
 8020d44:	88fa      	ldrh	r2, [r7, #6]
 8020d46:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8020d4a:	9302      	str	r3, [sp, #8]
 8020d4c:	88bb      	ldrh	r3, [r7, #4]
 8020d4e:	9301      	str	r3, [sp, #4]
 8020d50:	683b      	ldr	r3, [r7, #0]
 8020d52:	9300      	str	r3, [sp, #0]
 8020d54:	2301      	movs	r3, #1
 8020d56:	2186      	movs	r1, #134	; 0x86
 8020d58:	4803      	ldr	r0, [pc, #12]	; (8020d68 <HDMI_ReadI2C_ByteN+0x34>)
 8020d5a:	f002 fa49 	bl	80231f0 <HAL_I2C_Mem_Read>
 8020d5e:	4603      	mov	r3, r0
            I2C_MEMADD_SIZE_8BIT, buf, size, LT7911_TIMEOUT);
}
 8020d60:	4618      	mov	r0, r3
 8020d62:	3708      	adds	r7, #8
 8020d64:	46bd      	mov	sp, r7
 8020d66:	bd80      	pop	{r7, pc}
 8020d68:	200001d4 	.word	0x200001d4

08020d6c <LT7911_ReadChipId>:
// 	{0x00,0x00,0x00,0x00},
// };


uint16_t LT7911_ReadChipId( void)  //59 CRC address
{
 8020d6c:	b580      	push	{r7, lr}
 8020d6e:	b082      	sub	sp, #8
 8020d70:	af00      	add	r7, sp, #0
//    uint8_t bA000=0, bA001=0;
    uint16_t nChipId = 0;
 8020d72:	2300      	movs	r3, #0
 8020d74:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];
    //EnableI2C
    HDMI_WriteI2C_Byte( 0xFF, 0xE0);
 8020d76:	21e0      	movs	r1, #224	; 0xe0
 8020d78:	20ff      	movs	r0, #255	; 0xff
 8020d7a:	f7ff ff9f 	bl	8020cbc <HDMI_WriteI2C_Byte>
    HDMI_WriteI2C_Byte( 0xEE, 0x01);
 8020d7e:	2101      	movs	r1, #1
 8020d80:	20ee      	movs	r0, #238	; 0xee
 8020d82:	f7ff ff9b 	bl	8020cbc <HDMI_WriteI2C_Byte>

    //CheckID
    HDMI_WriteI2C_Byte( 0xFF, 0xE1);
 8020d86:	21e1      	movs	r1, #225	; 0xe1
 8020d88:	20ff      	movs	r0, #255	; 0xff
 8020d8a:	f7ff ff97 	bl	8020cbc <HDMI_WriteI2C_Byte>
    HAL_Delay( 2);
 8020d8e:	2002      	movs	r0, #2
 8020d90:	f001 f8c2 	bl	8021f18 <HAL_Delay>
    HDMI_ReadI2C_ByteN( 0x00, buf, 2);
 8020d94:	1d3b      	adds	r3, r7, #4
 8020d96:	2202      	movs	r2, #2
 8020d98:	4619      	mov	r1, r3
 8020d9a:	2000      	movs	r0, #0
 8020d9c:	f7ff ffca 	bl	8020d34 <HDMI_ReadI2C_ByteN>

    nChipId = ((((uint16_t)buf[0]) << 8) & 0xFF00)
 8020da0:	793b      	ldrb	r3, [r7, #4]
 8020da2:	021b      	lsls	r3, r3, #8
            | (((uint16_t)buf[1]) & 0x00FF);
 8020da4:	b21a      	sxth	r2, r3
 8020da6:	797b      	ldrb	r3, [r7, #5]
 8020da8:	b21b      	sxth	r3, r3
 8020daa:	4313      	orrs	r3, r2
 8020dac:	b21b      	sxth	r3, r3
    nChipId = ((((uint16_t)buf[0]) << 8) & 0xFF00)
 8020dae:	80fb      	strh	r3, [r7, #6]

    return nChipId;
 8020db0:	88fb      	ldrh	r3, [r7, #6]
}
 8020db2:	4618      	mov	r0, r3
 8020db4:	3708      	adds	r7, #8
 8020db6:	46bd      	mov	sp, r7
 8020db8:	bd80      	pop	{r7, pc}

08020dba <LT7911_Config>:

void LT7911_Config( void)
{
 8020dba:	b580      	push	{r7, lr}
 8020dbc:	af00      	add	r7, sp, #0
    HDMI_WriteI2C_Byte( 0xFF, 0xE0);
 8020dbe:	21e0      	movs	r1, #224	; 0xe0
 8020dc0:	20ff      	movs	r0, #255	; 0xff
 8020dc2:	f7ff ff7b 	bl	8020cbc <HDMI_WriteI2C_Byte>
    HDMI_WriteI2C_Byte( 0xEE, 0x01);
 8020dc6:	2101      	movs	r1, #1
 8020dc8:	20ee      	movs	r0, #238	; 0xee
 8020dca:	f7ff ff77 	bl	8020cbc <HDMI_WriteI2C_Byte>

    HDMI_WriteI2C_Byte( 0x5E, 0xC1);
 8020dce:	21c1      	movs	r1, #193	; 0xc1
 8020dd0:	205e      	movs	r0, #94	; 0x5e
 8020dd2:	f7ff ff73 	bl	8020cbc <HDMI_WriteI2C_Byte>
    HDMI_WriteI2C_Byte( 0x58, 0x00);
 8020dd6:	2100      	movs	r1, #0
 8020dd8:	2058      	movs	r0, #88	; 0x58
 8020dda:	f7ff ff6f 	bl	8020cbc <HDMI_WriteI2C_Byte>
    HDMI_WriteI2C_Byte( 0x59, 0x50);
 8020dde:	2150      	movs	r1, #80	; 0x50
 8020de0:	2059      	movs	r0, #89	; 0x59
 8020de2:	f7ff ff6b 	bl	8020cbc <HDMI_WriteI2C_Byte>
    HDMI_WriteI2C_Byte( 0x5A, 0x10);
 8020de6:	2110      	movs	r1, #16
 8020de8:	205a      	movs	r0, #90	; 0x5a
 8020dea:	f7ff ff67 	bl	8020cbc <HDMI_WriteI2C_Byte>
    HDMI_WriteI2C_Byte( 0x5A, 0x00);
 8020dee:	2100      	movs	r1, #0
 8020df0:	205a      	movs	r0, #90	; 0x5a
 8020df2:	f7ff ff63 	bl	8020cbc <HDMI_WriteI2C_Byte>
    HDMI_WriteI2C_Byte( 0x58, 0x21);
 8020df6:	2121      	movs	r1, #33	; 0x21
 8020df8:	2058      	movs	r0, #88	; 0x58
 8020dfa:	f7ff ff5f 	bl	8020cbc <HDMI_WriteI2C_Byte>
}
 8020dfe:	bf00      	nop
 8020e00:	bd80      	pop	{r7, pc}

08020e02 <LT7911_BlockErase>:

    return HAL_OK;
}

void LT7911_BlockErase( void)
{
 8020e02:	b580      	push	{r7, lr}
 8020e04:	af00      	add	r7, sp, #0
    HDMI_WriteI2C_Byte( 0xFF, 0xE0);
 8020e06:	21e0      	movs	r1, #224	; 0xe0
 8020e08:	20ff      	movs	r0, #255	; 0xff
 8020e0a:	f7ff ff57 	bl	8020cbc <HDMI_WriteI2C_Byte>
    HDMI_WriteI2C_Byte( 0xEE, 0x01);
 8020e0e:	2101      	movs	r1, #1
 8020e10:	20ee      	movs	r0, #238	; 0xee
 8020e12:	f7ff ff53 	bl	8020cbc <HDMI_WriteI2C_Byte>

    HDMI_WriteI2C_Byte( 0x5A, 0x04);
 8020e16:	2104      	movs	r1, #4
 8020e18:	205a      	movs	r0, #90	; 0x5a
 8020e1a:	f7ff ff4f 	bl	8020cbc <HDMI_WriteI2C_Byte>
    HDMI_WriteI2C_Byte( 0x5A, 0x00);
 8020e1e:	2100      	movs	r1, #0
 8020e20:	205a      	movs	r0, #90	; 0x5a
 8020e22:	f7ff ff4b 	bl	8020cbc <HDMI_WriteI2C_Byte>

    HDMI_WriteI2C_Byte( 0x5B, 0x00);
 8020e26:	2100      	movs	r1, #0
 8020e28:	205b      	movs	r0, #91	; 0x5b
 8020e2a:	f7ff ff47 	bl	8020cbc <HDMI_WriteI2C_Byte>
    HDMI_WriteI2C_Byte( 0x5C, 0x00);
 8020e2e:	2100      	movs	r1, #0
 8020e30:	205c      	movs	r0, #92	; 0x5c
 8020e32:	f7ff ff43 	bl	8020cbc <HDMI_WriteI2C_Byte>
    HDMI_WriteI2C_Byte( 0x5D, 0x00);
 8020e36:	2100      	movs	r1, #0
 8020e38:	205d      	movs	r0, #93	; 0x5d
 8020e3a:	f7ff ff3f 	bl	8020cbc <HDMI_WriteI2C_Byte>

    HDMI_WriteI2C_Byte( 0x5A, 0x01);
 8020e3e:	2101      	movs	r1, #1
 8020e40:	205a      	movs	r0, #90	; 0x5a
 8020e42:	f7ff ff3b 	bl	8020cbc <HDMI_WriteI2C_Byte>
    HDMI_WriteI2C_Byte( 0x5A, 0x00);
 8020e46:	2100      	movs	r1, #0
 8020e48:	205a      	movs	r0, #90	; 0x5a
 8020e4a:	f7ff ff37 	bl	8020cbc <HDMI_WriteI2C_Byte>
    HAL_Delay(500); 
 8020e4e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8020e52:	f001 f861 	bl	8021f18 <HAL_Delay>

    HDMI_WriteI2C_Byte( 0xFF, 0xE0);
 8020e56:	21e0      	movs	r1, #224	; 0xe0
 8020e58:	20ff      	movs	r0, #255	; 0xff
 8020e5a:	f7ff ff2f 	bl	8020cbc <HDMI_WriteI2C_Byte>
    HDMI_WriteI2C_Byte( 0xEE, 0x01);
 8020e5e:	2101      	movs	r1, #1
 8020e60:	20ee      	movs	r0, #238	; 0xee
 8020e62:	f7ff ff2b 	bl	8020cbc <HDMI_WriteI2C_Byte>

    HDMI_WriteI2C_Byte( 0x5A, 0x04);
 8020e66:	2104      	movs	r1, #4
 8020e68:	205a      	movs	r0, #90	; 0x5a
 8020e6a:	f7ff ff27 	bl	8020cbc <HDMI_WriteI2C_Byte>
    HDMI_WriteI2C_Byte( 0x5A, 0x00);
 8020e6e:	2100      	movs	r1, #0
 8020e70:	205a      	movs	r0, #90	; 0x5a
 8020e72:	f7ff ff23 	bl	8020cbc <HDMI_WriteI2C_Byte>

    HDMI_WriteI2C_Byte( 0x5B, 0x00);
 8020e76:	2100      	movs	r1, #0
 8020e78:	205b      	movs	r0, #91	; 0x5b
 8020e7a:	f7ff ff1f 	bl	8020cbc <HDMI_WriteI2C_Byte>
    HDMI_WriteI2C_Byte( 0x5C, 0x80);
 8020e7e:	2180      	movs	r1, #128	; 0x80
 8020e80:	205c      	movs	r0, #92	; 0x5c
 8020e82:	f7ff ff1b 	bl	8020cbc <HDMI_WriteI2C_Byte>
    HDMI_WriteI2C_Byte( 0x5D, 0x00);
 8020e86:	2100      	movs	r1, #0
 8020e88:	205d      	movs	r0, #93	; 0x5d
 8020e8a:	f7ff ff17 	bl	8020cbc <HDMI_WriteI2C_Byte>

    HDMI_WriteI2C_Byte( 0x5A, 0x01);
 8020e8e:	2101      	movs	r1, #1
 8020e90:	205a      	movs	r0, #90	; 0x5a
 8020e92:	f7ff ff13 	bl	8020cbc <HDMI_WriteI2C_Byte>
    HDMI_WriteI2C_Byte( 0x5A, 0x00);
 8020e96:	2100      	movs	r1, #0
 8020e98:	205a      	movs	r0, #90	; 0x5a
 8020e9a:	f7ff ff0f 	bl	8020cbc <HDMI_WriteI2C_Byte>
    HAL_Delay(500);
 8020e9e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8020ea2:	f001 f839 	bl	8021f18 <HAL_Delay>

}
 8020ea6:	bf00      	nop
 8020ea8:	bd80      	pop	{r7, pc}
	...

08020eac <LT7911_WriteFirmware>:
86 5a 00 00
// delay 500ms
  */

void LT7911_WriteFirmware( uint8_t *byWriteData, uint32_t DataLen)
{
 8020eac:	b580      	push	{r7, lr}
 8020eae:	b088      	sub	sp, #32
 8020eb0:	af00      	add	r7, sp, #0
 8020eb2:	6078      	str	r0, [r7, #4]
 8020eb4:	6039      	str	r1, [r7, #0]
//    uint8_t bRead;
    uint8_t addr[3] = { 0, 0, 0 };
 8020eb6:	4a53      	ldr	r2, [pc, #332]	; (8021004 <LT7911_WriteFirmware+0x158>)
 8020eb8:	f107 030c 	add.w	r3, r7, #12
 8020ebc:	6812      	ldr	r2, [r2, #0]
 8020ebe:	4611      	mov	r1, r2
 8020ec0:	8019      	strh	r1, [r3, #0]
 8020ec2:	3302      	adds	r3, #2
 8020ec4:	0c12      	lsrs	r2, r2, #16
 8020ec6:	701a      	strb	r2, [r3, #0]
    long lWriteAddr, lStartAddr;
    int nPage, j;

    HAL_StatusTypeDef bRet;

    HDMI_WriteI2C_Byte( 0xFE, 0xE0);
 8020ec8:	21e0      	movs	r1, #224	; 0xe0
 8020eca:	20fe      	movs	r0, #254	; 0xfe
 8020ecc:	f7ff fef6 	bl	8020cbc <HDMI_WriteI2C_Byte>
    HDMI_WriteI2C_Byte( 0xEE, 0x01);
 8020ed0:	2101      	movs	r1, #1
 8020ed2:	20ee      	movs	r0, #238	; 0xee
 8020ed4:	f7ff fef2 	bl	8020cbc <HDMI_WriteI2C_Byte>


    // Firmware data starting address is 0x00
    lWriteAddr = 0;
 8020ed8:	2300      	movs	r3, #0
 8020eda:	613b      	str	r3, [r7, #16]
    lStartAddr = lWriteAddr;
 8020edc:	693b      	ldr	r3, [r7, #16]
 8020ede:	61fb      	str	r3, [r7, #28]

    //The are a total of Datalen bytes in the firmware , read up to 16 bytes at a time
    nPage = DataLen / 32;
 8020ee0:	683b      	ldr	r3, [r7, #0]
 8020ee2:	095b      	lsrs	r3, r3, #5
 8020ee4:	61bb      	str	r3, [r7, #24]
    if(0x0 != (DataLen % 32))
 8020ee6:	683b      	ldr	r3, [r7, #0]
 8020ee8:	f003 031f 	and.w	r3, r3, #31
 8020eec:	2b00      	cmp	r3, #0
 8020eee:	d002      	beq.n	8020ef6 <LT7911_WriteFirmware+0x4a>
    {
        ++nPage;
 8020ef0:	69bb      	ldr	r3, [r7, #24]
 8020ef2:	3301      	adds	r3, #1
 8020ef4:	61bb      	str	r3, [r7, #24]
    }
    addr[0] = (lStartAddr & 0xFF0000) >> 16;
 8020ef6:	69fb      	ldr	r3, [r7, #28]
 8020ef8:	141b      	asrs	r3, r3, #16
 8020efa:	b2db      	uxtb	r3, r3
 8020efc:	733b      	strb	r3, [r7, #12]
    addr[1] = (lStartAddr & 0xFF00) >> 8;
 8020efe:	69fb      	ldr	r3, [r7, #28]
 8020f00:	121b      	asrs	r3, r3, #8
 8020f02:	b2db      	uxtb	r3, r3
 8020f04:	737b      	strb	r3, [r7, #13]
    addr[2] = lStartAddr & 0xFF;
 8020f06:	69fb      	ldr	r3, [r7, #28]
 8020f08:	b2db      	uxtb	r3, r3
 8020f0a:	73bb      	strb	r3, [r7, #14]
    // write npage times 16 bytes
    for( j = 0; j < nPage; ++j)
 8020f0c:	2300      	movs	r3, #0
 8020f0e:	617b      	str	r3, [r7, #20]
 8020f10:	e065      	b.n	8020fde <LT7911_WriteFirmware+0x132>
    {
        //wren
          HDMI_WriteI2C_Byte( 0xFF, 0xE1);
 8020f12:	21e1      	movs	r1, #225	; 0xe1
 8020f14:	20ff      	movs	r0, #255	; 0xff
 8020f16:	f7ff fed1 	bl	8020cbc <HDMI_WriteI2C_Byte>
          HDMI_WriteI2C_Byte( 0x03, 0x2E);
 8020f1a:	212e      	movs	r1, #46	; 0x2e
 8020f1c:	2003      	movs	r0, #3
 8020f1e:	f7ff fecd 	bl	8020cbc <HDMI_WriteI2C_Byte>
          HDMI_WriteI2C_Byte( 0x03, 0xEE);
 8020f22:	21ee      	movs	r1, #238	; 0xee
 8020f24:	2003      	movs	r0, #3
 8020f26:	f7ff fec9 	bl	8020cbc <HDMI_WriteI2C_Byte>

          HDMI_WriteI2C_Byte( 0xFF, 0xE0);
 8020f2a:	21e0      	movs	r1, #224	; 0xe0
 8020f2c:	20ff      	movs	r0, #255	; 0xff
 8020f2e:	f7ff fec5 	bl	8020cbc <HDMI_WriteI2C_Byte>
          HDMI_WriteI2C_Byte( 0x5A, 0x04);
 8020f32:	2104      	movs	r1, #4
 8020f34:	205a      	movs	r0, #90	; 0x5a
 8020f36:	f7ff fec1 	bl	8020cbc <HDMI_WriteI2C_Byte>
          HDMI_WriteI2C_Byte( 0x5A, 0x00);
 8020f3a:	2100      	movs	r1, #0
 8020f3c:	205a      	movs	r0, #90	; 0x5a
 8020f3e:	f7ff febd 	bl	8020cbc <HDMI_WriteI2C_Byte>

          //i2c data to fifo
          HDMI_WriteI2C_Byte( 0x5E, 0xDF);
 8020f42:	21df      	movs	r1, #223	; 0xdf
 8020f44:	205e      	movs	r0, #94	; 0x5e
 8020f46:	f7ff feb9 	bl	8020cbc <HDMI_WriteI2C_Byte>
          HDMI_WriteI2C_Byte( 0x5A, 0x20);
 8020f4a:	2120      	movs	r1, #32
 8020f4c:	205a      	movs	r0, #90	; 0x5a
 8020f4e:	f7ff feb5 	bl	8020cbc <HDMI_WriteI2C_Byte>
          HDMI_WriteI2C_Byte( 0x5A, 0x00);
 8020f52:	2100      	movs	r1, #0
 8020f54:	205a      	movs	r0, #90	; 0x5a
 8020f56:	f7ff feb1 	bl	8020cbc <HDMI_WriteI2C_Byte>

          HDMI_WriteI2C_Byte( 0x58, 0x21);
 8020f5a:	2121      	movs	r1, #33	; 0x21
 8020f5c:	2058      	movs	r0, #88	; 0x58
 8020f5e:	f7ff fead 	bl	8020cbc <HDMI_WriteI2C_Byte>

        bRet = HDMI_WriteI2C_ByteN( 0x59, byWriteData + (j * 32), 32);
 8020f62:	697b      	ldr	r3, [r7, #20]
 8020f64:	015b      	lsls	r3, r3, #5
 8020f66:	461a      	mov	r2, r3
 8020f68:	687b      	ldr	r3, [r7, #4]
 8020f6a:	4413      	add	r3, r2
 8020f6c:	2220      	movs	r2, #32
 8020f6e:	4619      	mov	r1, r3
 8020f70:	2059      	movs	r0, #89	; 0x59
 8020f72:	f7ff fec1 	bl	8020cf8 <HDMI_WriteI2C_ByteN>
 8020f76:	4603      	mov	r3, r0
 8020f78:	73fb      	strb	r3, [r7, #15]
#if 1
        if(HAL_OK != bRet)
 8020f7a:	7bfb      	ldrb	r3, [r7, #15]
 8020f7c:	2b00      	cmp	r3, #0
 8020f7e:	d006      	beq.n	8020f8e <LT7911_WriteFirmware+0xe2>
        {
            /* Error */
            usb_printf( "%s: [%d] [%d]\n", __FUNCTION__, __LINE__, j);
 8020f80:	697b      	ldr	r3, [r7, #20]
 8020f82:	f240 12c5 	movw	r2, #453	; 0x1c5
 8020f86:	4920      	ldr	r1, [pc, #128]	; (8021008 <LT7911_WriteFirmware+0x15c>)
 8020f88:	4820      	ldr	r0, [pc, #128]	; (802100c <LT7911_WriteFirmware+0x160>)
 8020f8a:	f009 ff2d 	bl	802ade8 <usb_printf>
        }
#else
		(void)bRet;
#endif

        HDMI_WriteI2C_Byte( 0x5B, addr[0]);
 8020f8e:	7b3b      	ldrb	r3, [r7, #12]
 8020f90:	4619      	mov	r1, r3
 8020f92:	205b      	movs	r0, #91	; 0x5b
 8020f94:	f7ff fe92 	bl	8020cbc <HDMI_WriteI2C_Byte>
        HDMI_WriteI2C_Byte( 0x5C, addr[1]);
 8020f98:	7b7b      	ldrb	r3, [r7, #13]
 8020f9a:	4619      	mov	r1, r3
 8020f9c:	205c      	movs	r0, #92	; 0x5c
 8020f9e:	f7ff fe8d 	bl	8020cbc <HDMI_WriteI2C_Byte>
        HDMI_WriteI2C_Byte( 0x5D, addr[2]);
 8020fa2:	7bbb      	ldrb	r3, [r7, #14]
 8020fa4:	4619      	mov	r1, r3
 8020fa6:	205d      	movs	r0, #93	; 0x5d
 8020fa8:	f7ff fe88 	bl	8020cbc <HDMI_WriteI2C_Byte>
        HDMI_WriteI2C_Byte( 0x5A, 0x10);
 8020fac:	2110      	movs	r1, #16
 8020fae:	205a      	movs	r0, #90	; 0x5a
 8020fb0:	f7ff fe84 	bl	8020cbc <HDMI_WriteI2C_Byte>
        HDMI_WriteI2C_Byte( 0x5A, 0x00);
 8020fb4:	2100      	movs	r1, #0
 8020fb6:	205a      	movs	r0, #90	; 0x5a
 8020fb8:	f7ff fe80 	bl	8020cbc <HDMI_WriteI2C_Byte>

        lStartAddr += 32;
 8020fbc:	69fb      	ldr	r3, [r7, #28]
 8020fbe:	3320      	adds	r3, #32
 8020fc0:	61fb      	str	r3, [r7, #28]
        addr[0] = (lStartAddr & 0xFF0000) >> 16;
 8020fc2:	69fb      	ldr	r3, [r7, #28]
 8020fc4:	141b      	asrs	r3, r3, #16
 8020fc6:	b2db      	uxtb	r3, r3
 8020fc8:	733b      	strb	r3, [r7, #12]
        addr[1] = (lStartAddr & 0xFF00) >> 8;
 8020fca:	69fb      	ldr	r3, [r7, #28]
 8020fcc:	121b      	asrs	r3, r3, #8
 8020fce:	b2db      	uxtb	r3, r3
 8020fd0:	737b      	strb	r3, [r7, #13]
        addr[2] = lStartAddr & 0xFF;
 8020fd2:	69fb      	ldr	r3, [r7, #28]
 8020fd4:	b2db      	uxtb	r3, r3
 8020fd6:	73bb      	strb	r3, [r7, #14]
    for( j = 0; j < nPage; ++j)
 8020fd8:	697b      	ldr	r3, [r7, #20]
 8020fda:	3301      	adds	r3, #1
 8020fdc:	617b      	str	r3, [r7, #20]
 8020fde:	697a      	ldr	r2, [r7, #20]
 8020fe0:	69bb      	ldr	r3, [r7, #24]
 8020fe2:	429a      	cmp	r2, r3
 8020fe4:	db95      	blt.n	8020f12 <LT7911_WriteFirmware+0x66>
    }

    LT7911_WriteCRC();
 8020fe6:	f000 f8c9 	bl	802117c <LT7911_WriteCRC>
    //wrdi
    HDMI_WriteI2C_Byte( 0x5A, 0x08);
 8020fea:	2108      	movs	r1, #8
 8020fec:	205a      	movs	r0, #90	; 0x5a
 8020fee:	f7ff fe65 	bl	8020cbc <HDMI_WriteI2C_Byte>
    HDMI_WriteI2C_Byte( 0x5A, 0x00);
 8020ff2:	2100      	movs	r1, #0
 8020ff4:	205a      	movs	r0, #90	; 0x5a
 8020ff6:	f7ff fe61 	bl	8020cbc <HDMI_WriteI2C_Byte>
}
 8020ffa:	bf00      	nop
 8020ffc:	3720      	adds	r7, #32
 8020ffe:	46bd      	mov	sp, r7
 8021000:	bd80      	pop	{r7, pc}
 8021002:	bf00      	nop
 8021004:	0802c1e4 	.word	0x0802c1e4
 8021008:	080379c0 	.word	0x080379c0
 802100c:	0802c1ec 	.word	0x0802c1ec

08021010 <LT7911_ReadbackFirmware>:

void LT7911_ReadbackFirmware( uint8_t *byReadData, uint32_t WriteDataLen)
{
 8021010:	b580      	push	{r7, lr}
 8021012:	b090      	sub	sp, #64	; 0x40
 8021014:	af00      	add	r7, sp, #0
 8021016:	6078      	str	r0, [r7, #4]
 8021018:	6039      	str	r1, [r7, #0]
//    uint8_t bRead;
    uint8_t addr[3] = { 0, 0, 0 };
 802101a:	4a56      	ldr	r2, [pc, #344]	; (8021174 <LT7911_ReadbackFirmware+0x164>)
 802101c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8021020:	6812      	ldr	r2, [r2, #0]
 8021022:	4611      	mov	r1, r2
 8021024:	8019      	strh	r1, [r3, #0]
 8021026:	3302      	adds	r3, #2
 8021028:	0c12      	lsrs	r2, r2, #16
 802102a:	701a      	strb	r2, [r3, #0]
    int nPage, i;
    int nPageReadLen;

    HAL_StatusTypeDef bRet;

    LT7911_Config();
 802102c:	f7ff fec5 	bl	8020dba <LT7911_Config>
    lReadAddr = 0;
 8021030:	2300      	movs	r3, #0
 8021032:	63fb      	str	r3, [r7, #60]	; 0x3c

    addr[0] = (lReadAddr & 0xFF0000) >> 16;
 8021034:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8021036:	141b      	asrs	r3, r3, #16
 8021038:	b2db      	uxtb	r3, r3
 802103a:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    addr[1] = (lReadAddr & 0xFF00) >> 8;
 802103e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8021040:	121b      	asrs	r3, r3, #8
 8021042:	b2db      	uxtb	r3, r3
 8021044:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    addr[2] = lReadAddr & 0xFF;
 8021048:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 802104a:	b2db      	uxtb	r3, r3
 802104c:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

    //WriteDatalen is firmware length, read up to 32 bytes at a time
    nPage = WriteDataLen / 32;
 8021050:	683b      	ldr	r3, [r7, #0]
 8021052:	095b      	lsrs	r3, r3, #5
 8021054:	63bb      	str	r3, [r7, #56]	; 0x38
    if((WriteDataLen % 32) != 0)
 8021056:	683b      	ldr	r3, [r7, #0]
 8021058:	f003 031f 	and.w	r3, r3, #31
 802105c:	2b00      	cmp	r3, #0
 802105e:	d002      	beq.n	8021066 <LT7911_ReadbackFirmware+0x56>
    {
        ++nPage;
 8021060:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8021062:	3301      	adds	r3, #1
 8021064:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    for( i = 0; i < nPage; ++i)
 8021066:	2300      	movs	r3, #0
 8021068:	637b      	str	r3, [r7, #52]	; 0x34
 802106a:	e072      	b.n	8021152 <LT7911_ReadbackFirmware+0x142>
    {
        // flash to fifo1
        HDMI_WriteI2C_Byte( 0x5e, 0x5f);
 802106c:	215f      	movs	r1, #95	; 0x5f
 802106e:	205e      	movs	r0, #94	; 0x5e
 8021070:	f7ff fe24 	bl	8020cbc <HDMI_WriteI2C_Byte>
        HDMI_WriteI2C_Byte( 0x5a, 0x20);
 8021074:	2120      	movs	r1, #32
 8021076:	205a      	movs	r0, #90	; 0x5a
 8021078:	f7ff fe20 	bl	8020cbc <HDMI_WriteI2C_Byte>
        HDMI_WriteI2C_Byte( 0x5a, 0x00);
 802107c:	2100      	movs	r1, #0
 802107e:	205a      	movs	r0, #90	; 0x5a
 8021080:	f7ff fe1c 	bl	8020cbc <HDMI_WriteI2C_Byte>

        HDMI_WriteI2C_Byte( 0x5B, addr[0]);
 8021084:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8021088:	4619      	mov	r1, r3
 802108a:	205b      	movs	r0, #91	; 0x5b
 802108c:	f7ff fe16 	bl	8020cbc <HDMI_WriteI2C_Byte>
        HDMI_WriteI2C_Byte( 0x5C, addr[1]);
 8021090:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8021094:	4619      	mov	r1, r3
 8021096:	205c      	movs	r0, #92	; 0x5c
 8021098:	f7ff fe10 	bl	8020cbc <HDMI_WriteI2C_Byte>
        HDMI_WriteI2C_Byte( 0x5D, addr[2]);
 802109c:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80210a0:	4619      	mov	r1, r3
 80210a2:	205d      	movs	r0, #93	; 0x5d
 80210a4:	f7ff fe0a 	bl	8020cbc <HDMI_WriteI2C_Byte>

        // flash to fifo2
        HDMI_WriteI2C_Byte( 0x5A, 0x10);
 80210a8:	2110      	movs	r1, #16
 80210aa:	205a      	movs	r0, #90	; 0x5a
 80210ac:	f7ff fe06 	bl	8020cbc <HDMI_WriteI2C_Byte>
        HDMI_WriteI2C_Byte( 0x5A, 0x00);
 80210b0:	2100      	movs	r1, #0
 80210b2:	205a      	movs	r0, #90	; 0x5a
 80210b4:	f7ff fe02 	bl	8020cbc <HDMI_WriteI2C_Byte>

        HDMI_WriteI2C_Byte( 0x58, 0x21);
 80210b8:	2121      	movs	r1, #33	; 0x21
 80210ba:	2058      	movs	r0, #88	; 0x58
 80210bc:	f7ff fdfe 	bl	8020cbc <HDMI_WriteI2C_Byte>

        nPageReadLen = 32; //16
 80210c0:	2320      	movs	r3, #32
 80210c2:	633b      	str	r3, [r7, #48]	; 0x30
        if((WriteDataLen - (i * 32)) < 32)
 80210c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80210c6:	015b      	lsls	r3, r3, #5
 80210c8:	461a      	mov	r2, r3
 80210ca:	683b      	ldr	r3, [r7, #0]
 80210cc:	1a9b      	subs	r3, r3, r2
 80210ce:	2b1f      	cmp	r3, #31
 80210d0:	d805      	bhi.n	80210de <LT7911_ReadbackFirmware+0xce>
        {
            nPageReadLen = WriteDataLen - (i * 32);
 80210d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80210d4:	015b      	lsls	r3, r3, #5
 80210d6:	461a      	mov	r2, r3
 80210d8:	683b      	ldr	r3, [r7, #0]
 80210da:	1a9b      	subs	r3, r3, r2
 80210dc:	633b      	str	r3, [r7, #48]	; 0x30
        }

        memset( byPageReadData, 0, 32); //16*8=128
 80210de:	f107 030c 	add.w	r3, r7, #12
 80210e2:	2220      	movs	r2, #32
 80210e4:	2100      	movs	r1, #0
 80210e6:	4618      	mov	r0, r3
 80210e8:	f00a fc98 	bl	802ba1c <memset>

        bRet = HDMI_ReadI2C_ByteN( 0x5F, byPageReadData, nPageReadLen);
 80210ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80210ee:	b29a      	uxth	r2, r3
 80210f0:	f107 030c 	add.w	r3, r7, #12
 80210f4:	4619      	mov	r1, r3
 80210f6:	205f      	movs	r0, #95	; 0x5f
 80210f8:	f7ff fe1c 	bl	8020d34 <HDMI_ReadI2C_ByteN>
 80210fc:	4603      	mov	r3, r0
 80210fe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        if(HAL_OK == bRet)
 8021102:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8021106:	2b00      	cmp	r3, #0
 8021108:	d10b      	bne.n	8021122 <LT7911_ReadbackFirmware+0x112>
        {
            /* Move the data into user buffer. */
            memcpy( byReadData + (i * 32), byPageReadData, nPageReadLen);
 802110a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802110c:	015b      	lsls	r3, r3, #5
 802110e:	461a      	mov	r2, r3
 8021110:	687b      	ldr	r3, [r7, #4]
 8021112:	4413      	add	r3, r2
 8021114:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8021116:	f107 010c 	add.w	r1, r7, #12
 802111a:	4618      	mov	r0, r3
 802111c:	f00a fcc2 	bl	802baa4 <memcpy>
 8021120:	e002      	b.n	8021128 <LT7911_ReadbackFirmware+0x118>
//            usb_printf("byPageReadData: 0x%04X \r\n", byPageReadData);
        }
        else usb_printf("read page error");
 8021122:	4815      	ldr	r0, [pc, #84]	; (8021178 <LT7911_ReadbackFirmware+0x168>)
 8021124:	f009 fe60 	bl	802ade8 <usb_printf>

        // The read address is increased by 16 each time
        lReadAddr += nPageReadLen;
 8021128:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 802112a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802112c:	4413      	add	r3, r2
 802112e:	63fb      	str	r3, [r7, #60]	; 0x3c
        addr[0] = (lReadAddr & 0xFF0000) >> 16;
 8021130:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8021132:	141b      	asrs	r3, r3, #16
 8021134:	b2db      	uxtb	r3, r3
 8021136:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
        addr[1] = (lReadAddr & 0xFF00) >> 8;
 802113a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 802113c:	121b      	asrs	r3, r3, #8
 802113e:	b2db      	uxtb	r3, r3
 8021140:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
        addr[2] = lReadAddr & 0xFF;
 8021144:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8021146:	b2db      	uxtb	r3, r3
 8021148:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    for( i = 0; i < nPage; ++i)
 802114c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802114e:	3301      	adds	r3, #1
 8021150:	637b      	str	r3, [r7, #52]	; 0x34
 8021152:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8021154:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8021156:	429a      	cmp	r2, r3
 8021158:	db88      	blt.n	802106c <LT7911_ReadbackFirmware+0x5c>
    }
    //wrdi
    HDMI_WriteI2C_Byte( 0x5A, 0x08);
 802115a:	2108      	movs	r1, #8
 802115c:	205a      	movs	r0, #90	; 0x5a
 802115e:	f7ff fdad 	bl	8020cbc <HDMI_WriteI2C_Byte>
    HDMI_WriteI2C_Byte( 0x5A, 0x00);
 8021162:	2100      	movs	r1, #0
 8021164:	205a      	movs	r0, #90	; 0x5a
 8021166:	f7ff fda9 	bl	8020cbc <HDMI_WriteI2C_Byte>
}
 802116a:	bf00      	nop
 802116c:	3740      	adds	r7, #64	; 0x40
 802116e:	46bd      	mov	sp, r7
 8021170:	bd80      	pop	{r7, pc}
 8021172:	bf00      	nop
 8021174:	0802c1e4 	.word	0x0802c1e4
 8021178:	0802c1fc 	.word	0x0802c1fc

0802117c <LT7911_WriteCRC>:

void LT7911_WriteCRC( void)
{
 802117c:	b580      	push	{r7, lr}
 802117e:	b084      	sub	sp, #16
 8021180:	af00      	add	r7, sp, #0
//    uint8_t bRead;
    uint8_t addr[3] = { 0, 0, 0 };
 8021182:	4a30      	ldr	r2, [pc, #192]	; (8021244 <LT7911_WriteCRC+0xc8>)
 8021184:	1d3b      	adds	r3, r7, #4
 8021186:	6812      	ldr	r2, [r2, #0]
 8021188:	4611      	mov	r1, r2
 802118a:	8019      	strh	r1, [r3, #0]
 802118c:	3302      	adds	r3, #2
 802118e:	0c12      	lsrs	r2, r2, #16
 8021190:	701a      	strb	r2, [r3, #0]
    long lWriteAddr, lStartAddr;
    // HDMI_WriteI2C_Byte( 0xFE, 0xE0);
    // HDMI_WriteI2C_Byte( 0xEE, 0x01);

    //wren
    HDMI_WriteI2C_Byte( 0xFF, 0xE1);
 8021192:	21e1      	movs	r1, #225	; 0xe1
 8021194:	20ff      	movs	r0, #255	; 0xff
 8021196:	f7ff fd91 	bl	8020cbc <HDMI_WriteI2C_Byte>
    HDMI_WriteI2C_Byte( 0x03, 0x2E);
 802119a:	212e      	movs	r1, #46	; 0x2e
 802119c:	2003      	movs	r0, #3
 802119e:	f7ff fd8d 	bl	8020cbc <HDMI_WriteI2C_Byte>
    HDMI_WriteI2C_Byte( 0x03, 0xEE);
 80211a2:	21ee      	movs	r1, #238	; 0xee
 80211a4:	2003      	movs	r0, #3
 80211a6:	f7ff fd89 	bl	8020cbc <HDMI_WriteI2C_Byte>

    HDMI_WriteI2C_Byte( 0xFF, 0xE0);
 80211aa:	21e0      	movs	r1, #224	; 0xe0
 80211ac:	20ff      	movs	r0, #255	; 0xff
 80211ae:	f7ff fd85 	bl	8020cbc <HDMI_WriteI2C_Byte>
    HDMI_WriteI2C_Byte( 0x5A, 0x04);
 80211b2:	2104      	movs	r1, #4
 80211b4:	205a      	movs	r0, #90	; 0x5a
 80211b6:	f7ff fd81 	bl	8020cbc <HDMI_WriteI2C_Byte>
    HDMI_WriteI2C_Byte( 0x5A, 0x00);
 80211ba:	2100      	movs	r1, #0
 80211bc:	205a      	movs	r0, #90	; 0x5a
 80211be:	f7ff fd7d 	bl	8020cbc <HDMI_WriteI2C_Byte>

    //i2c data to fifo
    HDMI_WriteI2C_Byte( 0x5E, 0xDF);
 80211c2:	21df      	movs	r1, #223	; 0xdf
 80211c4:	205e      	movs	r0, #94	; 0x5e
 80211c6:	f7ff fd79 	bl	8020cbc <HDMI_WriteI2C_Byte>
    HDMI_WriteI2C_Byte( 0x5A, 0x20);
 80211ca:	2120      	movs	r1, #32
 80211cc:	205a      	movs	r0, #90	; 0x5a
 80211ce:	f7ff fd75 	bl	8020cbc <HDMI_WriteI2C_Byte>
    HDMI_WriteI2C_Byte( 0x5A, 0x00);
 80211d2:	2100      	movs	r1, #0
 80211d4:	205a      	movs	r0, #90	; 0x5a
 80211d6:	f7ff fd71 	bl	8020cbc <HDMI_WriteI2C_Byte>

    HDMI_WriteI2C_Byte( 0x58, 0x21);
 80211da:	2121      	movs	r1, #33	; 0x21
 80211dc:	2058      	movs	r0, #88	; 0x58
 80211de:	f7ff fd6d 	bl	8020cbc <HDMI_WriteI2C_Byte>


    //write crc data
    lWriteAddr = 65535;
 80211e2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80211e6:	60fb      	str	r3, [r7, #12]
    lStartAddr = lWriteAddr;
 80211e8:	68fb      	ldr	r3, [r7, #12]
 80211ea:	60bb      	str	r3, [r7, #8]

    HDMI_WriteI2C_Byte( 0x59, FW_CRC);
 80211ec:	4b16      	ldr	r3, [pc, #88]	; (8021248 <LT7911_WriteCRC+0xcc>)
 80211ee:	781b      	ldrb	r3, [r3, #0]
 80211f0:	4619      	mov	r1, r3
 80211f2:	2059      	movs	r0, #89	; 0x59
 80211f4:	f7ff fd62 	bl	8020cbc <HDMI_WriteI2C_Byte>

    addr[0] = (lStartAddr & 0xFF0000) >> 16;
 80211f8:	68bb      	ldr	r3, [r7, #8]
 80211fa:	141b      	asrs	r3, r3, #16
 80211fc:	b2db      	uxtb	r3, r3
 80211fe:	713b      	strb	r3, [r7, #4]
    addr[1] = (lStartAddr & 0xFF00) >> 8;
 8021200:	68bb      	ldr	r3, [r7, #8]
 8021202:	121b      	asrs	r3, r3, #8
 8021204:	b2db      	uxtb	r3, r3
 8021206:	717b      	strb	r3, [r7, #5]
    addr[2] = lStartAddr & 0xFF;
 8021208:	68bb      	ldr	r3, [r7, #8]
 802120a:	b2db      	uxtb	r3, r3
 802120c:	71bb      	strb	r3, [r7, #6]

        HDMI_WriteI2C_Byte( 0x5B, addr[0]);
 802120e:	793b      	ldrb	r3, [r7, #4]
 8021210:	4619      	mov	r1, r3
 8021212:	205b      	movs	r0, #91	; 0x5b
 8021214:	f7ff fd52 	bl	8020cbc <HDMI_WriteI2C_Byte>
        HDMI_WriteI2C_Byte( 0x5C, addr[1]);
 8021218:	797b      	ldrb	r3, [r7, #5]
 802121a:	4619      	mov	r1, r3
 802121c:	205c      	movs	r0, #92	; 0x5c
 802121e:	f7ff fd4d 	bl	8020cbc <HDMI_WriteI2C_Byte>
        HDMI_WriteI2C_Byte( 0x5D, addr[2]);
 8021222:	79bb      	ldrb	r3, [r7, #6]
 8021224:	4619      	mov	r1, r3
 8021226:	205d      	movs	r0, #93	; 0x5d
 8021228:	f7ff fd48 	bl	8020cbc <HDMI_WriteI2C_Byte>
        HDMI_WriteI2C_Byte( 0x5A, 0x10);
 802122c:	2110      	movs	r1, #16
 802122e:	205a      	movs	r0, #90	; 0x5a
 8021230:	f7ff fd44 	bl	8020cbc <HDMI_WriteI2C_Byte>
        HDMI_WriteI2C_Byte( 0x5A, 0x00);
 8021234:	2100      	movs	r1, #0
 8021236:	205a      	movs	r0, #90	; 0x5a
 8021238:	f7ff fd40 	bl	8020cbc <HDMI_WriteI2C_Byte>
}
 802123c:	bf00      	nop
 802123e:	3710      	adds	r7, #16
 8021240:	46bd      	mov	sp, r7
 8021242:	bd80      	pop	{r7, pc}
 8021244:	0802c1e4 	.word	0x0802c1e4
 8021248:	2000b947 	.word	0x2000b947

0802124c <lt7911_firmware_update_init>:
    usb_printf("ReadbackAllFlash Done \r\n");
}


void lt7911_firmware_update_init( void)
{
 802124c:	b580      	push	{r7, lr}
 802124e:	b082      	sub	sp, #8
 8021250:	af00      	add	r7, sp, #0



    do
    {
        HAL_Delay(1000);
 8021252:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8021256:	f000 fe5f 	bl	8021f18 <HAL_Delay>

        lt7911uxc_version(run_version);
 802125a:	463b      	mov	r3, r7
 802125c:	4618      	mov	r0, r3
 802125e:	f000 f989 	bl	8021574 <lt7911uxc_version>
        HAL_Delay(10);
 8021262:	200a      	movs	r0, #10
 8021264:	f000 fe58 	bl	8021f18 <HAL_Delay>
        uint16_t chipId = LT7911_ReadChipId();
 8021268:	f7ff fd80 	bl	8020d6c <LT7911_ReadChipId>
 802126c:	4603      	mov	r3, r0
 802126e:	80fb      	strh	r3, [r7, #6]
        FW_CRC = lt7911uxc_get_crc(LT7911_FW, LT7911_DEMO_FW_LENGTH);
 8021270:	f24b 615f 	movw	r1, #46687	; 0xb65f
 8021274:	4831      	ldr	r0, [pc, #196]	; (802133c <lt7911_firmware_update_init+0xf0>)
 8021276:	f000 f93f 	bl	80214f8 <lt7911uxc_get_crc>
 802127a:	4603      	mov	r3, r0
 802127c:	b2da      	uxtb	r2, r3
 802127e:	4b30      	ldr	r3, [pc, #192]	; (8021340 <lt7911_firmware_update_init+0xf4>)
 8021280:	701a      	strb	r2, [r3, #0]
        usb_printf( "FW_CRC:[%02X]\r\n", FW_CRC);
 8021282:	4b2f      	ldr	r3, [pc, #188]	; (8021340 <lt7911_firmware_update_init+0xf4>)
 8021284:	781b      	ldrb	r3, [r3, #0]
 8021286:	4619      	mov	r1, r3
 8021288:	482e      	ldr	r0, [pc, #184]	; (8021344 <lt7911_firmware_update_init+0xf8>)
 802128a:	f009 fdad 	bl	802ade8 <usb_printf>
        // Step1 : Read chip ID to check I2C connection
        if(LT7911_CHIP_ID != chipId)
 802128e:	88fb      	ldrh	r3, [r7, #6]
 8021290:	f641 1201 	movw	r2, #6401	; 0x1901
 8021294:	4293      	cmp	r3, r2
 8021296:	d005      	beq.n	80212a4 <lt7911_firmware_update_init+0x58>
        {
            /* Chip id mismatched, skip the update init procedure. */
            usb_printf( "Err chip id:[%04X]\r\n", chipId);
 8021298:	88fb      	ldrh	r3, [r7, #6]
 802129a:	4619      	mov	r1, r3
 802129c:	482a      	ldr	r0, [pc, #168]	; (8021348 <lt7911_firmware_update_init+0xfc>)
 802129e:	f009 fda3 	bl	802ade8 <usb_printf>
            break;
 80212a2:	e047      	b.n	8021334 <lt7911_firmware_update_init+0xe8>
        }
        usb_printf( "Rd chip id:[%04X]\r\n", chipId);
 80212a4:	88fb      	ldrh	r3, [r7, #6]
 80212a6:	4619      	mov	r1, r3
 80212a8:	4828      	ldr	r0, [pc, #160]	; (802134c <lt7911_firmware_update_init+0x100>)
 80212aa:	f009 fd9d 	bl	802ade8 <usb_printf>

        // Step2 : Initial Settings
        LT7911_Config();
 80212ae:	f7ff fd84 	bl	8020dba <LT7911_Config>
        //     break;
        // }

//         Step4 Block Erase, we have no way back after this.
#if Flash_flag
        LT7911_BlockErase();
 80212b2:	f7ff fda6 	bl	8020e02 <LT7911_BlockErase>
//         Step5 : Write the firmware data into flash
//         Note the buffer length MUST be multiple of 32, and the empty buffer
//         MUST be 0xFF


        memset( compare_bin, 0xFF, LT7911_DEMO_FW_LENGTH+32);
 80212b6:	f24b 627f 	movw	r2, #46719	; 0xb67f
 80212ba:	21ff      	movs	r1, #255	; 0xff
 80212bc:	4824      	ldr	r0, [pc, #144]	; (8021350 <lt7911_firmware_update_init+0x104>)
 80212be:	f00a fbad 	bl	802ba1c <memset>
        usb_printf( "Flash Bridge FW \r\n");
 80212c2:	4824      	ldr	r0, [pc, #144]	; (8021354 <lt7911_firmware_update_init+0x108>)
 80212c4:	f009 fd90 	bl	802ade8 <usb_printf>
        memcpy( compare_bin, LT7911_FW,
 80212c8:	4a21      	ldr	r2, [pc, #132]	; (8021350 <lt7911_firmware_update_init+0x104>)
 80212ca:	4b1c      	ldr	r3, [pc, #112]	; (802133c <lt7911_firmware_update_init+0xf0>)
 80212cc:	4610      	mov	r0, r2
 80212ce:	4619      	mov	r1, r3
 80212d0:	f24b 635f 	movw	r3, #46687	; 0xb65f
 80212d4:	461a      	mov	r2, r3
 80212d6:	f00a fbe5 	bl	802baa4 <memcpy>
        LT7911_DEMO_FW_LENGTH);
        LT7911_WriteFirmware( (uint8_t*)compare_bin, LT7911_DEMO_FW_LENGTH);
 80212da:	f24b 615f 	movw	r1, #46687	; 0xb65f
 80212de:	481c      	ldr	r0, [pc, #112]	; (8021350 <lt7911_firmware_update_init+0x104>)
 80212e0:	f7ff fde4 	bl	8020eac <LT7911_WriteFirmware>

        // Step6 : Read the data in the flash and compare it with original data
        usb_printf( "Read Bridge FW \r\n");
 80212e4:	481c      	ldr	r0, [pc, #112]	; (8021358 <lt7911_firmware_update_init+0x10c>)
 80212e6:	f009 fd7f 	bl	802ade8 <usb_printf>

        memset( compare_bin, 0x00, LT7911_DEMO_FW_LENGTH);
 80212ea:	f24b 625f 	movw	r2, #46687	; 0xb65f
 80212ee:	2100      	movs	r1, #0
 80212f0:	4817      	ldr	r0, [pc, #92]	; (8021350 <lt7911_firmware_update_init+0x104>)
 80212f2:	f00a fb93 	bl	802ba1c <memset>
        LT7911_ReadbackFirmware( compare_bin, LT7911_DEMO_FW_LENGTH);
 80212f6:	f24b 615f 	movw	r1, #46687	; 0xb65f
 80212fa:	4815      	ldr	r0, [pc, #84]	; (8021350 <lt7911_firmware_update_init+0x104>)
 80212fc:	f7ff fe88 	bl	8021010 <LT7911_ReadbackFirmware>

        if(memcmp( compare_bin, LT7911_FW,
 8021300:	f24b 625f 	movw	r2, #46687	; 0xb65f
 8021304:	490d      	ldr	r1, [pc, #52]	; (802133c <lt7911_firmware_update_init+0xf0>)
 8021306:	4812      	ldr	r0, [pc, #72]	; (8021350 <lt7911_firmware_update_init+0x104>)
 8021308:	f00a fb78 	bl	802b9fc <memcmp>
 802130c:	4603      	mov	r3, r0
 802130e:	2b00      	cmp	r3, #0
 8021310:	d006      	beq.n	8021320 <lt7911_firmware_update_init+0xd4>
        LT7911_DEMO_FW_LENGTH))
        {
            /* FLASH content is inconsistent. */
            usb_printf( "err FW W then R!!!\n");
 8021312:	4812      	ldr	r0, [pc, #72]	; (802135c <lt7911_firmware_update_init+0x110>)
 8021314:	f009 fd68 	bl	802ade8 <usb_printf>
            HAL_Delay(100);
 8021318:	2064      	movs	r0, #100	; 0x64
 802131a:	f000 fdfd 	bl	8021f18 <HAL_Delay>
 802131e:	e005      	b.n	802132c <lt7911_firmware_update_init+0xe0>
        }
        else
        {
            /* FLASH content is consistent. */
            usb_printf( "FW W then R success.\n");
 8021320:	480f      	ldr	r0, [pc, #60]	; (8021360 <lt7911_firmware_update_init+0x114>)
 8021322:	f009 fd61 	bl	802ade8 <usb_printf>
            HAL_Delay(100);
 8021326:	2064      	movs	r0, #100	; 0x64
 8021328:	f000 fdf6 	bl	8021f18 <HAL_Delay>
        }
        usb_printf( "LT7911 update finished\n");
 802132c:	480d      	ldr	r0, [pc, #52]	; (8021364 <lt7911_firmware_update_init+0x118>)
 802132e:	f009 fd5b 	bl	802ade8 <usb_printf>
        memset( compare_bin, 0x00, 65536);
        LT7911_ReadbackAllFlash(compare_bin);
#endif

    } while(0);
}
 8021332:	bf00      	nop
 8021334:	bf00      	nop
 8021336:	3708      	adds	r7, #8
 8021338:	46bd      	mov	sp, r7
 802133a:	bd80      	pop	{r7, pc}
 802133c:	0802c360 	.word	0x0802c360
 8021340:	2000b947 	.word	0x2000b947
 8021344:	0802c25c 	.word	0x0802c25c
 8021348:	0802c26c 	.word	0x0802c26c
 802134c:	0802c284 	.word	0x0802c284
 8021350:	200002c8 	.word	0x200002c8
 8021354:	0802c298 	.word	0x0802c298
 8021358:	0802c2ac 	.word	0x0802c2ac
 802135c:	0802c2c0 	.word	0x0802c2c0
 8021360:	0802c2d4 	.word	0x0802c2d4
 8021364:	0802c2ec 	.word	0x0802c2ec

08021368 <BitsReverse>:
 * @return  out data
 * @note
 *******************************************************************************
 */
unsigned int BitsReverse(uint32_t inVal, uint8_t bits)
{
 8021368:	b480      	push	{r7}
 802136a:	b085      	sub	sp, #20
 802136c:	af00      	add	r7, sp, #0
 802136e:	6078      	str	r0, [r7, #4]
 8021370:	460b      	mov	r3, r1
 8021372:	70fb      	strb	r3, [r7, #3]
    uint32_t outVal = 0;
 8021374:	2300      	movs	r3, #0
 8021376:	60fb      	str	r3, [r7, #12]
    uint8_t i;

    for(i=0; i<bits; i++)
 8021378:	2300      	movs	r3, #0
 802137a:	72fb      	strb	r3, [r7, #11]
 802137c:	e016      	b.n	80213ac <BitsReverse+0x44>
    {
        if(inVal & (1 << i)) outVal |= 1 << (bits - 1 - i);
 802137e:	7afb      	ldrb	r3, [r7, #11]
 8021380:	2201      	movs	r2, #1
 8021382:	fa02 f303 	lsl.w	r3, r2, r3
 8021386:	461a      	mov	r2, r3
 8021388:	687b      	ldr	r3, [r7, #4]
 802138a:	4013      	ands	r3, r2
 802138c:	2b00      	cmp	r3, #0
 802138e:	d00a      	beq.n	80213a6 <BitsReverse+0x3e>
 8021390:	78fb      	ldrb	r3, [r7, #3]
 8021392:	1e5a      	subs	r2, r3, #1
 8021394:	7afb      	ldrb	r3, [r7, #11]
 8021396:	1ad3      	subs	r3, r2, r3
 8021398:	2201      	movs	r2, #1
 802139a:	fa02 f303 	lsl.w	r3, r2, r3
 802139e:	461a      	mov	r2, r3
 80213a0:	68fb      	ldr	r3, [r7, #12]
 80213a2:	4313      	orrs	r3, r2
 80213a4:	60fb      	str	r3, [r7, #12]
    for(i=0; i<bits; i++)
 80213a6:	7afb      	ldrb	r3, [r7, #11]
 80213a8:	3301      	adds	r3, #1
 80213aa:	72fb      	strb	r3, [r7, #11]
 80213ac:	7afa      	ldrb	r2, [r7, #11]
 80213ae:	78fb      	ldrb	r3, [r7, #3]
 80213b0:	429a      	cmp	r2, r3
 80213b2:	d3e4      	bcc.n	802137e <BitsReverse+0x16>
    }

    return outVal;
 80213b4:	68fb      	ldr	r3, [r7, #12]
}
 80213b6:	4618      	mov	r0, r3
 80213b8:	3714      	adds	r7, #20
 80213ba:	46bd      	mov	sp, r7
 80213bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80213c0:	4770      	bx	lr

080213c2 <GetCRC>:
 * @return  crc value
 * @note
 *******************************************************************************
 */
unsigned int GetCRC(CrcInfoTypeS type, uint8_t *buf, uint32_t bufLen)
{
 80213c2:	b084      	sub	sp, #16
 80213c4:	b580      	push	{r7, lr}
 80213c6:	b088      	sub	sp, #32
 80213c8:	af00      	add	r7, sp, #0
 80213ca:	f107 0c28 	add.w	ip, r7, #40	; 0x28
 80213ce:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    uint8_t width  = type.Width;
 80213d2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80213d6:	75bb      	strb	r3, [r7, #22]
    uint32_t  poly   = type.Poly;
 80213d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80213da:	613b      	str	r3, [r7, #16]
    uint32_t  crc    = type.CrcInit;
 80213dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80213de:	61fb      	str	r3, [r7, #28]
    uint32_t  xorout = type.XorOut;
 80213e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80213e2:	60fb      	str	r3, [r7, #12]
    bool refin  = type.RefIn;
 80213e4:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 80213e8:	72fb      	strb	r3, [r7, #11]
    bool refout = type.RefOut;
 80213ea:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 80213ee:	72bb      	strb	r3, [r7, #10]
    uint8_t n;
    uint32_t  bits;
    uint32_t  data;
    uint8_t i;

    n    =  (width < 8) ? 0 : (width-8);
 80213f0:	7dbb      	ldrb	r3, [r7, #22]
 80213f2:	2b08      	cmp	r3, #8
 80213f4:	bf38      	it	cc
 80213f6:	2308      	movcc	r3, #8
 80213f8:	b2db      	uxtb	r3, r3
 80213fa:	3b08      	subs	r3, #8
 80213fc:	727b      	strb	r3, [r7, #9]
    crc  =  (width < 8) ? (crc<<(8-width)) : crc;
 80213fe:	7dbb      	ldrb	r3, [r7, #22]
 8021400:	2b07      	cmp	r3, #7
 8021402:	d806      	bhi.n	8021412 <GetCRC+0x50>
 8021404:	7dbb      	ldrb	r3, [r7, #22]
 8021406:	f1c3 0308 	rsb	r3, r3, #8
 802140a:	69fa      	ldr	r2, [r7, #28]
 802140c:	fa02 f303 	lsl.w	r3, r2, r3
 8021410:	e000      	b.n	8021414 <GetCRC+0x52>
 8021412:	69fb      	ldr	r3, [r7, #28]
 8021414:	61fb      	str	r3, [r7, #28]
    bits =  (width < 8) ? 0x80 : (1 << (width-1));
 8021416:	7dbb      	ldrb	r3, [r7, #22]
 8021418:	2b07      	cmp	r3, #7
 802141a:	d905      	bls.n	8021428 <GetCRC+0x66>
 802141c:	7dbb      	ldrb	r3, [r7, #22]
 802141e:	3b01      	subs	r3, #1
 8021420:	2201      	movs	r2, #1
 8021422:	fa02 f303 	lsl.w	r3, r2, r3
 8021426:	e000      	b.n	802142a <GetCRC+0x68>
 8021428:	2380      	movs	r3, #128	; 0x80
 802142a:	607b      	str	r3, [r7, #4]
    poly =  (width < 8) ? (poly<<(8-width)) : poly;
 802142c:	7dbb      	ldrb	r3, [r7, #22]
 802142e:	2b07      	cmp	r3, #7
 8021430:	d806      	bhi.n	8021440 <GetCRC+0x7e>
 8021432:	7dbb      	ldrb	r3, [r7, #22]
 8021434:	f1c3 0308 	rsb	r3, r3, #8
 8021438:	693a      	ldr	r2, [r7, #16]
 802143a:	fa02 f303 	lsl.w	r3, r2, r3
 802143e:	e000      	b.n	8021442 <GetCRC+0x80>
 8021440:	693b      	ldr	r3, [r7, #16]
 8021442:	613b      	str	r3, [r7, #16]
    while(bufLen--)
 8021444:	e02a      	b.n	802149c <GetCRC+0xda>
    {
        data = *(buf++);
 8021446:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8021448:	1c5a      	adds	r2, r3, #1
 802144a:	63fa      	str	r2, [r7, #60]	; 0x3c
 802144c:	781b      	ldrb	r3, [r3, #0]
 802144e:	61bb      	str	r3, [r7, #24]
        if(refin == true)
 8021450:	7afb      	ldrb	r3, [r7, #11]
 8021452:	2b00      	cmp	r3, #0
 8021454:	d004      	beq.n	8021460 <GetCRC+0x9e>
            data = BitsReverse(data, 8);
 8021456:	2108      	movs	r1, #8
 8021458:	69b8      	ldr	r0, [r7, #24]
 802145a:	f7ff ff85 	bl	8021368 <BitsReverse>
 802145e:	61b8      	str	r0, [r7, #24]
        crc ^= (data << n);
 8021460:	7a7b      	ldrb	r3, [r7, #9]
 8021462:	69ba      	ldr	r2, [r7, #24]
 8021464:	fa02 f303 	lsl.w	r3, r2, r3
 8021468:	69fa      	ldr	r2, [r7, #28]
 802146a:	4053      	eors	r3, r2
 802146c:	61fb      	str	r3, [r7, #28]
        for(i=0; i<8; i++)
 802146e:	2300      	movs	r3, #0
 8021470:	75fb      	strb	r3, [r7, #23]
 8021472:	e010      	b.n	8021496 <GetCRC+0xd4>
        {
            if(crc & bits)
 8021474:	69fa      	ldr	r2, [r7, #28]
 8021476:	687b      	ldr	r3, [r7, #4]
 8021478:	4013      	ands	r3, r2
 802147a:	2b00      	cmp	r3, #0
 802147c:	d005      	beq.n	802148a <GetCRC+0xc8>
            {
                crc = (crc << 1) ^ poly;
 802147e:	69fb      	ldr	r3, [r7, #28]
 8021480:	005b      	lsls	r3, r3, #1
 8021482:	693a      	ldr	r2, [r7, #16]
 8021484:	4053      	eors	r3, r2
 8021486:	61fb      	str	r3, [r7, #28]
 8021488:	e002      	b.n	8021490 <GetCRC+0xce>
            }
            else
            {
                crc = crc << 1;
 802148a:	69fb      	ldr	r3, [r7, #28]
 802148c:	005b      	lsls	r3, r3, #1
 802148e:	61fb      	str	r3, [r7, #28]
        for(i=0; i<8; i++)
 8021490:	7dfb      	ldrb	r3, [r7, #23]
 8021492:	3301      	adds	r3, #1
 8021494:	75fb      	strb	r3, [r7, #23]
 8021496:	7dfb      	ldrb	r3, [r7, #23]
 8021498:	2b07      	cmp	r3, #7
 802149a:	d9eb      	bls.n	8021474 <GetCRC+0xb2>
    while(bufLen--)
 802149c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 802149e:	1e5a      	subs	r2, r3, #1
 80214a0:	643a      	str	r2, [r7, #64]	; 0x40
 80214a2:	2b00      	cmp	r3, #0
 80214a4:	d1cf      	bne.n	8021446 <GetCRC+0x84>
            }
        }
    }
    crc = (width<8) ? (crc>>(8-width)) : crc;
 80214a6:	7dbb      	ldrb	r3, [r7, #22]
 80214a8:	2b07      	cmp	r3, #7
 80214aa:	d806      	bhi.n	80214ba <GetCRC+0xf8>
 80214ac:	7dbb      	ldrb	r3, [r7, #22]
 80214ae:	f1c3 0308 	rsb	r3, r3, #8
 80214b2:	69fa      	ldr	r2, [r7, #28]
 80214b4:	fa22 f303 	lsr.w	r3, r2, r3
 80214b8:	e000      	b.n	80214bc <GetCRC+0xfa>
 80214ba:	69fb      	ldr	r3, [r7, #28]
 80214bc:	61fb      	str	r3, [r7, #28]
    if(refout == true)
 80214be:	7abb      	ldrb	r3, [r7, #10]
 80214c0:	2b00      	cmp	r3, #0
 80214c2:	d005      	beq.n	80214d0 <GetCRC+0x10e>
        crc = BitsReverse(crc, width);
 80214c4:	7dbb      	ldrb	r3, [r7, #22]
 80214c6:	4619      	mov	r1, r3
 80214c8:	69f8      	ldr	r0, [r7, #28]
 80214ca:	f7ff ff4d 	bl	8021368 <BitsReverse>
 80214ce:	61f8      	str	r0, [r7, #28]
    crc ^= xorout;
 80214d0:	69fa      	ldr	r2, [r7, #28]
 80214d2:	68fb      	ldr	r3, [r7, #12]
 80214d4:	4053      	eors	r3, r2
 80214d6:	61fb      	str	r3, [r7, #28]

    return (crc & ((2<<(width-1)) - 1));
 80214d8:	7dbb      	ldrb	r3, [r7, #22]
 80214da:	3b01      	subs	r3, #1
 80214dc:	2202      	movs	r2, #2
 80214de:	fa02 f303 	lsl.w	r3, r2, r3
 80214e2:	3b01      	subs	r3, #1
 80214e4:	461a      	mov	r2, r3
 80214e6:	69fb      	ldr	r3, [r7, #28]
 80214e8:	4013      	ands	r3, r2
}
 80214ea:	4618      	mov	r0, r3
 80214ec:	3720      	adds	r7, #32
 80214ee:	46bd      	mov	sp, r7
 80214f0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80214f4:	b004      	add	sp, #16
 80214f6:	4770      	bx	lr

080214f8 <lt7911uxc_get_crc>:

static uint32_t lt7911uxc_get_crc(uint8_t *upgradeData, uint32_t len)
{
 80214f8:	b5b0      	push	{r4, r5, r7, lr}
 80214fa:	b08e      	sub	sp, #56	; 0x38
 80214fc:	af04      	add	r7, sp, #16
 80214fe:	6078      	str	r0, [r7, #4]
 8021500:	6039      	str	r1, [r7, #0]
#define LT7911UXC_FW_AREA_SIZE              (64 * 1024)
    CrcInfoTypeS type =
 8021502:	4b1b      	ldr	r3, [pc, #108]	; (8021570 <lt7911uxc_get_crc+0x78>)
 8021504:	f107 0410 	add.w	r4, r7, #16
 8021508:	461d      	mov	r5, r3
 802150a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 802150c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 802150e:	682b      	ldr	r3, [r5, #0]
 8021510:	6023      	str	r3, [r4, #0]
        .CrcInit = 0,
        .XorOut = 0,
        .RefOut = false,
        .RefIn = false,
    };
    uint32_t crc_size = LT7911UXC_FW_AREA_SIZE - 1;
 8021512:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8021516:	627b      	str	r3, [r7, #36]	; 0x24
    uint8_t default_val = 0xFF;
 8021518:	23ff      	movs	r3, #255	; 0xff
 802151a:	73fb      	strb	r3, [r7, #15]

    type.CrcInit = GetCRC(type, upgradeData, len);
 802151c:	683b      	ldr	r3, [r7, #0]
 802151e:	9302      	str	r3, [sp, #8]
 8021520:	687b      	ldr	r3, [r7, #4]
 8021522:	9301      	str	r3, [sp, #4]
 8021524:	6a3b      	ldr	r3, [r7, #32]
 8021526:	9300      	str	r3, [sp, #0]
 8021528:	f107 0310 	add.w	r3, r7, #16
 802152c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 802152e:	f7ff ff48 	bl	80213c2 <GetCRC>
 8021532:	4603      	mov	r3, r0
 8021534:	61bb      	str	r3, [r7, #24]

    crc_size -= len;
 8021536:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8021538:	683b      	ldr	r3, [r7, #0]
 802153a:	1ad3      	subs	r3, r2, r3
 802153c:	627b      	str	r3, [r7, #36]	; 0x24
    while(crc_size--)
 802153e:	e00d      	b.n	802155c <lt7911uxc_get_crc+0x64>
    {
        type.CrcInit = GetCRC(type, &default_val, 1);
 8021540:	2301      	movs	r3, #1
 8021542:	9302      	str	r3, [sp, #8]
 8021544:	f107 030f 	add.w	r3, r7, #15
 8021548:	9301      	str	r3, [sp, #4]
 802154a:	6a3b      	ldr	r3, [r7, #32]
 802154c:	9300      	str	r3, [sp, #0]
 802154e:	f107 0310 	add.w	r3, r7, #16
 8021552:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8021554:	f7ff ff35 	bl	80213c2 <GetCRC>
 8021558:	4603      	mov	r3, r0
 802155a:	61bb      	str	r3, [r7, #24]
    while(crc_size--)
 802155c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802155e:	1e5a      	subs	r2, r3, #1
 8021560:	627a      	str	r2, [r7, #36]	; 0x24
 8021562:	2b00      	cmp	r3, #0
 8021564:	d1ec      	bne.n	8021540 <lt7911uxc_get_crc+0x48>
    }
    return type.CrcInit;
 8021566:	69bb      	ldr	r3, [r7, #24]
}
 8021568:	4618      	mov	r0, r3
 802156a:	3728      	adds	r7, #40	; 0x28
 802156c:	46bd      	mov	sp, r7
 802156e:	bdb0      	pop	{r4, r5, r7, pc}
 8021570:	0802c304 	.word	0x0802c304

08021574 <lt7911uxc_version>:
void lt7911uxc_version(uint8_t *run_version)
{
 8021574:	b580      	push	{r7, lr}
 8021576:	b082      	sub	sp, #8
 8021578:	af00      	add	r7, sp, #0
 802157a:	6078      	str	r0, [r7, #4]

    HDMI_WriteI2C_Byte( 0xFF, 0xE0); //0xE0
 802157c:	21e0      	movs	r1, #224	; 0xe0
 802157e:	20ff      	movs	r0, #255	; 0xff
 8021580:	f7ff fb9c 	bl	8020cbc <HDMI_WriteI2C_Byte>

    HAL_Delay(2);
 8021584:	2002      	movs	r0, #2
 8021586:	f000 fcc7 	bl	8021f18 <HAL_Delay>
    HDMI_ReadI2C_ByteN( 0x80, run_version, 4);
 802158a:	2204      	movs	r2, #4
 802158c:	6879      	ldr	r1, [r7, #4]
 802158e:	2080      	movs	r0, #128	; 0x80
 8021590:	f7ff fbd0 	bl	8020d34 <HDMI_ReadI2C_ByteN>

}
 8021594:	bf00      	nop
 8021596:	3708      	adds	r7, #8
 8021598:	46bd      	mov	sp, r7
 802159a:	bd80      	pop	{r7, pc}

0802159c <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 802159c:	b480      	push	{r7}
 802159e:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80215a0:	f3bf 8f4f 	dsb	sy
}
 80215a4:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80215a6:	4b06      	ldr	r3, [pc, #24]	; (80215c0 <__NVIC_SystemReset+0x24>)
 80215a8:	68db      	ldr	r3, [r3, #12]
 80215aa:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80215ae:	4904      	ldr	r1, [pc, #16]	; (80215c0 <__NVIC_SystemReset+0x24>)
 80215b0:	4b04      	ldr	r3, [pc, #16]	; (80215c4 <__NVIC_SystemReset+0x28>)
 80215b2:	4313      	orrs	r3, r2
 80215b4:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80215b6:	f3bf 8f4f 	dsb	sy
}
 80215ba:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80215bc:	bf00      	nop
 80215be:	e7fd      	b.n	80215bc <__NVIC_SystemReset+0x20>
 80215c0:	e000ed00 	.word	0xe000ed00
 80215c4:	05fa0004 	.word	0x05fa0004

080215c8 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 80215c8:	b480      	push	{r7}
 80215ca:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 80215cc:	f3bf 8f4f 	dsb	sy
}
 80215d0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80215d2:	f3bf 8f6f 	isb	sy
}
 80215d6:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80215d8:	4b0d      	ldr	r3, [pc, #52]	; (8021610 <SCB_EnableICache+0x48>)
 80215da:	2200      	movs	r2, #0
 80215dc:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80215e0:	f3bf 8f4f 	dsb	sy
}
 80215e4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80215e6:	f3bf 8f6f 	isb	sy
}
 80215ea:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80215ec:	4b08      	ldr	r3, [pc, #32]	; (8021610 <SCB_EnableICache+0x48>)
 80215ee:	695b      	ldr	r3, [r3, #20]
 80215f0:	4a07      	ldr	r2, [pc, #28]	; (8021610 <SCB_EnableICache+0x48>)
 80215f2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80215f6:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80215f8:	f3bf 8f4f 	dsb	sy
}
 80215fc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80215fe:	f3bf 8f6f 	isb	sy
}
 8021602:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 8021604:	bf00      	nop
 8021606:	46bd      	mov	sp, r7
 8021608:	f85d 7b04 	ldr.w	r7, [sp], #4
 802160c:	4770      	bx	lr
 802160e:	bf00      	nop
 8021610:	e000ed00 	.word	0xe000ed00

08021614 <SCB_DisableICache>:
/**
  \brief   Disable I-Cache
  \details Turns off I-Cache
  */
__STATIC_INLINE void SCB_DisableICache (void)
{
 8021614:	b480      	push	{r7}
 8021616:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8021618:	f3bf 8f4f 	dsb	sy
}
 802161c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 802161e:	f3bf 8f6f 	isb	sy
}
 8021622:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 8021624:	4b0a      	ldr	r3, [pc, #40]	; (8021650 <SCB_DisableICache+0x3c>)
 8021626:	695b      	ldr	r3, [r3, #20]
 8021628:	4a09      	ldr	r2, [pc, #36]	; (8021650 <SCB_DisableICache+0x3c>)
 802162a:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 802162e:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8021630:	4b07      	ldr	r3, [pc, #28]	; (8021650 <SCB_DisableICache+0x3c>)
 8021632:	2200      	movs	r2, #0
 8021634:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8021638:	f3bf 8f4f 	dsb	sy
}
 802163c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 802163e:	f3bf 8f6f 	isb	sy
}
 8021642:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 8021644:	bf00      	nop
 8021646:	46bd      	mov	sp, r7
 8021648:	f85d 7b04 	ldr.w	r7, [sp], #4
 802164c:	4770      	bx	lr
 802164e:	bf00      	nop
 8021650:	e000ed00 	.word	0xe000ed00

08021654 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 8021654:	b480      	push	{r7}
 8021656:	b085      	sub	sp, #20
 8021658:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 802165a:	4b1f      	ldr	r3, [pc, #124]	; (80216d8 <SCB_EnableDCache+0x84>)
 802165c:	2200      	movs	r2, #0
 802165e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8021662:	f3bf 8f4f 	dsb	sy
}
 8021666:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8021668:	4b1b      	ldr	r3, [pc, #108]	; (80216d8 <SCB_EnableDCache+0x84>)
 802166a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 802166e:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8021670:	687b      	ldr	r3, [r7, #4]
 8021672:	0b5b      	lsrs	r3, r3, #13
 8021674:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8021678:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 802167a:	687b      	ldr	r3, [r7, #4]
 802167c:	08db      	lsrs	r3, r3, #3
 802167e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8021682:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8021684:	68fb      	ldr	r3, [r7, #12]
 8021686:	015a      	lsls	r2, r3, #5
 8021688:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 802168c:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 802168e:	68ba      	ldr	r2, [r7, #8]
 8021690:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8021692:	4911      	ldr	r1, [pc, #68]	; (80216d8 <SCB_EnableDCache+0x84>)
 8021694:	4313      	orrs	r3, r2
 8021696:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 802169a:	68bb      	ldr	r3, [r7, #8]
 802169c:	1e5a      	subs	r2, r3, #1
 802169e:	60ba      	str	r2, [r7, #8]
 80216a0:	2b00      	cmp	r3, #0
 80216a2:	d1ef      	bne.n	8021684 <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 80216a4:	68fb      	ldr	r3, [r7, #12]
 80216a6:	1e5a      	subs	r2, r3, #1
 80216a8:	60fa      	str	r2, [r7, #12]
 80216aa:	2b00      	cmp	r3, #0
 80216ac:	d1e5      	bne.n	802167a <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 80216ae:	f3bf 8f4f 	dsb	sy
}
 80216b2:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80216b4:	4b08      	ldr	r3, [pc, #32]	; (80216d8 <SCB_EnableDCache+0x84>)
 80216b6:	695b      	ldr	r3, [r3, #20]
 80216b8:	4a07      	ldr	r2, [pc, #28]	; (80216d8 <SCB_EnableDCache+0x84>)
 80216ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80216be:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80216c0:	f3bf 8f4f 	dsb	sy
}
 80216c4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80216c6:	f3bf 8f6f 	isb	sy
}
 80216ca:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 80216cc:	bf00      	nop
 80216ce:	3714      	adds	r7, #20
 80216d0:	46bd      	mov	sp, r7
 80216d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80216d6:	4770      	bx	lr
 80216d8:	e000ed00 	.word	0xe000ed00

080216dc <SCB_DisableDCache>:
/**
  \brief   Disable D-Cache
  \details Turns off D-Cache
  */
__STATIC_INLINE void SCB_DisableDCache (void)
{
 80216dc:	b480      	push	{r7}
 80216de:	b085      	sub	sp, #20
 80216e0:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 80216e2:	4b1f      	ldr	r3, [pc, #124]	; (8021760 <SCB_DisableDCache+0x84>)
 80216e4:	2200      	movs	r2, #0
 80216e6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80216ea:	f3bf 8f4f 	dsb	sy
}
 80216ee:	bf00      	nop
    __DSB();

    SCB->CCR &= ~(uint32_t)SCB_CCR_DC_Msk;  /* disable D-Cache */
 80216f0:	4b1b      	ldr	r3, [pc, #108]	; (8021760 <SCB_DisableDCache+0x84>)
 80216f2:	695b      	ldr	r3, [r3, #20]
 80216f4:	4a1a      	ldr	r2, [pc, #104]	; (8021760 <SCB_DisableDCache+0x84>)
 80216f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80216fa:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80216fc:	f3bf 8f4f 	dsb	sy
}
 8021700:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8021702:	4b17      	ldr	r3, [pc, #92]	; (8021760 <SCB_DisableDCache+0x84>)
 8021704:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8021708:	607b      	str	r3, [r7, #4]

                                            /* clean & invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 802170a:	687b      	ldr	r3, [r7, #4]
 802170c:	0b5b      	lsrs	r3, r3, #13
 802170e:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8021712:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8021714:	687b      	ldr	r3, [r7, #4]
 8021716:	08db      	lsrs	r3, r3, #3
 8021718:	f3c3 0309 	ubfx	r3, r3, #0, #10
 802171c:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 802171e:	68fb      	ldr	r3, [r7, #12]
 8021720:	015a      	lsls	r2, r3, #5
 8021722:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8021726:	4013      	ands	r3, r2
                       ((ways << SCB_DCCISW_WAY_Pos) & SCB_DCCISW_WAY_Msk)  );
 8021728:	68ba      	ldr	r2, [r7, #8]
 802172a:	0792      	lsls	r2, r2, #30
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 802172c:	490c      	ldr	r1, [pc, #48]	; (8021760 <SCB_DisableDCache+0x84>)
 802172e:	4313      	orrs	r3, r2
 8021730:	f8c1 3274 	str.w	r3, [r1, #628]	; 0x274
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8021734:	68bb      	ldr	r3, [r7, #8]
 8021736:	1e5a      	subs	r2, r3, #1
 8021738:	60ba      	str	r2, [r7, #8]
 802173a:	2b00      	cmp	r3, #0
 802173c:	d1ef      	bne.n	802171e <SCB_DisableDCache+0x42>
    } while(sets-- != 0U);
 802173e:	68fb      	ldr	r3, [r7, #12]
 8021740:	1e5a      	subs	r2, r3, #1
 8021742:	60fa      	str	r2, [r7, #12]
 8021744:	2b00      	cmp	r3, #0
 8021746:	d1e5      	bne.n	8021714 <SCB_DisableDCache+0x38>
  __ASM volatile ("dsb 0xF":::"memory");
 8021748:	f3bf 8f4f 	dsb	sy
}
 802174c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 802174e:	f3bf 8f6f 	isb	sy
}
 8021752:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 8021754:	bf00      	nop
 8021756:	3714      	adds	r7, #20
 8021758:	46bd      	mov	sp, r7
 802175a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802175e:	4770      	bx	lr
 8021760:	e000ed00 	.word	0xe000ed00

08021764 <boot_UserDFU>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void boot_UserDFU(void)
{
 8021764:	b580      	push	{r7, lr}
 8021766:	af00      	add	r7, sp, #0
    USBD_Stop(&hUsbDeviceFS);
 8021768:	480e      	ldr	r0, [pc, #56]	; (80217a4 <boot_UserDFU+0x40>)
 802176a:	f007 ff2b 	bl	80295c4 <USBD_Stop>
    HAL_Delay(100);
 802176e:	2064      	movs	r0, #100	; 0x64
 8021770:	f000 fbd2 	bl	8021f18 <HAL_Delay>
    USBD_DeInit(&hUsbDeviceFS);
 8021774:	480b      	ldr	r0, [pc, #44]	; (80217a4 <boot_UserDFU+0x40>)
 8021776:	f007 feb3 	bl	80294e0 <USBD_DeInit>
    HAL_Delay(100);
 802177a:	2064      	movs	r0, #100	; 0x64
 802177c:	f000 fbcc 	bl	8021f18 <HAL_Delay>

    SCB_DisableICache();
 8021780:	f7ff ff48 	bl	8021614 <SCB_DisableICache>
    SCB_DisableDCache();
 8021784:	f7ff ffaa 	bl	80216dc <SCB_DisableDCache>
    *((unsigned long *)0x20017FF0) = 0xDEADBEEF; // 256KB STM32F723
 8021788:	4b07      	ldr	r3, [pc, #28]	; (80217a8 <boot_UserDFU+0x44>)
 802178a:	4a08      	ldr	r2, [pc, #32]	; (80217ac <boot_UserDFU+0x48>)
 802178c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 802178e:	f3bf 8f4f 	dsb	sy
}
 8021792:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8021794:	f3bf 8f6f 	isb	sy
}
 8021798:	bf00      	nop
  __ASM volatile ("dsb 0xF":::"memory");
 802179a:	f3bf 8f4f 	dsb	sy
}
 802179e:	bf00      	nop
    __DSB();
    __ISB();

    __DSB();

    NVIC_SystemReset();
 80217a0:	f7ff fefc 	bl	802159c <__NVIC_SystemReset>
 80217a4:	2000ba80 	.word	0x2000ba80
 80217a8:	20017ff0 	.word	0x20017ff0
 80217ac:	deadbeef 	.word	0xdeadbeef

080217b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80217b0:	b580      	push	{r7, lr}
 80217b2:	af00      	add	r7, sp, #0
  uint32_t last_time = 0;
  #endif
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/
   MPU_Config();
 80217b4:	f000 f8f8 	bl	80219a8 <MPU_Config>

   /* Enable I-Cache---------------------------------------------------------*/
   SCB_EnableICache();
 80217b8:	f7ff ff06 	bl	80215c8 <SCB_EnableICache>

   /* Enable D-Cache---------------------------------------------------------*/
   SCB_EnableDCache();
 80217bc:	f7ff ff4a 	bl	8021654 <SCB_EnableDCache>
   /* MCU Configuration--------------------------------------------------------*/
  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80217c0:	f000 fb4d 	bl	8021e5e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80217c4:	f000 f844 	bl	8021850 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80217c8:	f7fe ff16 	bl	80205f8 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 80217cc:	f009 f9c0 	bl	802ab50 <MX_USB_DEVICE_Init>
  MX_I2C3_Init();
 80217d0:	f7ff f844 	bl	802085c <MX_I2C3_Init>
  MX_SPI2_Init();
 80217d4:	f000 f91a 	bl	8021a0c <MX_SPI2_Init>
  MX_SPI4_Init();
 80217d8:	f000 f956 	bl	8021a88 <MX_SPI4_Init>
  MX_I2C1_Init();
 80217dc:	f7fe fffe 	bl	80207dc <MX_I2C1_Init>
  MX_I2S3_Init();
 80217e0:	f7ff f966 	bl	8020ab0 <MX_I2S3_Init>
  MX_DMA_Init();
 80217e4:	f7fe feea 	bl	80205bc <MX_DMA_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(ALS_RST_GPIO_Port, ALS_RST_Pin, GPIO_PIN_SET);
 80217e8:	2201      	movs	r2, #1
 80217ea:	2104      	movs	r1, #4
 80217ec:	4815      	ldr	r0, [pc, #84]	; (8021844 <main+0x94>)
 80217ee:	f001 fb29 	bl	8022e44 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 80217f2:	2064      	movs	r0, #100	; 0x64
 80217f4:	f000 fb90 	bl	8021f18 <HAL_Delay>
  HAL_GPIO_WritePin(TOF_RST_GPIO_Port, TOF_RST_Pin, GPIO_PIN_SET);
 80217f8:	2201      	movs	r2, #1
 80217fa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80217fe:	4812      	ldr	r0, [pc, #72]	; (8021848 <main+0x98>)
 8021800:	f001 fb20 	bl	8022e44 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 8021804:	2064      	movs	r0, #100	; 0x64
 8021806:	f000 fb87 	bl	8021f18 <HAL_Delay>
  HAL_GPIO_WritePin(IMU_RST_GPIO_Port, IMU_RST_Pin, GPIO_PIN_SET);
 802180a:	2201      	movs	r2, #1
 802180c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8021810:	480e      	ldr	r0, [pc, #56]	; (802184c <main+0x9c>)
 8021812:	f001 fb17 	bl	8022e44 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 8021816:	2064      	movs	r0, #100	; 0x64
 8021818:	f000 fb7e 	bl	8021f18 <HAL_Delay>
  HAL_GPIO_WritePin(CAM_RST_GPIO_Port, CAM_RST_Pin, GPIO_PIN_SET);
 802181c:	2201      	movs	r2, #1
 802181e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8021822:	480a      	ldr	r0, [pc, #40]	; (802184c <main+0x9c>)
 8021824:	f001 fb0e 	bl	8022e44 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 8021828:	2064      	movs	r0, #100	; 0x64
 802182a:	f000 fb75 	bl	8021f18 <HAL_Delay>
//  HAL_GPIO_WritePin(LT7911_RSTN_GPIO_Port, LT7911_RSTN_Pin, GPIO_PIN_SET);
//  HAL_Delay(100);
//  ECX343EN_Run();
//  HAL_Delay(10);

  LT7911_Init();
 802182e:	f7ff fa2f 	bl	8020c90 <LT7911_Init>
//  uint16_t nChipId = LT7911_ReadChipId();
  lt7911_firmware_update_init();
 8021832:	f7ff fd0b 	bl	802124c <lt7911_firmware_update_init>
  HAL_Delay(2000);
 8021836:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 802183a:	f000 fb6d 	bl	8021f18 <HAL_Delay>
//  if (HAL_I2S_Receive_DMA(&hi2s3, (uint16_t *)i2s_data, sizeof(i2s_data)/2) != HAL_OK) {
//       Error_Handler();
//  }
  boot_UserDFU();
 802183e:	f7ff ff91 	bl	8021764 <boot_UserDFU>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8021842:	e7fe      	b.n	8021842 <main+0x92>
 8021844:	40020000 	.word	0x40020000
 8021848:	40020800 	.word	0x40020800
 802184c:	40020400 	.word	0x40020400

08021850 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8021850:	b580      	push	{r7, lr}
 8021852:	b094      	sub	sp, #80	; 0x50
 8021854:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8021856:	f107 0320 	add.w	r3, r7, #32
 802185a:	2230      	movs	r2, #48	; 0x30
 802185c:	2100      	movs	r1, #0
 802185e:	4618      	mov	r0, r3
 8021860:	f00a f8dc 	bl	802ba1c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8021864:	f107 030c 	add.w	r3, r7, #12
 8021868:	2200      	movs	r2, #0
 802186a:	601a      	str	r2, [r3, #0]
 802186c:	605a      	str	r2, [r3, #4]
 802186e:	609a      	str	r2, [r3, #8]
 8021870:	60da      	str	r2, [r3, #12]
 8021872:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8021874:	4b2a      	ldr	r3, [pc, #168]	; (8021920 <SystemClock_Config+0xd0>)
 8021876:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8021878:	4a29      	ldr	r2, [pc, #164]	; (8021920 <SystemClock_Config+0xd0>)
 802187a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 802187e:	6413      	str	r3, [r2, #64]	; 0x40
 8021880:	4b27      	ldr	r3, [pc, #156]	; (8021920 <SystemClock_Config+0xd0>)
 8021882:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8021884:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8021888:	60bb      	str	r3, [r7, #8]
 802188a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 802188c:	4b25      	ldr	r3, [pc, #148]	; (8021924 <SystemClock_Config+0xd4>)
 802188e:	681b      	ldr	r3, [r3, #0]
 8021890:	4a24      	ldr	r2, [pc, #144]	; (8021924 <SystemClock_Config+0xd4>)
 8021892:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8021896:	6013      	str	r3, [r2, #0]
 8021898:	4b22      	ldr	r3, [pc, #136]	; (8021924 <SystemClock_Config+0xd4>)
 802189a:	681b      	ldr	r3, [r3, #0]
 802189c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80218a0:	607b      	str	r3, [r7, #4]
 80218a2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80218a4:	2301      	movs	r3, #1
 80218a6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80218a8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80218ac:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80218ae:	2302      	movs	r3, #2
 80218b0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80218b2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80218b6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 12;
 80218b8:	230c      	movs	r3, #12
 80218ba:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
 80218bc:	23d8      	movs	r3, #216	; 0xd8
 80218be:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80218c0:	2302      	movs	r3, #2
 80218c2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 9;
 80218c4:	2309      	movs	r3, #9
 80218c6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80218c8:	f107 0320 	add.w	r3, r7, #32
 80218cc:	4618      	mov	r0, r3
 80218ce:	f004 fb8f 	bl	8025ff0 <HAL_RCC_OscConfig>
 80218d2:	4603      	mov	r3, r0
 80218d4:	2b00      	cmp	r3, #0
 80218d6:	d001      	beq.n	80218dc <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80218d8:	f000 f892 	bl	8021a00 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80218dc:	f004 fb38 	bl	8025f50 <HAL_PWREx_EnableOverDrive>
 80218e0:	4603      	mov	r3, r0
 80218e2:	2b00      	cmp	r3, #0
 80218e4:	d001      	beq.n	80218ea <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80218e6:	f000 f88b 	bl	8021a00 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80218ea:	230f      	movs	r3, #15
 80218ec:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80218ee:	2302      	movs	r3, #2
 80218f0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80218f2:	2300      	movs	r3, #0
 80218f4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80218f6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80218fa:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80218fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8021900:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8021902:	f107 030c 	add.w	r3, r7, #12
 8021906:	2107      	movs	r1, #7
 8021908:	4618      	mov	r0, r3
 802190a:	f004 fe15 	bl	8026538 <HAL_RCC_ClockConfig>
 802190e:	4603      	mov	r3, r0
 8021910:	2b00      	cmp	r3, #0
 8021912:	d001      	beq.n	8021918 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8021914:	f000 f874 	bl	8021a00 <Error_Handler>
  }
}
 8021918:	bf00      	nop
 802191a:	3750      	adds	r7, #80	; 0x50
 802191c:	46bd      	mov	sp, r7
 802191e:	bd80      	pop	{r7, pc}
 8021920:	40023800 	.word	0x40023800
 8021924:	40007000 	.word	0x40007000

08021928 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8021928:	b480      	push	{r7}
 802192a:	b083      	sub	sp, #12
 802192c:	af00      	add	r7, sp, #0
 802192e:	4603      	mov	r3, r0
 8021930:	80fb      	strh	r3, [r7, #6]
    if(ALS_INT_Pin == GPIO_Pin)
 8021932:	88fb      	ldrh	r3, [r7, #6]
 8021934:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8021938:	d103      	bne.n	8021942 <HAL_GPIO_EXTI_Callback+0x1a>
    {
        als_ready = 1;
 802193a:	4b08      	ldr	r3, [pc, #32]	; (802195c <HAL_GPIO_EXTI_Callback+0x34>)
 802193c:	2201      	movs	r2, #1
 802193e:	701a      	strb	r2, [r3, #0]
    }
    else if(PS_INT_Pin == GPIO_Pin)
    {
        ps_ready = 1;
    }
}
 8021940:	e005      	b.n	802194e <HAL_GPIO_EXTI_Callback+0x26>
    else if(PS_INT_Pin == GPIO_Pin)
 8021942:	88fb      	ldrh	r3, [r7, #6]
 8021944:	2b01      	cmp	r3, #1
 8021946:	d102      	bne.n	802194e <HAL_GPIO_EXTI_Callback+0x26>
        ps_ready = 1;
 8021948:	4b05      	ldr	r3, [pc, #20]	; (8021960 <HAL_GPIO_EXTI_Callback+0x38>)
 802194a:	2201      	movs	r2, #1
 802194c:	701a      	strb	r2, [r3, #0]
}
 802194e:	bf00      	nop
 8021950:	370c      	adds	r7, #12
 8021952:	46bd      	mov	sp, r7
 8021954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021958:	4770      	bx	lr
 802195a:	bf00      	nop
 802195c:	2000b9a8 	.word	0x2000b9a8
 8021960:	2000b9a9 	.word	0x2000b9a9

08021964 <HAL_I2S_RxCpltCallback>:

void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8021964:	b480      	push	{r7}
 8021966:	b085      	sub	sp, #20
 8021968:	af00      	add	r7, sp, #0
 802196a:	6078      	str	r0, [r7, #4]
  for (uint8_t i = 0; i < sizeof(i2s_data)/4 ; i++) {
 802196c:	2300      	movs	r3, #0
 802196e:	73fb      	strb	r3, [r7, #15]
 8021970:	e00b      	b.n	802198a <HAL_I2S_RxCpltCallback+0x26>
      sample_data[i] = i2s_data[i*2];
 8021972:	7bfb      	ldrb	r3, [r7, #15]
 8021974:	005a      	lsls	r2, r3, #1
 8021976:	7bfb      	ldrb	r3, [r7, #15]
 8021978:	4909      	ldr	r1, [pc, #36]	; (80219a0 <HAL_I2S_RxCpltCallback+0x3c>)
 802197a:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 802197e:	4a09      	ldr	r2, [pc, #36]	; (80219a4 <HAL_I2S_RxCpltCallback+0x40>)
 8021980:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
  for (uint8_t i = 0; i < sizeof(i2s_data)/4 ; i++) {
 8021984:	7bfb      	ldrb	r3, [r7, #15]
 8021986:	3301      	adds	r3, #1
 8021988:	73fb      	strb	r3, [r7, #15]
 802198a:	7bfb      	ldrb	r3, [r7, #15]
 802198c:	2b0f      	cmp	r3, #15
 802198e:	d9f0      	bls.n	8021972 <HAL_I2S_RxCpltCallback+0xe>
  }

}
 8021990:	bf00      	nop
 8021992:	bf00      	nop
 8021994:	3714      	adds	r7, #20
 8021996:	46bd      	mov	sp, r7
 8021998:	f85d 7b04 	ldr.w	r7, [sp], #4
 802199c:	4770      	bx	lr
 802199e:	bf00      	nop
 80219a0:	2000b948 	.word	0x2000b948
 80219a4:	2000b988 	.word	0x2000b988

080219a8 <MPU_Config>:
void MPU_Config(void)
{
 80219a8:	b580      	push	{r7, lr}
 80219aa:	b084      	sub	sp, #16
 80219ac:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80219ae:	463b      	mov	r3, r7
 80219b0:	2200      	movs	r2, #0
 80219b2:	601a      	str	r2, [r3, #0]
 80219b4:	605a      	str	r2, [r3, #4]
 80219b6:	609a      	str	r2, [r3, #8]
 80219b8:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 80219ba:	f000 fc15 	bl	80221e8 <HAL_MPU_Disable>
  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80219be:	2301      	movs	r3, #1
 80219c0:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 80219c2:	2300      	movs	r3, #0
 80219c4:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 80219c6:	2300      	movs	r3, #0
 80219c8:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 80219ca:	231f      	movs	r3, #31
 80219cc:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 80219ce:	2387      	movs	r3, #135	; 0x87
 80219d0:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 80219d2:	2300      	movs	r3, #0
 80219d4:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 80219d6:	2300      	movs	r3, #0
 80219d8:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 80219da:	2301      	movs	r3, #1
 80219dc:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 80219de:	2301      	movs	r3, #1
 80219e0:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 80219e2:	2300      	movs	r3, #0
 80219e4:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 80219e6:	2300      	movs	r3, #0
 80219e8:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80219ea:	463b      	mov	r3, r7
 80219ec:	4618      	mov	r0, r3
 80219ee:	f000 fc33 	bl	8022258 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_HFNMI_PRIVDEF);
 80219f2:	2006      	movs	r0, #6
 80219f4:	f000 fc10 	bl	8022218 <HAL_MPU_Enable>

}
 80219f8:	bf00      	nop
 80219fa:	3710      	adds	r7, #16
 80219fc:	46bd      	mov	sp, r7
 80219fe:	bd80      	pop	{r7, pc}

08021a00 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8021a00:	b480      	push	{r7}
 8021a02:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8021a04:	b672      	cpsid	i
}
 8021a06:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8021a08:	e7fe      	b.n	8021a08 <Error_Handler+0x8>
	...

08021a0c <MX_SPI2_Init>:
SPI_HandleTypeDef hspi2;
SPI_HandleTypeDef hspi4;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8021a0c:	b580      	push	{r7, lr}
 8021a0e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8021a10:	4b1b      	ldr	r3, [pc, #108]	; (8021a80 <MX_SPI2_Init+0x74>)
 8021a12:	4a1c      	ldr	r2, [pc, #112]	; (8021a84 <MX_SPI2_Init+0x78>)
 8021a14:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8021a16:	4b1a      	ldr	r3, [pc, #104]	; (8021a80 <MX_SPI2_Init+0x74>)
 8021a18:	f44f 7282 	mov.w	r2, #260	; 0x104
 8021a1c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8021a1e:	4b18      	ldr	r3, [pc, #96]	; (8021a80 <MX_SPI2_Init+0x74>)
 8021a20:	2200      	movs	r2, #0
 8021a22:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8021a24:	4b16      	ldr	r3, [pc, #88]	; (8021a80 <MX_SPI2_Init+0x74>)
 8021a26:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8021a2a:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8021a2c:	4b14      	ldr	r3, [pc, #80]	; (8021a80 <MX_SPI2_Init+0x74>)
 8021a2e:	2200      	movs	r2, #0
 8021a30:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8021a32:	4b13      	ldr	r3, [pc, #76]	; (8021a80 <MX_SPI2_Init+0x74>)
 8021a34:	2200      	movs	r2, #0
 8021a36:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8021a38:	4b11      	ldr	r3, [pc, #68]	; (8021a80 <MX_SPI2_Init+0x74>)
 8021a3a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8021a3e:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8021a40:	4b0f      	ldr	r3, [pc, #60]	; (8021a80 <MX_SPI2_Init+0x74>)
 8021a42:	2220      	movs	r2, #32
 8021a44:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_LSB;
 8021a46:	4b0e      	ldr	r3, [pc, #56]	; (8021a80 <MX_SPI2_Init+0x74>)
 8021a48:	2280      	movs	r2, #128	; 0x80
 8021a4a:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8021a4c:	4b0c      	ldr	r3, [pc, #48]	; (8021a80 <MX_SPI2_Init+0x74>)
 8021a4e:	2200      	movs	r2, #0
 8021a50:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8021a52:	4b0b      	ldr	r3, [pc, #44]	; (8021a80 <MX_SPI2_Init+0x74>)
 8021a54:	2200      	movs	r2, #0
 8021a56:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8021a58:	4b09      	ldr	r3, [pc, #36]	; (8021a80 <MX_SPI2_Init+0x74>)
 8021a5a:	2207      	movs	r2, #7
 8021a5c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8021a5e:	4b08      	ldr	r3, [pc, #32]	; (8021a80 <MX_SPI2_Init+0x74>)
 8021a60:	2200      	movs	r2, #0
 8021a62:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8021a64:	4b06      	ldr	r3, [pc, #24]	; (8021a80 <MX_SPI2_Init+0x74>)
 8021a66:	2208      	movs	r2, #8
 8021a68:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8021a6a:	4805      	ldr	r0, [pc, #20]	; (8021a80 <MX_SPI2_Init+0x74>)
 8021a6c:	f005 fa6c 	bl	8026f48 <HAL_SPI_Init>
 8021a70:	4603      	mov	r3, r0
 8021a72:	2b00      	cmp	r3, #0
 8021a74:	d001      	beq.n	8021a7a <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8021a76:	f7ff ffc3 	bl	8021a00 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8021a7a:	bf00      	nop
 8021a7c:	bd80      	pop	{r7, pc}
 8021a7e:	bf00      	nop
 8021a80:	2000b9ac 	.word	0x2000b9ac
 8021a84:	40003800 	.word	0x40003800

08021a88 <MX_SPI4_Init>:
/* SPI4 init function */
void MX_SPI4_Init(void)
{
 8021a88:	b580      	push	{r7, lr}
 8021a8a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI4_Init 0 */

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  hspi4.Instance = SPI4;
 8021a8c:	4b1b      	ldr	r3, [pc, #108]	; (8021afc <MX_SPI4_Init+0x74>)
 8021a8e:	4a1c      	ldr	r2, [pc, #112]	; (8021b00 <MX_SPI4_Init+0x78>)
 8021a90:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8021a92:	4b1a      	ldr	r3, [pc, #104]	; (8021afc <MX_SPI4_Init+0x74>)
 8021a94:	f44f 7282 	mov.w	r2, #260	; 0x104
 8021a98:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8021a9a:	4b18      	ldr	r3, [pc, #96]	; (8021afc <MX_SPI4_Init+0x74>)
 8021a9c:	2200      	movs	r2, #0
 8021a9e:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8021aa0:	4b16      	ldr	r3, [pc, #88]	; (8021afc <MX_SPI4_Init+0x74>)
 8021aa2:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8021aa6:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8021aa8:	4b14      	ldr	r3, [pc, #80]	; (8021afc <MX_SPI4_Init+0x74>)
 8021aaa:	2200      	movs	r2, #0
 8021aac:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8021aae:	4b13      	ldr	r3, [pc, #76]	; (8021afc <MX_SPI4_Init+0x74>)
 8021ab0:	2200      	movs	r2, #0
 8021ab2:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8021ab4:	4b11      	ldr	r3, [pc, #68]	; (8021afc <MX_SPI4_Init+0x74>)
 8021ab6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8021aba:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8021abc:	4b0f      	ldr	r3, [pc, #60]	; (8021afc <MX_SPI4_Init+0x74>)
 8021abe:	2228      	movs	r2, #40	; 0x28
 8021ac0:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_LSB;
 8021ac2:	4b0e      	ldr	r3, [pc, #56]	; (8021afc <MX_SPI4_Init+0x74>)
 8021ac4:	2280      	movs	r2, #128	; 0x80
 8021ac6:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8021ac8:	4b0c      	ldr	r3, [pc, #48]	; (8021afc <MX_SPI4_Init+0x74>)
 8021aca:	2200      	movs	r2, #0
 8021acc:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8021ace:	4b0b      	ldr	r3, [pc, #44]	; (8021afc <MX_SPI4_Init+0x74>)
 8021ad0:	2200      	movs	r2, #0
 8021ad2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 7;
 8021ad4:	4b09      	ldr	r3, [pc, #36]	; (8021afc <MX_SPI4_Init+0x74>)
 8021ad6:	2207      	movs	r2, #7
 8021ad8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi4.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8021ada:	4b08      	ldr	r3, [pc, #32]	; (8021afc <MX_SPI4_Init+0x74>)
 8021adc:	2200      	movs	r2, #0
 8021ade:	631a      	str	r2, [r3, #48]	; 0x30
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8021ae0:	4b06      	ldr	r3, [pc, #24]	; (8021afc <MX_SPI4_Init+0x74>)
 8021ae2:	2208      	movs	r2, #8
 8021ae4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8021ae6:	4805      	ldr	r0, [pc, #20]	; (8021afc <MX_SPI4_Init+0x74>)
 8021ae8:	f005 fa2e 	bl	8026f48 <HAL_SPI_Init>
 8021aec:	4603      	mov	r3, r0
 8021aee:	2b00      	cmp	r3, #0
 8021af0:	d001      	beq.n	8021af6 <MX_SPI4_Init+0x6e>
  {
    Error_Handler();
 8021af2:	f7ff ff85 	bl	8021a00 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8021af6:	bf00      	nop
 8021af8:	bd80      	pop	{r7, pc}
 8021afa:	bf00      	nop
 8021afc:	2000ba10 	.word	0x2000ba10
 8021b00:	40013400 	.word	0x40013400

08021b04 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8021b04:	b580      	push	{r7, lr}
 8021b06:	b08c      	sub	sp, #48	; 0x30
 8021b08:	af00      	add	r7, sp, #0
 8021b0a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8021b0c:	f107 031c 	add.w	r3, r7, #28
 8021b10:	2200      	movs	r2, #0
 8021b12:	601a      	str	r2, [r3, #0]
 8021b14:	605a      	str	r2, [r3, #4]
 8021b16:	609a      	str	r2, [r3, #8]
 8021b18:	60da      	str	r2, [r3, #12]
 8021b1a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8021b1c:	687b      	ldr	r3, [r7, #4]
 8021b1e:	681b      	ldr	r3, [r3, #0]
 8021b20:	4a3c      	ldr	r2, [pc, #240]	; (8021c14 <HAL_SPI_MspInit+0x110>)
 8021b22:	4293      	cmp	r3, r2
 8021b24:	d145      	bne.n	8021bb2 <HAL_SPI_MspInit+0xae>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8021b26:	4b3c      	ldr	r3, [pc, #240]	; (8021c18 <HAL_SPI_MspInit+0x114>)
 8021b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8021b2a:	4a3b      	ldr	r2, [pc, #236]	; (8021c18 <HAL_SPI_MspInit+0x114>)
 8021b2c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8021b30:	6413      	str	r3, [r2, #64]	; 0x40
 8021b32:	4b39      	ldr	r3, [pc, #228]	; (8021c18 <HAL_SPI_MspInit+0x114>)
 8021b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8021b36:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8021b3a:	61bb      	str	r3, [r7, #24]
 8021b3c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8021b3e:	4b36      	ldr	r3, [pc, #216]	; (8021c18 <HAL_SPI_MspInit+0x114>)
 8021b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021b42:	4a35      	ldr	r2, [pc, #212]	; (8021c18 <HAL_SPI_MspInit+0x114>)
 8021b44:	f043 0304 	orr.w	r3, r3, #4
 8021b48:	6313      	str	r3, [r2, #48]	; 0x30
 8021b4a:	4b33      	ldr	r3, [pc, #204]	; (8021c18 <HAL_SPI_MspInit+0x114>)
 8021b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021b4e:	f003 0304 	and.w	r3, r3, #4
 8021b52:	617b      	str	r3, [r7, #20]
 8021b54:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8021b56:	4b30      	ldr	r3, [pc, #192]	; (8021c18 <HAL_SPI_MspInit+0x114>)
 8021b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021b5a:	4a2f      	ldr	r2, [pc, #188]	; (8021c18 <HAL_SPI_MspInit+0x114>)
 8021b5c:	f043 0302 	orr.w	r3, r3, #2
 8021b60:	6313      	str	r3, [r2, #48]	; 0x30
 8021b62:	4b2d      	ldr	r3, [pc, #180]	; (8021c18 <HAL_SPI_MspInit+0x114>)
 8021b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021b66:	f003 0302 	and.w	r3, r3, #2
 8021b6a:	613b      	str	r3, [r7, #16]
 8021b6c:	693b      	ldr	r3, [r7, #16]
    /**SPI2 GPIO Configuration
    PC3     ------> SPI2_MOSI
    PB13     ------> SPI2_SCK
    PC2     ------> SPI2_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_2;
 8021b6e:	230c      	movs	r3, #12
 8021b70:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8021b72:	2302      	movs	r3, #2
 8021b74:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8021b76:	2300      	movs	r3, #0
 8021b78:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8021b7a:	2303      	movs	r3, #3
 8021b7c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8021b7e:	2305      	movs	r3, #5
 8021b80:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8021b82:	f107 031c 	add.w	r3, r7, #28
 8021b86:	4619      	mov	r1, r3
 8021b88:	4824      	ldr	r0, [pc, #144]	; (8021c1c <HAL_SPI_MspInit+0x118>)
 8021b8a:	f000 fec3 	bl	8022914 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8021b8e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8021b92:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8021b94:	2302      	movs	r3, #2
 8021b96:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8021b98:	2300      	movs	r3, #0
 8021b9a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8021b9c:	2303      	movs	r3, #3
 8021b9e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8021ba0:	2305      	movs	r3, #5
 8021ba2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8021ba4:	f107 031c 	add.w	r3, r7, #28
 8021ba8:	4619      	mov	r1, r3
 8021baa:	481d      	ldr	r0, [pc, #116]	; (8021c20 <HAL_SPI_MspInit+0x11c>)
 8021bac:	f000 feb2 	bl	8022914 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }
}
 8021bb0:	e02c      	b.n	8021c0c <HAL_SPI_MspInit+0x108>
  else if(spiHandle->Instance==SPI4)
 8021bb2:	687b      	ldr	r3, [r7, #4]
 8021bb4:	681b      	ldr	r3, [r3, #0]
 8021bb6:	4a1b      	ldr	r2, [pc, #108]	; (8021c24 <HAL_SPI_MspInit+0x120>)
 8021bb8:	4293      	cmp	r3, r2
 8021bba:	d127      	bne.n	8021c0c <HAL_SPI_MspInit+0x108>
    __HAL_RCC_SPI4_CLK_ENABLE();
 8021bbc:	4b16      	ldr	r3, [pc, #88]	; (8021c18 <HAL_SPI_MspInit+0x114>)
 8021bbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8021bc0:	4a15      	ldr	r2, [pc, #84]	; (8021c18 <HAL_SPI_MspInit+0x114>)
 8021bc2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8021bc6:	6453      	str	r3, [r2, #68]	; 0x44
 8021bc8:	4b13      	ldr	r3, [pc, #76]	; (8021c18 <HAL_SPI_MspInit+0x114>)
 8021bca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8021bcc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8021bd0:	60fb      	str	r3, [r7, #12]
 8021bd2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8021bd4:	4b10      	ldr	r3, [pc, #64]	; (8021c18 <HAL_SPI_MspInit+0x114>)
 8021bd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021bd8:	4a0f      	ldr	r2, [pc, #60]	; (8021c18 <HAL_SPI_MspInit+0x114>)
 8021bda:	f043 0310 	orr.w	r3, r3, #16
 8021bde:	6313      	str	r3, [r2, #48]	; 0x30
 8021be0:	4b0d      	ldr	r3, [pc, #52]	; (8021c18 <HAL_SPI_MspInit+0x114>)
 8021be2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021be4:	f003 0310 	and.w	r3, r3, #16
 8021be8:	60bb      	str	r3, [r7, #8]
 8021bea:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_2|GPIO_PIN_5;
 8021bec:	2364      	movs	r3, #100	; 0x64
 8021bee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8021bf0:	2302      	movs	r3, #2
 8021bf2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8021bf4:	2300      	movs	r3, #0
 8021bf6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8021bf8:	2303      	movs	r3, #3
 8021bfa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8021bfc:	2305      	movs	r3, #5
 8021bfe:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8021c00:	f107 031c 	add.w	r3, r7, #28
 8021c04:	4619      	mov	r1, r3
 8021c06:	4808      	ldr	r0, [pc, #32]	; (8021c28 <HAL_SPI_MspInit+0x124>)
 8021c08:	f000 fe84 	bl	8022914 <HAL_GPIO_Init>
}
 8021c0c:	bf00      	nop
 8021c0e:	3730      	adds	r7, #48	; 0x30
 8021c10:	46bd      	mov	sp, r7
 8021c12:	bd80      	pop	{r7, pc}
 8021c14:	40003800 	.word	0x40003800
 8021c18:	40023800 	.word	0x40023800
 8021c1c:	40020800 	.word	0x40020800
 8021c20:	40020400 	.word	0x40020400
 8021c24:	40013400 	.word	0x40013400
 8021c28:	40021000 	.word	0x40021000

08021c2c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8021c2c:	b480      	push	{r7}
 8021c2e:	b083      	sub	sp, #12
 8021c30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8021c32:	4b0f      	ldr	r3, [pc, #60]	; (8021c70 <HAL_MspInit+0x44>)
 8021c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8021c36:	4a0e      	ldr	r2, [pc, #56]	; (8021c70 <HAL_MspInit+0x44>)
 8021c38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8021c3c:	6413      	str	r3, [r2, #64]	; 0x40
 8021c3e:	4b0c      	ldr	r3, [pc, #48]	; (8021c70 <HAL_MspInit+0x44>)
 8021c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8021c42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8021c46:	607b      	str	r3, [r7, #4]
 8021c48:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8021c4a:	4b09      	ldr	r3, [pc, #36]	; (8021c70 <HAL_MspInit+0x44>)
 8021c4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8021c4e:	4a08      	ldr	r2, [pc, #32]	; (8021c70 <HAL_MspInit+0x44>)
 8021c50:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8021c54:	6453      	str	r3, [r2, #68]	; 0x44
 8021c56:	4b06      	ldr	r3, [pc, #24]	; (8021c70 <HAL_MspInit+0x44>)
 8021c58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8021c5a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8021c5e:	603b      	str	r3, [r7, #0]
 8021c60:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8021c62:	bf00      	nop
 8021c64:	370c      	adds	r7, #12
 8021c66:	46bd      	mov	sp, r7
 8021c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021c6c:	4770      	bx	lr
 8021c6e:	bf00      	nop
 8021c70:	40023800 	.word	0x40023800

08021c74 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8021c74:	b480      	push	{r7}
 8021c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8021c78:	e7fe      	b.n	8021c78 <NMI_Handler+0x4>

08021c7a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8021c7a:	b480      	push	{r7}
 8021c7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8021c7e:	e7fe      	b.n	8021c7e <HardFault_Handler+0x4>

08021c80 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8021c80:	b480      	push	{r7}
 8021c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8021c84:	e7fe      	b.n	8021c84 <MemManage_Handler+0x4>

08021c86 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8021c86:	b480      	push	{r7}
 8021c88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8021c8a:	e7fe      	b.n	8021c8a <BusFault_Handler+0x4>

08021c8c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8021c8c:	b480      	push	{r7}
 8021c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8021c90:	e7fe      	b.n	8021c90 <UsageFault_Handler+0x4>

08021c92 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8021c92:	b480      	push	{r7}
 8021c94:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8021c96:	bf00      	nop
 8021c98:	46bd      	mov	sp, r7
 8021c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021c9e:	4770      	bx	lr

08021ca0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8021ca0:	b480      	push	{r7}
 8021ca2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8021ca4:	bf00      	nop
 8021ca6:	46bd      	mov	sp, r7
 8021ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021cac:	4770      	bx	lr

08021cae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8021cae:	b480      	push	{r7}
 8021cb0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8021cb2:	bf00      	nop
 8021cb4:	46bd      	mov	sp, r7
 8021cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021cba:	4770      	bx	lr

08021cbc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8021cbc:	b580      	push	{r7, lr}
 8021cbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8021cc0:	f000 f90a 	bl	8021ed8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8021cc4:	bf00      	nop
 8021cc6:	bd80      	pop	{r7, pc}

08021cc8 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8021cc8:	b580      	push	{r7, lr}
 8021cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(PS_INT_Pin);
 8021ccc:	2001      	movs	r0, #1
 8021cce:	f001 f8d3 	bl	8022e78 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8021cd2:	bf00      	nop
 8021cd4:	bd80      	pop	{r7, pc}
	...

08021cd8 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8021cd8:	b580      	push	{r7, lr}
 8021cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_rx);
 8021cdc:	4802      	ldr	r0, [pc, #8]	; (8021ce8 <DMA1_Stream0_IRQHandler+0x10>)
 8021cde:	f000 fbcf 	bl	8022480 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8021ce2:	bf00      	nop
 8021ce4:	bd80      	pop	{r7, pc}
 8021ce6:	bf00      	nop
 8021ce8:	20000268 	.word	0x20000268

08021cec <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8021cec:	b580      	push	{r7, lr}
 8021cee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ALS_INT_Pin);
 8021cf0:	f44f 7080 	mov.w	r0, #256	; 0x100
 8021cf4:	f001 f8c0 	bl	8022e78 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8021cf8:	bf00      	nop
 8021cfa:	bd80      	pop	{r7, pc}

08021cfc <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8021cfc:	b580      	push	{r7, lr}
 8021cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8021d00:	4802      	ldr	r0, [pc, #8]	; (8021d0c <I2C1_EV_IRQHandler+0x10>)
 8021d02:	f001 fb8f 	bl	8023424 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8021d06:	bf00      	nop
 8021d08:	bd80      	pop	{r7, pc}
 8021d0a:	bf00      	nop
 8021d0c:	20000180 	.word	0x20000180

08021d10 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8021d10:	b580      	push	{r7, lr}
 8021d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8021d14:	4802      	ldr	r0, [pc, #8]	; (8021d20 <I2C1_ER_IRQHandler+0x10>)
 8021d16:	f001 fb9f 	bl	8023458 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8021d1a:	bf00      	nop
 8021d1c:	bd80      	pop	{r7, pc}
 8021d1e:	bf00      	nop
 8021d20:	20000180 	.word	0x20000180

08021d24 <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 8021d24:	b580      	push	{r7, lr}
 8021d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_I2S_IRQHandler(&hi2s3);
 8021d28:	4802      	ldr	r0, [pc, #8]	; (8021d34 <SPI3_IRQHandler+0x10>)
 8021d2a:	f002 fcef 	bl	802470c <HAL_I2S_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 8021d2e:	bf00      	nop
 8021d30:	bd80      	pop	{r7, pc}
 8021d32:	bf00      	nop
 8021d34:	20000228 	.word	0x20000228

08021d38 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8021d38:	b580      	push	{r7, lr}
 8021d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8021d3c:	4802      	ldr	r0, [pc, #8]	; (8021d48 <OTG_FS_IRQHandler+0x10>)
 8021d3e:	f002 ff95 	bl	8024c6c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8021d42:	bf00      	nop
 8021d44:	bd80      	pop	{r7, pc}
 8021d46:	bf00      	nop
 8021d48:	2000cf60 	.word	0x2000cf60

08021d4c <I2C3_EV_IRQHandler>:

/**
  * @brief This function handles I2C3 event interrupt.
  */
void I2C3_EV_IRQHandler(void)
{
 8021d4c:	b580      	push	{r7, lr}
 8021d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C3_EV_IRQn 0 */

  /* USER CODE END I2C3_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c3);
 8021d50:	4802      	ldr	r0, [pc, #8]	; (8021d5c <I2C3_EV_IRQHandler+0x10>)
 8021d52:	f001 fb67 	bl	8023424 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C3_EV_IRQn 1 */

  /* USER CODE END I2C3_EV_IRQn 1 */
}
 8021d56:	bf00      	nop
 8021d58:	bd80      	pop	{r7, pc}
 8021d5a:	bf00      	nop
 8021d5c:	200001d4 	.word	0x200001d4

08021d60 <I2C3_ER_IRQHandler>:

/**
  * @brief This function handles I2C3 error interrupt.
  */
void I2C3_ER_IRQHandler(void)
{
 8021d60:	b580      	push	{r7, lr}
 8021d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C3_ER_IRQn 0 */

  /* USER CODE END I2C3_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c3);
 8021d64:	4802      	ldr	r0, [pc, #8]	; (8021d70 <I2C3_ER_IRQHandler+0x10>)
 8021d66:	f001 fb77 	bl	8023458 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C3_ER_IRQn 1 */

  /* USER CODE END I2C3_ER_IRQn 1 */
}
 8021d6a:	bf00      	nop
 8021d6c:	bd80      	pop	{r7, pc}
 8021d6e:	bf00      	nop
 8021d70:	200001d4 	.word	0x200001d4

08021d74 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8021d74:	b580      	push	{r7, lr}
 8021d76:	b086      	sub	sp, #24
 8021d78:	af00      	add	r7, sp, #0
 8021d7a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8021d7c:	4a14      	ldr	r2, [pc, #80]	; (8021dd0 <_sbrk+0x5c>)
 8021d7e:	4b15      	ldr	r3, [pc, #84]	; (8021dd4 <_sbrk+0x60>)
 8021d80:	1ad3      	subs	r3, r2, r3
 8021d82:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8021d84:	697b      	ldr	r3, [r7, #20]
 8021d86:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8021d88:	4b13      	ldr	r3, [pc, #76]	; (8021dd8 <_sbrk+0x64>)
 8021d8a:	681b      	ldr	r3, [r3, #0]
 8021d8c:	2b00      	cmp	r3, #0
 8021d8e:	d102      	bne.n	8021d96 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8021d90:	4b11      	ldr	r3, [pc, #68]	; (8021dd8 <_sbrk+0x64>)
 8021d92:	4a12      	ldr	r2, [pc, #72]	; (8021ddc <_sbrk+0x68>)
 8021d94:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8021d96:	4b10      	ldr	r3, [pc, #64]	; (8021dd8 <_sbrk+0x64>)
 8021d98:	681a      	ldr	r2, [r3, #0]
 8021d9a:	687b      	ldr	r3, [r7, #4]
 8021d9c:	4413      	add	r3, r2
 8021d9e:	693a      	ldr	r2, [r7, #16]
 8021da0:	429a      	cmp	r2, r3
 8021da2:	d207      	bcs.n	8021db4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8021da4:	f009 fe52 	bl	802ba4c <__errno>
 8021da8:	4603      	mov	r3, r0
 8021daa:	220c      	movs	r2, #12
 8021dac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8021dae:	f04f 33ff 	mov.w	r3, #4294967295
 8021db2:	e009      	b.n	8021dc8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8021db4:	4b08      	ldr	r3, [pc, #32]	; (8021dd8 <_sbrk+0x64>)
 8021db6:	681b      	ldr	r3, [r3, #0]
 8021db8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8021dba:	4b07      	ldr	r3, [pc, #28]	; (8021dd8 <_sbrk+0x64>)
 8021dbc:	681a      	ldr	r2, [r3, #0]
 8021dbe:	687b      	ldr	r3, [r7, #4]
 8021dc0:	4413      	add	r3, r2
 8021dc2:	4a05      	ldr	r2, [pc, #20]	; (8021dd8 <_sbrk+0x64>)
 8021dc4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8021dc6:	68fb      	ldr	r3, [r7, #12]
}
 8021dc8:	4618      	mov	r0, r3
 8021dca:	3718      	adds	r7, #24
 8021dcc:	46bd      	mov	sp, r7
 8021dce:	bd80      	pop	{r7, pc}
 8021dd0:	20040000 	.word	0x20040000
 8021dd4:	00000400 	.word	0x00000400
 8021dd8:	2000ba74 	.word	0x2000ba74
 8021ddc:	2000d5b0 	.word	0x2000d5b0

08021de0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8021de0:	b480      	push	{r7}
 8021de2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8021de4:	4b07      	ldr	r3, [pc, #28]	; (8021e04 <SystemInit+0x24>)
 8021de6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8021dea:	4a06      	ldr	r2, [pc, #24]	; (8021e04 <SystemInit+0x24>)
 8021dec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8021df0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
 8021df4:	4b03      	ldr	r3, [pc, #12]	; (8021e04 <SystemInit+0x24>)
 8021df6:	4a04      	ldr	r2, [pc, #16]	; (8021e08 <SystemInit+0x28>)
 8021df8:	609a      	str	r2, [r3, #8]
#endif /* USER_VECT_TAB_ADDRESS */
}
 8021dfa:	bf00      	nop
 8021dfc:	46bd      	mov	sp, r7
 8021dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021e02:	4770      	bx	lr
 8021e04:	e000ed00 	.word	0xe000ed00
 8021e08:	08020000 	.word	0x08020000

08021e0c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8021e0c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8021e44 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8021e10:	480d      	ldr	r0, [pc, #52]	; (8021e48 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8021e12:	490e      	ldr	r1, [pc, #56]	; (8021e4c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8021e14:	4a0e      	ldr	r2, [pc, #56]	; (8021e50 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8021e16:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8021e18:	e002      	b.n	8021e20 <LoopCopyDataInit>

08021e1a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8021e1a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8021e1c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8021e1e:	3304      	adds	r3, #4

08021e20 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8021e20:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8021e22:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8021e24:	d3f9      	bcc.n	8021e1a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8021e26:	4a0b      	ldr	r2, [pc, #44]	; (8021e54 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8021e28:	4c0b      	ldr	r4, [pc, #44]	; (8021e58 <LoopFillZerobss+0x26>)
  movs r3, #0
 8021e2a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8021e2c:	e001      	b.n	8021e32 <LoopFillZerobss>

08021e2e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8021e2e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8021e30:	3204      	adds	r2, #4

08021e32 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8021e32:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8021e34:	d3fb      	bcc.n	8021e2e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8021e36:	f7ff ffd3 	bl	8021de0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8021e3a:	f009 fe0d 	bl	802ba58 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8021e3e:	f7ff fcb7 	bl	80217b0 <main>
  bx  lr    
 8021e42:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8021e44:	20040000 	.word	0x20040000
  ldr r0, =_sdata
 8021e48:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8021e4c:	20000164 	.word	0x20000164
  ldr r2, =_sidata
 8021e50:	08037a34 	.word	0x08037a34
  ldr r2, =_sbss
 8021e54:	20000164 	.word	0x20000164
  ldr r4, =_ebss
 8021e58:	2000d5b0 	.word	0x2000d5b0

08021e5c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8021e5c:	e7fe      	b.n	8021e5c <ADC_IRQHandler>

08021e5e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8021e5e:	b580      	push	{r7, lr}
 8021e60:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8021e62:	2003      	movs	r0, #3
 8021e64:	f000 f970 	bl	8022148 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8021e68:	200f      	movs	r0, #15
 8021e6a:	f000 f805 	bl	8021e78 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8021e6e:	f7ff fedd 	bl	8021c2c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8021e72:	2300      	movs	r3, #0
}
 8021e74:	4618      	mov	r0, r3
 8021e76:	bd80      	pop	{r7, pc}

08021e78 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8021e78:	b580      	push	{r7, lr}
 8021e7a:	b082      	sub	sp, #8
 8021e7c:	af00      	add	r7, sp, #0
 8021e7e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8021e80:	4b12      	ldr	r3, [pc, #72]	; (8021ecc <HAL_InitTick+0x54>)
 8021e82:	681a      	ldr	r2, [r3, #0]
 8021e84:	4b12      	ldr	r3, [pc, #72]	; (8021ed0 <HAL_InitTick+0x58>)
 8021e86:	781b      	ldrb	r3, [r3, #0]
 8021e88:	4619      	mov	r1, r3
 8021e8a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8021e8e:	fbb3 f3f1 	udiv	r3, r3, r1
 8021e92:	fbb2 f3f3 	udiv	r3, r2, r3
 8021e96:	4618      	mov	r0, r3
 8021e98:	f000 f999 	bl	80221ce <HAL_SYSTICK_Config>
 8021e9c:	4603      	mov	r3, r0
 8021e9e:	2b00      	cmp	r3, #0
 8021ea0:	d001      	beq.n	8021ea6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8021ea2:	2301      	movs	r3, #1
 8021ea4:	e00e      	b.n	8021ec4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8021ea6:	687b      	ldr	r3, [r7, #4]
 8021ea8:	2b0f      	cmp	r3, #15
 8021eaa:	d80a      	bhi.n	8021ec2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8021eac:	2200      	movs	r2, #0
 8021eae:	6879      	ldr	r1, [r7, #4]
 8021eb0:	f04f 30ff 	mov.w	r0, #4294967295
 8021eb4:	f000 f953 	bl	802215e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8021eb8:	4a06      	ldr	r2, [pc, #24]	; (8021ed4 <HAL_InitTick+0x5c>)
 8021eba:	687b      	ldr	r3, [r7, #4]
 8021ebc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8021ebe:	2300      	movs	r3, #0
 8021ec0:	e000      	b.n	8021ec4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8021ec2:	2301      	movs	r3, #1
}
 8021ec4:	4618      	mov	r0, r3
 8021ec6:	3708      	adds	r7, #8
 8021ec8:	46bd      	mov	sp, r7
 8021eca:	bd80      	pop	{r7, pc}
 8021ecc:	20000000 	.word	0x20000000
 8021ed0:	20000008 	.word	0x20000008
 8021ed4:	20000004 	.word	0x20000004

08021ed8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8021ed8:	b480      	push	{r7}
 8021eda:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8021edc:	4b06      	ldr	r3, [pc, #24]	; (8021ef8 <HAL_IncTick+0x20>)
 8021ede:	781b      	ldrb	r3, [r3, #0]
 8021ee0:	461a      	mov	r2, r3
 8021ee2:	4b06      	ldr	r3, [pc, #24]	; (8021efc <HAL_IncTick+0x24>)
 8021ee4:	681b      	ldr	r3, [r3, #0]
 8021ee6:	4413      	add	r3, r2
 8021ee8:	4a04      	ldr	r2, [pc, #16]	; (8021efc <HAL_IncTick+0x24>)
 8021eea:	6013      	str	r3, [r2, #0]
}
 8021eec:	bf00      	nop
 8021eee:	46bd      	mov	sp, r7
 8021ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021ef4:	4770      	bx	lr
 8021ef6:	bf00      	nop
 8021ef8:	20000008 	.word	0x20000008
 8021efc:	2000ba78 	.word	0x2000ba78

08021f00 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8021f00:	b480      	push	{r7}
 8021f02:	af00      	add	r7, sp, #0
  return uwTick;
 8021f04:	4b03      	ldr	r3, [pc, #12]	; (8021f14 <HAL_GetTick+0x14>)
 8021f06:	681b      	ldr	r3, [r3, #0]
}
 8021f08:	4618      	mov	r0, r3
 8021f0a:	46bd      	mov	sp, r7
 8021f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021f10:	4770      	bx	lr
 8021f12:	bf00      	nop
 8021f14:	2000ba78 	.word	0x2000ba78

08021f18 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8021f18:	b580      	push	{r7, lr}
 8021f1a:	b084      	sub	sp, #16
 8021f1c:	af00      	add	r7, sp, #0
 8021f1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8021f20:	f7ff ffee 	bl	8021f00 <HAL_GetTick>
 8021f24:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8021f26:	687b      	ldr	r3, [r7, #4]
 8021f28:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8021f2a:	68fb      	ldr	r3, [r7, #12]
 8021f2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8021f30:	d005      	beq.n	8021f3e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8021f32:	4b0a      	ldr	r3, [pc, #40]	; (8021f5c <HAL_Delay+0x44>)
 8021f34:	781b      	ldrb	r3, [r3, #0]
 8021f36:	461a      	mov	r2, r3
 8021f38:	68fb      	ldr	r3, [r7, #12]
 8021f3a:	4413      	add	r3, r2
 8021f3c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8021f3e:	bf00      	nop
 8021f40:	f7ff ffde 	bl	8021f00 <HAL_GetTick>
 8021f44:	4602      	mov	r2, r0
 8021f46:	68bb      	ldr	r3, [r7, #8]
 8021f48:	1ad3      	subs	r3, r2, r3
 8021f4a:	68fa      	ldr	r2, [r7, #12]
 8021f4c:	429a      	cmp	r2, r3
 8021f4e:	d8f7      	bhi.n	8021f40 <HAL_Delay+0x28>
  {
  }
}
 8021f50:	bf00      	nop
 8021f52:	bf00      	nop
 8021f54:	3710      	adds	r7, #16
 8021f56:	46bd      	mov	sp, r7
 8021f58:	bd80      	pop	{r7, pc}
 8021f5a:	bf00      	nop
 8021f5c:	20000008 	.word	0x20000008

08021f60 <__NVIC_SetPriorityGrouping>:
{
 8021f60:	b480      	push	{r7}
 8021f62:	b085      	sub	sp, #20
 8021f64:	af00      	add	r7, sp, #0
 8021f66:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8021f68:	687b      	ldr	r3, [r7, #4]
 8021f6a:	f003 0307 	and.w	r3, r3, #7
 8021f6e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8021f70:	4b0b      	ldr	r3, [pc, #44]	; (8021fa0 <__NVIC_SetPriorityGrouping+0x40>)
 8021f72:	68db      	ldr	r3, [r3, #12]
 8021f74:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8021f76:	68ba      	ldr	r2, [r7, #8]
 8021f78:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8021f7c:	4013      	ands	r3, r2
 8021f7e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8021f80:	68fb      	ldr	r3, [r7, #12]
 8021f82:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8021f84:	68bb      	ldr	r3, [r7, #8]
 8021f86:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8021f88:	4b06      	ldr	r3, [pc, #24]	; (8021fa4 <__NVIC_SetPriorityGrouping+0x44>)
 8021f8a:	4313      	orrs	r3, r2
 8021f8c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8021f8e:	4a04      	ldr	r2, [pc, #16]	; (8021fa0 <__NVIC_SetPriorityGrouping+0x40>)
 8021f90:	68bb      	ldr	r3, [r7, #8]
 8021f92:	60d3      	str	r3, [r2, #12]
}
 8021f94:	bf00      	nop
 8021f96:	3714      	adds	r7, #20
 8021f98:	46bd      	mov	sp, r7
 8021f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021f9e:	4770      	bx	lr
 8021fa0:	e000ed00 	.word	0xe000ed00
 8021fa4:	05fa0000 	.word	0x05fa0000

08021fa8 <__NVIC_GetPriorityGrouping>:
{
 8021fa8:	b480      	push	{r7}
 8021faa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8021fac:	4b04      	ldr	r3, [pc, #16]	; (8021fc0 <__NVIC_GetPriorityGrouping+0x18>)
 8021fae:	68db      	ldr	r3, [r3, #12]
 8021fb0:	0a1b      	lsrs	r3, r3, #8
 8021fb2:	f003 0307 	and.w	r3, r3, #7
}
 8021fb6:	4618      	mov	r0, r3
 8021fb8:	46bd      	mov	sp, r7
 8021fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021fbe:	4770      	bx	lr
 8021fc0:	e000ed00 	.word	0xe000ed00

08021fc4 <__NVIC_EnableIRQ>:
{
 8021fc4:	b480      	push	{r7}
 8021fc6:	b083      	sub	sp, #12
 8021fc8:	af00      	add	r7, sp, #0
 8021fca:	4603      	mov	r3, r0
 8021fcc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8021fce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8021fd2:	2b00      	cmp	r3, #0
 8021fd4:	db0b      	blt.n	8021fee <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8021fd6:	79fb      	ldrb	r3, [r7, #7]
 8021fd8:	f003 021f 	and.w	r2, r3, #31
 8021fdc:	4907      	ldr	r1, [pc, #28]	; (8021ffc <__NVIC_EnableIRQ+0x38>)
 8021fde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8021fe2:	095b      	lsrs	r3, r3, #5
 8021fe4:	2001      	movs	r0, #1
 8021fe6:	fa00 f202 	lsl.w	r2, r0, r2
 8021fea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8021fee:	bf00      	nop
 8021ff0:	370c      	adds	r7, #12
 8021ff2:	46bd      	mov	sp, r7
 8021ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021ff8:	4770      	bx	lr
 8021ffa:	bf00      	nop
 8021ffc:	e000e100 	.word	0xe000e100

08022000 <__NVIC_DisableIRQ>:
{
 8022000:	b480      	push	{r7}
 8022002:	b083      	sub	sp, #12
 8022004:	af00      	add	r7, sp, #0
 8022006:	4603      	mov	r3, r0
 8022008:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 802200a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 802200e:	2b00      	cmp	r3, #0
 8022010:	db12      	blt.n	8022038 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8022012:	79fb      	ldrb	r3, [r7, #7]
 8022014:	f003 021f 	and.w	r2, r3, #31
 8022018:	490a      	ldr	r1, [pc, #40]	; (8022044 <__NVIC_DisableIRQ+0x44>)
 802201a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 802201e:	095b      	lsrs	r3, r3, #5
 8022020:	2001      	movs	r0, #1
 8022022:	fa00 f202 	lsl.w	r2, r0, r2
 8022026:	3320      	adds	r3, #32
 8022028:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 802202c:	f3bf 8f4f 	dsb	sy
}
 8022030:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8022032:	f3bf 8f6f 	isb	sy
}
 8022036:	bf00      	nop
}
 8022038:	bf00      	nop
 802203a:	370c      	adds	r7, #12
 802203c:	46bd      	mov	sp, r7
 802203e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022042:	4770      	bx	lr
 8022044:	e000e100 	.word	0xe000e100

08022048 <__NVIC_SetPriority>:
{
 8022048:	b480      	push	{r7}
 802204a:	b083      	sub	sp, #12
 802204c:	af00      	add	r7, sp, #0
 802204e:	4603      	mov	r3, r0
 8022050:	6039      	str	r1, [r7, #0]
 8022052:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8022054:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8022058:	2b00      	cmp	r3, #0
 802205a:	db0a      	blt.n	8022072 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 802205c:	683b      	ldr	r3, [r7, #0]
 802205e:	b2da      	uxtb	r2, r3
 8022060:	490c      	ldr	r1, [pc, #48]	; (8022094 <__NVIC_SetPriority+0x4c>)
 8022062:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8022066:	0112      	lsls	r2, r2, #4
 8022068:	b2d2      	uxtb	r2, r2
 802206a:	440b      	add	r3, r1
 802206c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8022070:	e00a      	b.n	8022088 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8022072:	683b      	ldr	r3, [r7, #0]
 8022074:	b2da      	uxtb	r2, r3
 8022076:	4908      	ldr	r1, [pc, #32]	; (8022098 <__NVIC_SetPriority+0x50>)
 8022078:	79fb      	ldrb	r3, [r7, #7]
 802207a:	f003 030f 	and.w	r3, r3, #15
 802207e:	3b04      	subs	r3, #4
 8022080:	0112      	lsls	r2, r2, #4
 8022082:	b2d2      	uxtb	r2, r2
 8022084:	440b      	add	r3, r1
 8022086:	761a      	strb	r2, [r3, #24]
}
 8022088:	bf00      	nop
 802208a:	370c      	adds	r7, #12
 802208c:	46bd      	mov	sp, r7
 802208e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022092:	4770      	bx	lr
 8022094:	e000e100 	.word	0xe000e100
 8022098:	e000ed00 	.word	0xe000ed00

0802209c <NVIC_EncodePriority>:
{
 802209c:	b480      	push	{r7}
 802209e:	b089      	sub	sp, #36	; 0x24
 80220a0:	af00      	add	r7, sp, #0
 80220a2:	60f8      	str	r0, [r7, #12]
 80220a4:	60b9      	str	r1, [r7, #8]
 80220a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80220a8:	68fb      	ldr	r3, [r7, #12]
 80220aa:	f003 0307 	and.w	r3, r3, #7
 80220ae:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80220b0:	69fb      	ldr	r3, [r7, #28]
 80220b2:	f1c3 0307 	rsb	r3, r3, #7
 80220b6:	2b04      	cmp	r3, #4
 80220b8:	bf28      	it	cs
 80220ba:	2304      	movcs	r3, #4
 80220bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80220be:	69fb      	ldr	r3, [r7, #28]
 80220c0:	3304      	adds	r3, #4
 80220c2:	2b06      	cmp	r3, #6
 80220c4:	d902      	bls.n	80220cc <NVIC_EncodePriority+0x30>
 80220c6:	69fb      	ldr	r3, [r7, #28]
 80220c8:	3b03      	subs	r3, #3
 80220ca:	e000      	b.n	80220ce <NVIC_EncodePriority+0x32>
 80220cc:	2300      	movs	r3, #0
 80220ce:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80220d0:	f04f 32ff 	mov.w	r2, #4294967295
 80220d4:	69bb      	ldr	r3, [r7, #24]
 80220d6:	fa02 f303 	lsl.w	r3, r2, r3
 80220da:	43da      	mvns	r2, r3
 80220dc:	68bb      	ldr	r3, [r7, #8]
 80220de:	401a      	ands	r2, r3
 80220e0:	697b      	ldr	r3, [r7, #20]
 80220e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80220e4:	f04f 31ff 	mov.w	r1, #4294967295
 80220e8:	697b      	ldr	r3, [r7, #20]
 80220ea:	fa01 f303 	lsl.w	r3, r1, r3
 80220ee:	43d9      	mvns	r1, r3
 80220f0:	687b      	ldr	r3, [r7, #4]
 80220f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80220f4:	4313      	orrs	r3, r2
}
 80220f6:	4618      	mov	r0, r3
 80220f8:	3724      	adds	r7, #36	; 0x24
 80220fa:	46bd      	mov	sp, r7
 80220fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022100:	4770      	bx	lr
	...

08022104 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8022104:	b580      	push	{r7, lr}
 8022106:	b082      	sub	sp, #8
 8022108:	af00      	add	r7, sp, #0
 802210a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 802210c:	687b      	ldr	r3, [r7, #4]
 802210e:	3b01      	subs	r3, #1
 8022110:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8022114:	d301      	bcc.n	802211a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8022116:	2301      	movs	r3, #1
 8022118:	e00f      	b.n	802213a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 802211a:	4a0a      	ldr	r2, [pc, #40]	; (8022144 <SysTick_Config+0x40>)
 802211c:	687b      	ldr	r3, [r7, #4]
 802211e:	3b01      	subs	r3, #1
 8022120:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8022122:	210f      	movs	r1, #15
 8022124:	f04f 30ff 	mov.w	r0, #4294967295
 8022128:	f7ff ff8e 	bl	8022048 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 802212c:	4b05      	ldr	r3, [pc, #20]	; (8022144 <SysTick_Config+0x40>)
 802212e:	2200      	movs	r2, #0
 8022130:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8022132:	4b04      	ldr	r3, [pc, #16]	; (8022144 <SysTick_Config+0x40>)
 8022134:	2207      	movs	r2, #7
 8022136:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8022138:	2300      	movs	r3, #0
}
 802213a:	4618      	mov	r0, r3
 802213c:	3708      	adds	r7, #8
 802213e:	46bd      	mov	sp, r7
 8022140:	bd80      	pop	{r7, pc}
 8022142:	bf00      	nop
 8022144:	e000e010 	.word	0xe000e010

08022148 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8022148:	b580      	push	{r7, lr}
 802214a:	b082      	sub	sp, #8
 802214c:	af00      	add	r7, sp, #0
 802214e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8022150:	6878      	ldr	r0, [r7, #4]
 8022152:	f7ff ff05 	bl	8021f60 <__NVIC_SetPriorityGrouping>
}
 8022156:	bf00      	nop
 8022158:	3708      	adds	r7, #8
 802215a:	46bd      	mov	sp, r7
 802215c:	bd80      	pop	{r7, pc}

0802215e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 802215e:	b580      	push	{r7, lr}
 8022160:	b086      	sub	sp, #24
 8022162:	af00      	add	r7, sp, #0
 8022164:	4603      	mov	r3, r0
 8022166:	60b9      	str	r1, [r7, #8]
 8022168:	607a      	str	r2, [r7, #4]
 802216a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 802216c:	2300      	movs	r3, #0
 802216e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8022170:	f7ff ff1a 	bl	8021fa8 <__NVIC_GetPriorityGrouping>
 8022174:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8022176:	687a      	ldr	r2, [r7, #4]
 8022178:	68b9      	ldr	r1, [r7, #8]
 802217a:	6978      	ldr	r0, [r7, #20]
 802217c:	f7ff ff8e 	bl	802209c <NVIC_EncodePriority>
 8022180:	4602      	mov	r2, r0
 8022182:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8022186:	4611      	mov	r1, r2
 8022188:	4618      	mov	r0, r3
 802218a:	f7ff ff5d 	bl	8022048 <__NVIC_SetPriority>
}
 802218e:	bf00      	nop
 8022190:	3718      	adds	r7, #24
 8022192:	46bd      	mov	sp, r7
 8022194:	bd80      	pop	{r7, pc}

08022196 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8022196:	b580      	push	{r7, lr}
 8022198:	b082      	sub	sp, #8
 802219a:	af00      	add	r7, sp, #0
 802219c:	4603      	mov	r3, r0
 802219e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80221a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80221a4:	4618      	mov	r0, r3
 80221a6:	f7ff ff0d 	bl	8021fc4 <__NVIC_EnableIRQ>
}
 80221aa:	bf00      	nop
 80221ac:	3708      	adds	r7, #8
 80221ae:	46bd      	mov	sp, r7
 80221b0:	bd80      	pop	{r7, pc}

080221b2 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80221b2:	b580      	push	{r7, lr}
 80221b4:	b082      	sub	sp, #8
 80221b6:	af00      	add	r7, sp, #0
 80221b8:	4603      	mov	r3, r0
 80221ba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80221bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80221c0:	4618      	mov	r0, r3
 80221c2:	f7ff ff1d 	bl	8022000 <__NVIC_DisableIRQ>
}
 80221c6:	bf00      	nop
 80221c8:	3708      	adds	r7, #8
 80221ca:	46bd      	mov	sp, r7
 80221cc:	bd80      	pop	{r7, pc}

080221ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80221ce:	b580      	push	{r7, lr}
 80221d0:	b082      	sub	sp, #8
 80221d2:	af00      	add	r7, sp, #0
 80221d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80221d6:	6878      	ldr	r0, [r7, #4]
 80221d8:	f7ff ff94 	bl	8022104 <SysTick_Config>
 80221dc:	4603      	mov	r3, r0
}
 80221de:	4618      	mov	r0, r3
 80221e0:	3708      	adds	r7, #8
 80221e2:	46bd      	mov	sp, r7
 80221e4:	bd80      	pop	{r7, pc}
	...

080221e8 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 80221e8:	b480      	push	{r7}
 80221ea:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 80221ec:	f3bf 8f5f 	dmb	sy
}
 80221f0:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80221f2:	4b07      	ldr	r3, [pc, #28]	; (8022210 <HAL_MPU_Disable+0x28>)
 80221f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80221f6:	4a06      	ldr	r2, [pc, #24]	; (8022210 <HAL_MPU_Disable+0x28>)
 80221f8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80221fc:	6253      	str	r3, [r2, #36]	; 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 80221fe:	4b05      	ldr	r3, [pc, #20]	; (8022214 <HAL_MPU_Disable+0x2c>)
 8022200:	2200      	movs	r2, #0
 8022202:	605a      	str	r2, [r3, #4]
}
 8022204:	bf00      	nop
 8022206:	46bd      	mov	sp, r7
 8022208:	f85d 7b04 	ldr.w	r7, [sp], #4
 802220c:	4770      	bx	lr
 802220e:	bf00      	nop
 8022210:	e000ed00 	.word	0xe000ed00
 8022214:	e000ed90 	.word	0xe000ed90

08022218 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8022218:	b480      	push	{r7}
 802221a:	b083      	sub	sp, #12
 802221c:	af00      	add	r7, sp, #0
 802221e:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8022220:	4a0b      	ldr	r2, [pc, #44]	; (8022250 <HAL_MPU_Enable+0x38>)
 8022222:	687b      	ldr	r3, [r7, #4]
 8022224:	f043 0301 	orr.w	r3, r3, #1
 8022228:	6053      	str	r3, [r2, #4]
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 802222a:	4b0a      	ldr	r3, [pc, #40]	; (8022254 <HAL_MPU_Enable+0x3c>)
 802222c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802222e:	4a09      	ldr	r2, [pc, #36]	; (8022254 <HAL_MPU_Enable+0x3c>)
 8022230:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8022234:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8022236:	f3bf 8f4f 	dsb	sy
}
 802223a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 802223c:	f3bf 8f6f 	isb	sy
}
 8022240:	bf00      	nop
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8022242:	bf00      	nop
 8022244:	370c      	adds	r7, #12
 8022246:	46bd      	mov	sp, r7
 8022248:	f85d 7b04 	ldr.w	r7, [sp], #4
 802224c:	4770      	bx	lr
 802224e:	bf00      	nop
 8022250:	e000ed90 	.word	0xe000ed90
 8022254:	e000ed00 	.word	0xe000ed00

08022258 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8022258:	b480      	push	{r7}
 802225a:	b083      	sub	sp, #12
 802225c:	af00      	add	r7, sp, #0
 802225e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8022260:	687b      	ldr	r3, [r7, #4]
 8022262:	785a      	ldrb	r2, [r3, #1]
 8022264:	4b1d      	ldr	r3, [pc, #116]	; (80222dc <HAL_MPU_ConfigRegion+0x84>)
 8022266:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != RESET)
 8022268:	687b      	ldr	r3, [r7, #4]
 802226a:	781b      	ldrb	r3, [r3, #0]
 802226c:	2b00      	cmp	r3, #0
 802226e:	d029      	beq.n	80222c4 <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));
    
    MPU->RBAR = MPU_Init->BaseAddress;
 8022270:	4a1a      	ldr	r2, [pc, #104]	; (80222dc <HAL_MPU_ConfigRegion+0x84>)
 8022272:	687b      	ldr	r3, [r7, #4]
 8022274:	685b      	ldr	r3, [r3, #4]
 8022276:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8022278:	687b      	ldr	r3, [r7, #4]
 802227a:	7b1b      	ldrb	r3, [r3, #12]
 802227c:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 802227e:	687b      	ldr	r3, [r7, #4]
 8022280:	7adb      	ldrb	r3, [r3, #11]
 8022282:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8022284:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8022286:	687b      	ldr	r3, [r7, #4]
 8022288:	7a9b      	ldrb	r3, [r3, #10]
 802228a:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 802228c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 802228e:	687b      	ldr	r3, [r7, #4]
 8022290:	7b5b      	ldrb	r3, [r3, #13]
 8022292:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8022294:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8022296:	687b      	ldr	r3, [r7, #4]
 8022298:	7b9b      	ldrb	r3, [r3, #14]
 802229a:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 802229c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 802229e:	687b      	ldr	r3, [r7, #4]
 80222a0:	7bdb      	ldrb	r3, [r3, #15]
 80222a2:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80222a4:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80222a6:	687b      	ldr	r3, [r7, #4]
 80222a8:	7a5b      	ldrb	r3, [r3, #9]
 80222aa:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80222ac:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80222ae:	687b      	ldr	r3, [r7, #4]
 80222b0:	7a1b      	ldrb	r3, [r3, #8]
 80222b2:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80222b4:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 80222b6:	687a      	ldr	r2, [r7, #4]
 80222b8:	7812      	ldrb	r2, [r2, #0]
 80222ba:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80222bc:	4a07      	ldr	r2, [pc, #28]	; (80222dc <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80222be:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80222c0:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 80222c2:	e005      	b.n	80222d0 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 80222c4:	4b05      	ldr	r3, [pc, #20]	; (80222dc <HAL_MPU_ConfigRegion+0x84>)
 80222c6:	2200      	movs	r2, #0
 80222c8:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 80222ca:	4b04      	ldr	r3, [pc, #16]	; (80222dc <HAL_MPU_ConfigRegion+0x84>)
 80222cc:	2200      	movs	r2, #0
 80222ce:	611a      	str	r2, [r3, #16]
}
 80222d0:	bf00      	nop
 80222d2:	370c      	adds	r7, #12
 80222d4:	46bd      	mov	sp, r7
 80222d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80222da:	4770      	bx	lr
 80222dc:	e000ed90 	.word	0xe000ed90

080222e0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80222e0:	b580      	push	{r7, lr}
 80222e2:	b086      	sub	sp, #24
 80222e4:	af00      	add	r7, sp, #0
 80222e6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80222e8:	2300      	movs	r3, #0
 80222ea:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80222ec:	f7ff fe08 	bl	8021f00 <HAL_GetTick>
 80222f0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80222f2:	687b      	ldr	r3, [r7, #4]
 80222f4:	2b00      	cmp	r3, #0
 80222f6:	d101      	bne.n	80222fc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80222f8:	2301      	movs	r3, #1
 80222fa:	e099      	b.n	8022430 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80222fc:	687b      	ldr	r3, [r7, #4]
 80222fe:	2202      	movs	r2, #2
 8022300:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8022304:	687b      	ldr	r3, [r7, #4]
 8022306:	2200      	movs	r2, #0
 8022308:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 802230c:	687b      	ldr	r3, [r7, #4]
 802230e:	681b      	ldr	r3, [r3, #0]
 8022310:	681a      	ldr	r2, [r3, #0]
 8022312:	687b      	ldr	r3, [r7, #4]
 8022314:	681b      	ldr	r3, [r3, #0]
 8022316:	f022 0201 	bic.w	r2, r2, #1
 802231a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 802231c:	e00f      	b.n	802233e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 802231e:	f7ff fdef 	bl	8021f00 <HAL_GetTick>
 8022322:	4602      	mov	r2, r0
 8022324:	693b      	ldr	r3, [r7, #16]
 8022326:	1ad3      	subs	r3, r2, r3
 8022328:	2b05      	cmp	r3, #5
 802232a:	d908      	bls.n	802233e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 802232c:	687b      	ldr	r3, [r7, #4]
 802232e:	2220      	movs	r2, #32
 8022330:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8022332:	687b      	ldr	r3, [r7, #4]
 8022334:	2203      	movs	r2, #3
 8022336:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 802233a:	2303      	movs	r3, #3
 802233c:	e078      	b.n	8022430 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 802233e:	687b      	ldr	r3, [r7, #4]
 8022340:	681b      	ldr	r3, [r3, #0]
 8022342:	681b      	ldr	r3, [r3, #0]
 8022344:	f003 0301 	and.w	r3, r3, #1
 8022348:	2b00      	cmp	r3, #0
 802234a:	d1e8      	bne.n	802231e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 802234c:	687b      	ldr	r3, [r7, #4]
 802234e:	681b      	ldr	r3, [r3, #0]
 8022350:	681b      	ldr	r3, [r3, #0]
 8022352:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8022354:	697a      	ldr	r2, [r7, #20]
 8022356:	4b38      	ldr	r3, [pc, #224]	; (8022438 <HAL_DMA_Init+0x158>)
 8022358:	4013      	ands	r3, r2
 802235a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 802235c:	687b      	ldr	r3, [r7, #4]
 802235e:	685a      	ldr	r2, [r3, #4]
 8022360:	687b      	ldr	r3, [r7, #4]
 8022362:	689b      	ldr	r3, [r3, #8]
 8022364:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8022366:	687b      	ldr	r3, [r7, #4]
 8022368:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 802236a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 802236c:	687b      	ldr	r3, [r7, #4]
 802236e:	691b      	ldr	r3, [r3, #16]
 8022370:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8022372:	687b      	ldr	r3, [r7, #4]
 8022374:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8022376:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8022378:	687b      	ldr	r3, [r7, #4]
 802237a:	699b      	ldr	r3, [r3, #24]
 802237c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 802237e:	687b      	ldr	r3, [r7, #4]
 8022380:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8022382:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8022384:	687b      	ldr	r3, [r7, #4]
 8022386:	6a1b      	ldr	r3, [r3, #32]
 8022388:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 802238a:	697a      	ldr	r2, [r7, #20]
 802238c:	4313      	orrs	r3, r2
 802238e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8022390:	687b      	ldr	r3, [r7, #4]
 8022392:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8022394:	2b04      	cmp	r3, #4
 8022396:	d107      	bne.n	80223a8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8022398:	687b      	ldr	r3, [r7, #4]
 802239a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 802239c:	687b      	ldr	r3, [r7, #4]
 802239e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80223a0:	4313      	orrs	r3, r2
 80223a2:	697a      	ldr	r2, [r7, #20]
 80223a4:	4313      	orrs	r3, r2
 80223a6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80223a8:	687b      	ldr	r3, [r7, #4]
 80223aa:	681b      	ldr	r3, [r3, #0]
 80223ac:	697a      	ldr	r2, [r7, #20]
 80223ae:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80223b0:	687b      	ldr	r3, [r7, #4]
 80223b2:	681b      	ldr	r3, [r3, #0]
 80223b4:	695b      	ldr	r3, [r3, #20]
 80223b6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80223b8:	697b      	ldr	r3, [r7, #20]
 80223ba:	f023 0307 	bic.w	r3, r3, #7
 80223be:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80223c0:	687b      	ldr	r3, [r7, #4]
 80223c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80223c4:	697a      	ldr	r2, [r7, #20]
 80223c6:	4313      	orrs	r3, r2
 80223c8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80223ca:	687b      	ldr	r3, [r7, #4]
 80223cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80223ce:	2b04      	cmp	r3, #4
 80223d0:	d117      	bne.n	8022402 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80223d2:	687b      	ldr	r3, [r7, #4]
 80223d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80223d6:	697a      	ldr	r2, [r7, #20]
 80223d8:	4313      	orrs	r3, r2
 80223da:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80223dc:	687b      	ldr	r3, [r7, #4]
 80223de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80223e0:	2b00      	cmp	r3, #0
 80223e2:	d00e      	beq.n	8022402 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80223e4:	6878      	ldr	r0, [r7, #4]
 80223e6:	f000 fa19 	bl	802281c <DMA_CheckFifoParam>
 80223ea:	4603      	mov	r3, r0
 80223ec:	2b00      	cmp	r3, #0
 80223ee:	d008      	beq.n	8022402 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80223f0:	687b      	ldr	r3, [r7, #4]
 80223f2:	2240      	movs	r2, #64	; 0x40
 80223f4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80223f6:	687b      	ldr	r3, [r7, #4]
 80223f8:	2201      	movs	r2, #1
 80223fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80223fe:	2301      	movs	r3, #1
 8022400:	e016      	b.n	8022430 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8022402:	687b      	ldr	r3, [r7, #4]
 8022404:	681b      	ldr	r3, [r3, #0]
 8022406:	697a      	ldr	r2, [r7, #20]
 8022408:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 802240a:	6878      	ldr	r0, [r7, #4]
 802240c:	f000 f9d0 	bl	80227b0 <DMA_CalcBaseAndBitshift>
 8022410:	4603      	mov	r3, r0
 8022412:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8022414:	687b      	ldr	r3, [r7, #4]
 8022416:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8022418:	223f      	movs	r2, #63	; 0x3f
 802241a:	409a      	lsls	r2, r3
 802241c:	68fb      	ldr	r3, [r7, #12]
 802241e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8022420:	687b      	ldr	r3, [r7, #4]
 8022422:	2200      	movs	r2, #0
 8022424:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8022426:	687b      	ldr	r3, [r7, #4]
 8022428:	2201      	movs	r2, #1
 802242a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 802242e:	2300      	movs	r3, #0
}
 8022430:	4618      	mov	r0, r3
 8022432:	3718      	adds	r7, #24
 8022434:	46bd      	mov	sp, r7
 8022436:	bd80      	pop	{r7, pc}
 8022438:	e010803f 	.word	0xe010803f

0802243c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 802243c:	b480      	push	{r7}
 802243e:	b083      	sub	sp, #12
 8022440:	af00      	add	r7, sp, #0
 8022442:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8022444:	687b      	ldr	r3, [r7, #4]
 8022446:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 802244a:	b2db      	uxtb	r3, r3
 802244c:	2b02      	cmp	r3, #2
 802244e:	d004      	beq.n	802245a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8022450:	687b      	ldr	r3, [r7, #4]
 8022452:	2280      	movs	r2, #128	; 0x80
 8022454:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8022456:	2301      	movs	r3, #1
 8022458:	e00c      	b.n	8022474 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 802245a:	687b      	ldr	r3, [r7, #4]
 802245c:	2205      	movs	r2, #5
 802245e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8022462:	687b      	ldr	r3, [r7, #4]
 8022464:	681b      	ldr	r3, [r3, #0]
 8022466:	681a      	ldr	r2, [r3, #0]
 8022468:	687b      	ldr	r3, [r7, #4]
 802246a:	681b      	ldr	r3, [r3, #0]
 802246c:	f022 0201 	bic.w	r2, r2, #1
 8022470:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8022472:	2300      	movs	r3, #0
}
 8022474:	4618      	mov	r0, r3
 8022476:	370c      	adds	r7, #12
 8022478:	46bd      	mov	sp, r7
 802247a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802247e:	4770      	bx	lr

08022480 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8022480:	b580      	push	{r7, lr}
 8022482:	b086      	sub	sp, #24
 8022484:	af00      	add	r7, sp, #0
 8022486:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8022488:	2300      	movs	r3, #0
 802248a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 802248c:	4b8e      	ldr	r3, [pc, #568]	; (80226c8 <HAL_DMA_IRQHandler+0x248>)
 802248e:	681b      	ldr	r3, [r3, #0]
 8022490:	4a8e      	ldr	r2, [pc, #568]	; (80226cc <HAL_DMA_IRQHandler+0x24c>)
 8022492:	fba2 2303 	umull	r2, r3, r2, r3
 8022496:	0a9b      	lsrs	r3, r3, #10
 8022498:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 802249a:	687b      	ldr	r3, [r7, #4]
 802249c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 802249e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80224a0:	693b      	ldr	r3, [r7, #16]
 80224a2:	681b      	ldr	r3, [r3, #0]
 80224a4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80224a6:	687b      	ldr	r3, [r7, #4]
 80224a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80224aa:	2208      	movs	r2, #8
 80224ac:	409a      	lsls	r2, r3
 80224ae:	68fb      	ldr	r3, [r7, #12]
 80224b0:	4013      	ands	r3, r2
 80224b2:	2b00      	cmp	r3, #0
 80224b4:	d01a      	beq.n	80224ec <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80224b6:	687b      	ldr	r3, [r7, #4]
 80224b8:	681b      	ldr	r3, [r3, #0]
 80224ba:	681b      	ldr	r3, [r3, #0]
 80224bc:	f003 0304 	and.w	r3, r3, #4
 80224c0:	2b00      	cmp	r3, #0
 80224c2:	d013      	beq.n	80224ec <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80224c4:	687b      	ldr	r3, [r7, #4]
 80224c6:	681b      	ldr	r3, [r3, #0]
 80224c8:	681a      	ldr	r2, [r3, #0]
 80224ca:	687b      	ldr	r3, [r7, #4]
 80224cc:	681b      	ldr	r3, [r3, #0]
 80224ce:	f022 0204 	bic.w	r2, r2, #4
 80224d2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80224d4:	687b      	ldr	r3, [r7, #4]
 80224d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80224d8:	2208      	movs	r2, #8
 80224da:	409a      	lsls	r2, r3
 80224dc:	693b      	ldr	r3, [r7, #16]
 80224de:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80224e0:	687b      	ldr	r3, [r7, #4]
 80224e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80224e4:	f043 0201 	orr.w	r2, r3, #1
 80224e8:	687b      	ldr	r3, [r7, #4]
 80224ea:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80224ec:	687b      	ldr	r3, [r7, #4]
 80224ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80224f0:	2201      	movs	r2, #1
 80224f2:	409a      	lsls	r2, r3
 80224f4:	68fb      	ldr	r3, [r7, #12]
 80224f6:	4013      	ands	r3, r2
 80224f8:	2b00      	cmp	r3, #0
 80224fa:	d012      	beq.n	8022522 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80224fc:	687b      	ldr	r3, [r7, #4]
 80224fe:	681b      	ldr	r3, [r3, #0]
 8022500:	695b      	ldr	r3, [r3, #20]
 8022502:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8022506:	2b00      	cmp	r3, #0
 8022508:	d00b      	beq.n	8022522 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 802250a:	687b      	ldr	r3, [r7, #4]
 802250c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 802250e:	2201      	movs	r2, #1
 8022510:	409a      	lsls	r2, r3
 8022512:	693b      	ldr	r3, [r7, #16]
 8022514:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8022516:	687b      	ldr	r3, [r7, #4]
 8022518:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 802251a:	f043 0202 	orr.w	r2, r3, #2
 802251e:	687b      	ldr	r3, [r7, #4]
 8022520:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8022522:	687b      	ldr	r3, [r7, #4]
 8022524:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8022526:	2204      	movs	r2, #4
 8022528:	409a      	lsls	r2, r3
 802252a:	68fb      	ldr	r3, [r7, #12]
 802252c:	4013      	ands	r3, r2
 802252e:	2b00      	cmp	r3, #0
 8022530:	d012      	beq.n	8022558 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8022532:	687b      	ldr	r3, [r7, #4]
 8022534:	681b      	ldr	r3, [r3, #0]
 8022536:	681b      	ldr	r3, [r3, #0]
 8022538:	f003 0302 	and.w	r3, r3, #2
 802253c:	2b00      	cmp	r3, #0
 802253e:	d00b      	beq.n	8022558 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8022540:	687b      	ldr	r3, [r7, #4]
 8022542:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8022544:	2204      	movs	r2, #4
 8022546:	409a      	lsls	r2, r3
 8022548:	693b      	ldr	r3, [r7, #16]
 802254a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 802254c:	687b      	ldr	r3, [r7, #4]
 802254e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8022550:	f043 0204 	orr.w	r2, r3, #4
 8022554:	687b      	ldr	r3, [r7, #4]
 8022556:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8022558:	687b      	ldr	r3, [r7, #4]
 802255a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 802255c:	2210      	movs	r2, #16
 802255e:	409a      	lsls	r2, r3
 8022560:	68fb      	ldr	r3, [r7, #12]
 8022562:	4013      	ands	r3, r2
 8022564:	2b00      	cmp	r3, #0
 8022566:	d043      	beq.n	80225f0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8022568:	687b      	ldr	r3, [r7, #4]
 802256a:	681b      	ldr	r3, [r3, #0]
 802256c:	681b      	ldr	r3, [r3, #0]
 802256e:	f003 0308 	and.w	r3, r3, #8
 8022572:	2b00      	cmp	r3, #0
 8022574:	d03c      	beq.n	80225f0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8022576:	687b      	ldr	r3, [r7, #4]
 8022578:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 802257a:	2210      	movs	r2, #16
 802257c:	409a      	lsls	r2, r3
 802257e:	693b      	ldr	r3, [r7, #16]
 8022580:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8022582:	687b      	ldr	r3, [r7, #4]
 8022584:	681b      	ldr	r3, [r3, #0]
 8022586:	681b      	ldr	r3, [r3, #0]
 8022588:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 802258c:	2b00      	cmp	r3, #0
 802258e:	d018      	beq.n	80225c2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8022590:	687b      	ldr	r3, [r7, #4]
 8022592:	681b      	ldr	r3, [r3, #0]
 8022594:	681b      	ldr	r3, [r3, #0]
 8022596:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 802259a:	2b00      	cmp	r3, #0
 802259c:	d108      	bne.n	80225b0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 802259e:	687b      	ldr	r3, [r7, #4]
 80225a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80225a2:	2b00      	cmp	r3, #0
 80225a4:	d024      	beq.n	80225f0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80225a6:	687b      	ldr	r3, [r7, #4]
 80225a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80225aa:	6878      	ldr	r0, [r7, #4]
 80225ac:	4798      	blx	r3
 80225ae:	e01f      	b.n	80225f0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80225b0:	687b      	ldr	r3, [r7, #4]
 80225b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80225b4:	2b00      	cmp	r3, #0
 80225b6:	d01b      	beq.n	80225f0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80225b8:	687b      	ldr	r3, [r7, #4]
 80225ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80225bc:	6878      	ldr	r0, [r7, #4]
 80225be:	4798      	blx	r3
 80225c0:	e016      	b.n	80225f0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80225c2:	687b      	ldr	r3, [r7, #4]
 80225c4:	681b      	ldr	r3, [r3, #0]
 80225c6:	681b      	ldr	r3, [r3, #0]
 80225c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80225cc:	2b00      	cmp	r3, #0
 80225ce:	d107      	bne.n	80225e0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80225d0:	687b      	ldr	r3, [r7, #4]
 80225d2:	681b      	ldr	r3, [r3, #0]
 80225d4:	681a      	ldr	r2, [r3, #0]
 80225d6:	687b      	ldr	r3, [r7, #4]
 80225d8:	681b      	ldr	r3, [r3, #0]
 80225da:	f022 0208 	bic.w	r2, r2, #8
 80225de:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80225e0:	687b      	ldr	r3, [r7, #4]
 80225e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80225e4:	2b00      	cmp	r3, #0
 80225e6:	d003      	beq.n	80225f0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80225e8:	687b      	ldr	r3, [r7, #4]
 80225ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80225ec:	6878      	ldr	r0, [r7, #4]
 80225ee:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80225f0:	687b      	ldr	r3, [r7, #4]
 80225f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80225f4:	2220      	movs	r2, #32
 80225f6:	409a      	lsls	r2, r3
 80225f8:	68fb      	ldr	r3, [r7, #12]
 80225fa:	4013      	ands	r3, r2
 80225fc:	2b00      	cmp	r3, #0
 80225fe:	f000 808f 	beq.w	8022720 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8022602:	687b      	ldr	r3, [r7, #4]
 8022604:	681b      	ldr	r3, [r3, #0]
 8022606:	681b      	ldr	r3, [r3, #0]
 8022608:	f003 0310 	and.w	r3, r3, #16
 802260c:	2b00      	cmp	r3, #0
 802260e:	f000 8087 	beq.w	8022720 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8022612:	687b      	ldr	r3, [r7, #4]
 8022614:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8022616:	2220      	movs	r2, #32
 8022618:	409a      	lsls	r2, r3
 802261a:	693b      	ldr	r3, [r7, #16]
 802261c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 802261e:	687b      	ldr	r3, [r7, #4]
 8022620:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8022624:	b2db      	uxtb	r3, r3
 8022626:	2b05      	cmp	r3, #5
 8022628:	d136      	bne.n	8022698 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 802262a:	687b      	ldr	r3, [r7, #4]
 802262c:	681b      	ldr	r3, [r3, #0]
 802262e:	681a      	ldr	r2, [r3, #0]
 8022630:	687b      	ldr	r3, [r7, #4]
 8022632:	681b      	ldr	r3, [r3, #0]
 8022634:	f022 0216 	bic.w	r2, r2, #22
 8022638:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 802263a:	687b      	ldr	r3, [r7, #4]
 802263c:	681b      	ldr	r3, [r3, #0]
 802263e:	695a      	ldr	r2, [r3, #20]
 8022640:	687b      	ldr	r3, [r7, #4]
 8022642:	681b      	ldr	r3, [r3, #0]
 8022644:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8022648:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 802264a:	687b      	ldr	r3, [r7, #4]
 802264c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802264e:	2b00      	cmp	r3, #0
 8022650:	d103      	bne.n	802265a <HAL_DMA_IRQHandler+0x1da>
 8022652:	687b      	ldr	r3, [r7, #4]
 8022654:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8022656:	2b00      	cmp	r3, #0
 8022658:	d007      	beq.n	802266a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 802265a:	687b      	ldr	r3, [r7, #4]
 802265c:	681b      	ldr	r3, [r3, #0]
 802265e:	681a      	ldr	r2, [r3, #0]
 8022660:	687b      	ldr	r3, [r7, #4]
 8022662:	681b      	ldr	r3, [r3, #0]
 8022664:	f022 0208 	bic.w	r2, r2, #8
 8022668:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 802266a:	687b      	ldr	r3, [r7, #4]
 802266c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 802266e:	223f      	movs	r2, #63	; 0x3f
 8022670:	409a      	lsls	r2, r3
 8022672:	693b      	ldr	r3, [r7, #16]
 8022674:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8022676:	687b      	ldr	r3, [r7, #4]
 8022678:	2201      	movs	r2, #1
 802267a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 802267e:	687b      	ldr	r3, [r7, #4]
 8022680:	2200      	movs	r2, #0
 8022682:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8022686:	687b      	ldr	r3, [r7, #4]
 8022688:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 802268a:	2b00      	cmp	r3, #0
 802268c:	d07e      	beq.n	802278c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 802268e:	687b      	ldr	r3, [r7, #4]
 8022690:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8022692:	6878      	ldr	r0, [r7, #4]
 8022694:	4798      	blx	r3
        }
        return;
 8022696:	e079      	b.n	802278c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8022698:	687b      	ldr	r3, [r7, #4]
 802269a:	681b      	ldr	r3, [r3, #0]
 802269c:	681b      	ldr	r3, [r3, #0]
 802269e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80226a2:	2b00      	cmp	r3, #0
 80226a4:	d01d      	beq.n	80226e2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80226a6:	687b      	ldr	r3, [r7, #4]
 80226a8:	681b      	ldr	r3, [r3, #0]
 80226aa:	681b      	ldr	r3, [r3, #0]
 80226ac:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80226b0:	2b00      	cmp	r3, #0
 80226b2:	d10d      	bne.n	80226d0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80226b4:	687b      	ldr	r3, [r7, #4]
 80226b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80226b8:	2b00      	cmp	r3, #0
 80226ba:	d031      	beq.n	8022720 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80226bc:	687b      	ldr	r3, [r7, #4]
 80226be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80226c0:	6878      	ldr	r0, [r7, #4]
 80226c2:	4798      	blx	r3
 80226c4:	e02c      	b.n	8022720 <HAL_DMA_IRQHandler+0x2a0>
 80226c6:	bf00      	nop
 80226c8:	20000000 	.word	0x20000000
 80226cc:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80226d0:	687b      	ldr	r3, [r7, #4]
 80226d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80226d4:	2b00      	cmp	r3, #0
 80226d6:	d023      	beq.n	8022720 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80226d8:	687b      	ldr	r3, [r7, #4]
 80226da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80226dc:	6878      	ldr	r0, [r7, #4]
 80226de:	4798      	blx	r3
 80226e0:	e01e      	b.n	8022720 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80226e2:	687b      	ldr	r3, [r7, #4]
 80226e4:	681b      	ldr	r3, [r3, #0]
 80226e6:	681b      	ldr	r3, [r3, #0]
 80226e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80226ec:	2b00      	cmp	r3, #0
 80226ee:	d10f      	bne.n	8022710 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80226f0:	687b      	ldr	r3, [r7, #4]
 80226f2:	681b      	ldr	r3, [r3, #0]
 80226f4:	681a      	ldr	r2, [r3, #0]
 80226f6:	687b      	ldr	r3, [r7, #4]
 80226f8:	681b      	ldr	r3, [r3, #0]
 80226fa:	f022 0210 	bic.w	r2, r2, #16
 80226fe:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8022700:	687b      	ldr	r3, [r7, #4]
 8022702:	2201      	movs	r2, #1
 8022704:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8022708:	687b      	ldr	r3, [r7, #4]
 802270a:	2200      	movs	r2, #0
 802270c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8022710:	687b      	ldr	r3, [r7, #4]
 8022712:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8022714:	2b00      	cmp	r3, #0
 8022716:	d003      	beq.n	8022720 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8022718:	687b      	ldr	r3, [r7, #4]
 802271a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802271c:	6878      	ldr	r0, [r7, #4]
 802271e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8022720:	687b      	ldr	r3, [r7, #4]
 8022722:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8022724:	2b00      	cmp	r3, #0
 8022726:	d032      	beq.n	802278e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8022728:	687b      	ldr	r3, [r7, #4]
 802272a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 802272c:	f003 0301 	and.w	r3, r3, #1
 8022730:	2b00      	cmp	r3, #0
 8022732:	d022      	beq.n	802277a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8022734:	687b      	ldr	r3, [r7, #4]
 8022736:	2205      	movs	r2, #5
 8022738:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 802273c:	687b      	ldr	r3, [r7, #4]
 802273e:	681b      	ldr	r3, [r3, #0]
 8022740:	681a      	ldr	r2, [r3, #0]
 8022742:	687b      	ldr	r3, [r7, #4]
 8022744:	681b      	ldr	r3, [r3, #0]
 8022746:	f022 0201 	bic.w	r2, r2, #1
 802274a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 802274c:	68bb      	ldr	r3, [r7, #8]
 802274e:	3301      	adds	r3, #1
 8022750:	60bb      	str	r3, [r7, #8]
 8022752:	697a      	ldr	r2, [r7, #20]
 8022754:	429a      	cmp	r2, r3
 8022756:	d307      	bcc.n	8022768 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8022758:	687b      	ldr	r3, [r7, #4]
 802275a:	681b      	ldr	r3, [r3, #0]
 802275c:	681b      	ldr	r3, [r3, #0]
 802275e:	f003 0301 	and.w	r3, r3, #1
 8022762:	2b00      	cmp	r3, #0
 8022764:	d1f2      	bne.n	802274c <HAL_DMA_IRQHandler+0x2cc>
 8022766:	e000      	b.n	802276a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8022768:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 802276a:	687b      	ldr	r3, [r7, #4]
 802276c:	2201      	movs	r2, #1
 802276e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8022772:	687b      	ldr	r3, [r7, #4]
 8022774:	2200      	movs	r2, #0
 8022776:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 802277a:	687b      	ldr	r3, [r7, #4]
 802277c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 802277e:	2b00      	cmp	r3, #0
 8022780:	d005      	beq.n	802278e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8022782:	687b      	ldr	r3, [r7, #4]
 8022784:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8022786:	6878      	ldr	r0, [r7, #4]
 8022788:	4798      	blx	r3
 802278a:	e000      	b.n	802278e <HAL_DMA_IRQHandler+0x30e>
        return;
 802278c:	bf00      	nop
    }
  }
}
 802278e:	3718      	adds	r7, #24
 8022790:	46bd      	mov	sp, r7
 8022792:	bd80      	pop	{r7, pc}

08022794 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8022794:	b480      	push	{r7}
 8022796:	b083      	sub	sp, #12
 8022798:	af00      	add	r7, sp, #0
 802279a:	6078      	str	r0, [r7, #4]
  return hdma->State;
 802279c:	687b      	ldr	r3, [r7, #4]
 802279e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80227a2:	b2db      	uxtb	r3, r3
}
 80227a4:	4618      	mov	r0, r3
 80227a6:	370c      	adds	r7, #12
 80227a8:	46bd      	mov	sp, r7
 80227aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80227ae:	4770      	bx	lr

080227b0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80227b0:	b480      	push	{r7}
 80227b2:	b085      	sub	sp, #20
 80227b4:	af00      	add	r7, sp, #0
 80227b6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80227b8:	687b      	ldr	r3, [r7, #4]
 80227ba:	681b      	ldr	r3, [r3, #0]
 80227bc:	b2db      	uxtb	r3, r3
 80227be:	3b10      	subs	r3, #16
 80227c0:	4a13      	ldr	r2, [pc, #76]	; (8022810 <DMA_CalcBaseAndBitshift+0x60>)
 80227c2:	fba2 2303 	umull	r2, r3, r2, r3
 80227c6:	091b      	lsrs	r3, r3, #4
 80227c8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80227ca:	4a12      	ldr	r2, [pc, #72]	; (8022814 <DMA_CalcBaseAndBitshift+0x64>)
 80227cc:	68fb      	ldr	r3, [r7, #12]
 80227ce:	4413      	add	r3, r2
 80227d0:	781b      	ldrb	r3, [r3, #0]
 80227d2:	461a      	mov	r2, r3
 80227d4:	687b      	ldr	r3, [r7, #4]
 80227d6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80227d8:	68fb      	ldr	r3, [r7, #12]
 80227da:	2b03      	cmp	r3, #3
 80227dc:	d908      	bls.n	80227f0 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80227de:	687b      	ldr	r3, [r7, #4]
 80227e0:	681b      	ldr	r3, [r3, #0]
 80227e2:	461a      	mov	r2, r3
 80227e4:	4b0c      	ldr	r3, [pc, #48]	; (8022818 <DMA_CalcBaseAndBitshift+0x68>)
 80227e6:	4013      	ands	r3, r2
 80227e8:	1d1a      	adds	r2, r3, #4
 80227ea:	687b      	ldr	r3, [r7, #4]
 80227ec:	659a      	str	r2, [r3, #88]	; 0x58
 80227ee:	e006      	b.n	80227fe <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80227f0:	687b      	ldr	r3, [r7, #4]
 80227f2:	681b      	ldr	r3, [r3, #0]
 80227f4:	461a      	mov	r2, r3
 80227f6:	4b08      	ldr	r3, [pc, #32]	; (8022818 <DMA_CalcBaseAndBitshift+0x68>)
 80227f8:	4013      	ands	r3, r2
 80227fa:	687a      	ldr	r2, [r7, #4]
 80227fc:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80227fe:	687b      	ldr	r3, [r7, #4]
 8022800:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8022802:	4618      	mov	r0, r3
 8022804:	3714      	adds	r7, #20
 8022806:	46bd      	mov	sp, r7
 8022808:	f85d 7b04 	ldr.w	r7, [sp], #4
 802280c:	4770      	bx	lr
 802280e:	bf00      	nop
 8022810:	aaaaaaab 	.word	0xaaaaaaab
 8022814:	080379e8 	.word	0x080379e8
 8022818:	fffffc00 	.word	0xfffffc00

0802281c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 802281c:	b480      	push	{r7}
 802281e:	b085      	sub	sp, #20
 8022820:	af00      	add	r7, sp, #0
 8022822:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8022824:	2300      	movs	r3, #0
 8022826:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8022828:	687b      	ldr	r3, [r7, #4]
 802282a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802282c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 802282e:	687b      	ldr	r3, [r7, #4]
 8022830:	699b      	ldr	r3, [r3, #24]
 8022832:	2b00      	cmp	r3, #0
 8022834:	d11f      	bne.n	8022876 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8022836:	68bb      	ldr	r3, [r7, #8]
 8022838:	2b03      	cmp	r3, #3
 802283a:	d856      	bhi.n	80228ea <DMA_CheckFifoParam+0xce>
 802283c:	a201      	add	r2, pc, #4	; (adr r2, 8022844 <DMA_CheckFifoParam+0x28>)
 802283e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8022842:	bf00      	nop
 8022844:	08022855 	.word	0x08022855
 8022848:	08022867 	.word	0x08022867
 802284c:	08022855 	.word	0x08022855
 8022850:	080228eb 	.word	0x080228eb
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8022854:	687b      	ldr	r3, [r7, #4]
 8022856:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8022858:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 802285c:	2b00      	cmp	r3, #0
 802285e:	d046      	beq.n	80228ee <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8022860:	2301      	movs	r3, #1
 8022862:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8022864:	e043      	b.n	80228ee <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8022866:	687b      	ldr	r3, [r7, #4]
 8022868:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802286a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 802286e:	d140      	bne.n	80228f2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8022870:	2301      	movs	r3, #1
 8022872:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8022874:	e03d      	b.n	80228f2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8022876:	687b      	ldr	r3, [r7, #4]
 8022878:	699b      	ldr	r3, [r3, #24]
 802287a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 802287e:	d121      	bne.n	80228c4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8022880:	68bb      	ldr	r3, [r7, #8]
 8022882:	2b03      	cmp	r3, #3
 8022884:	d837      	bhi.n	80228f6 <DMA_CheckFifoParam+0xda>
 8022886:	a201      	add	r2, pc, #4	; (adr r2, 802288c <DMA_CheckFifoParam+0x70>)
 8022888:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802288c:	0802289d 	.word	0x0802289d
 8022890:	080228a3 	.word	0x080228a3
 8022894:	0802289d 	.word	0x0802289d
 8022898:	080228b5 	.word	0x080228b5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 802289c:	2301      	movs	r3, #1
 802289e:	73fb      	strb	r3, [r7, #15]
      break;
 80228a0:	e030      	b.n	8022904 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80228a2:	687b      	ldr	r3, [r7, #4]
 80228a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80228a6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80228aa:	2b00      	cmp	r3, #0
 80228ac:	d025      	beq.n	80228fa <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80228ae:	2301      	movs	r3, #1
 80228b0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80228b2:	e022      	b.n	80228fa <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80228b4:	687b      	ldr	r3, [r7, #4]
 80228b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80228b8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80228bc:	d11f      	bne.n	80228fe <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80228be:	2301      	movs	r3, #1
 80228c0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80228c2:	e01c      	b.n	80228fe <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80228c4:	68bb      	ldr	r3, [r7, #8]
 80228c6:	2b02      	cmp	r3, #2
 80228c8:	d903      	bls.n	80228d2 <DMA_CheckFifoParam+0xb6>
 80228ca:	68bb      	ldr	r3, [r7, #8]
 80228cc:	2b03      	cmp	r3, #3
 80228ce:	d003      	beq.n	80228d8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80228d0:	e018      	b.n	8022904 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80228d2:	2301      	movs	r3, #1
 80228d4:	73fb      	strb	r3, [r7, #15]
      break;
 80228d6:	e015      	b.n	8022904 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80228d8:	687b      	ldr	r3, [r7, #4]
 80228da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80228dc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80228e0:	2b00      	cmp	r3, #0
 80228e2:	d00e      	beq.n	8022902 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80228e4:	2301      	movs	r3, #1
 80228e6:	73fb      	strb	r3, [r7, #15]
      break;
 80228e8:	e00b      	b.n	8022902 <DMA_CheckFifoParam+0xe6>
      break;
 80228ea:	bf00      	nop
 80228ec:	e00a      	b.n	8022904 <DMA_CheckFifoParam+0xe8>
      break;
 80228ee:	bf00      	nop
 80228f0:	e008      	b.n	8022904 <DMA_CheckFifoParam+0xe8>
      break;
 80228f2:	bf00      	nop
 80228f4:	e006      	b.n	8022904 <DMA_CheckFifoParam+0xe8>
      break;
 80228f6:	bf00      	nop
 80228f8:	e004      	b.n	8022904 <DMA_CheckFifoParam+0xe8>
      break;
 80228fa:	bf00      	nop
 80228fc:	e002      	b.n	8022904 <DMA_CheckFifoParam+0xe8>
      break;   
 80228fe:	bf00      	nop
 8022900:	e000      	b.n	8022904 <DMA_CheckFifoParam+0xe8>
      break;
 8022902:	bf00      	nop
    }
  } 
  
  return status; 
 8022904:	7bfb      	ldrb	r3, [r7, #15]
}
 8022906:	4618      	mov	r0, r3
 8022908:	3714      	adds	r7, #20
 802290a:	46bd      	mov	sp, r7
 802290c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022910:	4770      	bx	lr
 8022912:	bf00      	nop

08022914 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8022914:	b480      	push	{r7}
 8022916:	b089      	sub	sp, #36	; 0x24
 8022918:	af00      	add	r7, sp, #0
 802291a:	6078      	str	r0, [r7, #4]
 802291c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 802291e:	2300      	movs	r3, #0
 8022920:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8022922:	2300      	movs	r3, #0
 8022924:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8022926:	2300      	movs	r3, #0
 8022928:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 802292a:	2300      	movs	r3, #0
 802292c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 802292e:	2300      	movs	r3, #0
 8022930:	61fb      	str	r3, [r7, #28]
 8022932:	e169      	b.n	8022c08 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8022934:	2201      	movs	r2, #1
 8022936:	69fb      	ldr	r3, [r7, #28]
 8022938:	fa02 f303 	lsl.w	r3, r2, r3
 802293c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 802293e:	683b      	ldr	r3, [r7, #0]
 8022940:	681b      	ldr	r3, [r3, #0]
 8022942:	697a      	ldr	r2, [r7, #20]
 8022944:	4013      	ands	r3, r2
 8022946:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8022948:	693a      	ldr	r2, [r7, #16]
 802294a:	697b      	ldr	r3, [r7, #20]
 802294c:	429a      	cmp	r2, r3
 802294e:	f040 8158 	bne.w	8022c02 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8022952:	683b      	ldr	r3, [r7, #0]
 8022954:	685b      	ldr	r3, [r3, #4]
 8022956:	f003 0303 	and.w	r3, r3, #3
 802295a:	2b01      	cmp	r3, #1
 802295c:	d005      	beq.n	802296a <HAL_GPIO_Init+0x56>
 802295e:	683b      	ldr	r3, [r7, #0]
 8022960:	685b      	ldr	r3, [r3, #4]
 8022962:	f003 0303 	and.w	r3, r3, #3
 8022966:	2b02      	cmp	r3, #2
 8022968:	d130      	bne.n	80229cc <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 802296a:	687b      	ldr	r3, [r7, #4]
 802296c:	689b      	ldr	r3, [r3, #8]
 802296e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8022970:	69fb      	ldr	r3, [r7, #28]
 8022972:	005b      	lsls	r3, r3, #1
 8022974:	2203      	movs	r2, #3
 8022976:	fa02 f303 	lsl.w	r3, r2, r3
 802297a:	43db      	mvns	r3, r3
 802297c:	69ba      	ldr	r2, [r7, #24]
 802297e:	4013      	ands	r3, r2
 8022980:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8022982:	683b      	ldr	r3, [r7, #0]
 8022984:	68da      	ldr	r2, [r3, #12]
 8022986:	69fb      	ldr	r3, [r7, #28]
 8022988:	005b      	lsls	r3, r3, #1
 802298a:	fa02 f303 	lsl.w	r3, r2, r3
 802298e:	69ba      	ldr	r2, [r7, #24]
 8022990:	4313      	orrs	r3, r2
 8022992:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8022994:	687b      	ldr	r3, [r7, #4]
 8022996:	69ba      	ldr	r2, [r7, #24]
 8022998:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 802299a:	687b      	ldr	r3, [r7, #4]
 802299c:	685b      	ldr	r3, [r3, #4]
 802299e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80229a0:	2201      	movs	r2, #1
 80229a2:	69fb      	ldr	r3, [r7, #28]
 80229a4:	fa02 f303 	lsl.w	r3, r2, r3
 80229a8:	43db      	mvns	r3, r3
 80229aa:	69ba      	ldr	r2, [r7, #24]
 80229ac:	4013      	ands	r3, r2
 80229ae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80229b0:	683b      	ldr	r3, [r7, #0]
 80229b2:	685b      	ldr	r3, [r3, #4]
 80229b4:	091b      	lsrs	r3, r3, #4
 80229b6:	f003 0201 	and.w	r2, r3, #1
 80229ba:	69fb      	ldr	r3, [r7, #28]
 80229bc:	fa02 f303 	lsl.w	r3, r2, r3
 80229c0:	69ba      	ldr	r2, [r7, #24]
 80229c2:	4313      	orrs	r3, r2
 80229c4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80229c6:	687b      	ldr	r3, [r7, #4]
 80229c8:	69ba      	ldr	r2, [r7, #24]
 80229ca:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80229cc:	683b      	ldr	r3, [r7, #0]
 80229ce:	685b      	ldr	r3, [r3, #4]
 80229d0:	f003 0303 	and.w	r3, r3, #3
 80229d4:	2b03      	cmp	r3, #3
 80229d6:	d017      	beq.n	8022a08 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80229d8:	687b      	ldr	r3, [r7, #4]
 80229da:	68db      	ldr	r3, [r3, #12]
 80229dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80229de:	69fb      	ldr	r3, [r7, #28]
 80229e0:	005b      	lsls	r3, r3, #1
 80229e2:	2203      	movs	r2, #3
 80229e4:	fa02 f303 	lsl.w	r3, r2, r3
 80229e8:	43db      	mvns	r3, r3
 80229ea:	69ba      	ldr	r2, [r7, #24]
 80229ec:	4013      	ands	r3, r2
 80229ee:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80229f0:	683b      	ldr	r3, [r7, #0]
 80229f2:	689a      	ldr	r2, [r3, #8]
 80229f4:	69fb      	ldr	r3, [r7, #28]
 80229f6:	005b      	lsls	r3, r3, #1
 80229f8:	fa02 f303 	lsl.w	r3, r2, r3
 80229fc:	69ba      	ldr	r2, [r7, #24]
 80229fe:	4313      	orrs	r3, r2
 8022a00:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8022a02:	687b      	ldr	r3, [r7, #4]
 8022a04:	69ba      	ldr	r2, [r7, #24]
 8022a06:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8022a08:	683b      	ldr	r3, [r7, #0]
 8022a0a:	685b      	ldr	r3, [r3, #4]
 8022a0c:	f003 0303 	and.w	r3, r3, #3
 8022a10:	2b02      	cmp	r3, #2
 8022a12:	d123      	bne.n	8022a5c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8022a14:	69fb      	ldr	r3, [r7, #28]
 8022a16:	08da      	lsrs	r2, r3, #3
 8022a18:	687b      	ldr	r3, [r7, #4]
 8022a1a:	3208      	adds	r2, #8
 8022a1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8022a20:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8022a22:	69fb      	ldr	r3, [r7, #28]
 8022a24:	f003 0307 	and.w	r3, r3, #7
 8022a28:	009b      	lsls	r3, r3, #2
 8022a2a:	220f      	movs	r2, #15
 8022a2c:	fa02 f303 	lsl.w	r3, r2, r3
 8022a30:	43db      	mvns	r3, r3
 8022a32:	69ba      	ldr	r2, [r7, #24]
 8022a34:	4013      	ands	r3, r2
 8022a36:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8022a38:	683b      	ldr	r3, [r7, #0]
 8022a3a:	691a      	ldr	r2, [r3, #16]
 8022a3c:	69fb      	ldr	r3, [r7, #28]
 8022a3e:	f003 0307 	and.w	r3, r3, #7
 8022a42:	009b      	lsls	r3, r3, #2
 8022a44:	fa02 f303 	lsl.w	r3, r2, r3
 8022a48:	69ba      	ldr	r2, [r7, #24]
 8022a4a:	4313      	orrs	r3, r2
 8022a4c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8022a4e:	69fb      	ldr	r3, [r7, #28]
 8022a50:	08da      	lsrs	r2, r3, #3
 8022a52:	687b      	ldr	r3, [r7, #4]
 8022a54:	3208      	adds	r2, #8
 8022a56:	69b9      	ldr	r1, [r7, #24]
 8022a58:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8022a5c:	687b      	ldr	r3, [r7, #4]
 8022a5e:	681b      	ldr	r3, [r3, #0]
 8022a60:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8022a62:	69fb      	ldr	r3, [r7, #28]
 8022a64:	005b      	lsls	r3, r3, #1
 8022a66:	2203      	movs	r2, #3
 8022a68:	fa02 f303 	lsl.w	r3, r2, r3
 8022a6c:	43db      	mvns	r3, r3
 8022a6e:	69ba      	ldr	r2, [r7, #24]
 8022a70:	4013      	ands	r3, r2
 8022a72:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8022a74:	683b      	ldr	r3, [r7, #0]
 8022a76:	685b      	ldr	r3, [r3, #4]
 8022a78:	f003 0203 	and.w	r2, r3, #3
 8022a7c:	69fb      	ldr	r3, [r7, #28]
 8022a7e:	005b      	lsls	r3, r3, #1
 8022a80:	fa02 f303 	lsl.w	r3, r2, r3
 8022a84:	69ba      	ldr	r2, [r7, #24]
 8022a86:	4313      	orrs	r3, r2
 8022a88:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8022a8a:	687b      	ldr	r3, [r7, #4]
 8022a8c:	69ba      	ldr	r2, [r7, #24]
 8022a8e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8022a90:	683b      	ldr	r3, [r7, #0]
 8022a92:	685b      	ldr	r3, [r3, #4]
 8022a94:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8022a98:	2b00      	cmp	r3, #0
 8022a9a:	f000 80b2 	beq.w	8022c02 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8022a9e:	4b60      	ldr	r3, [pc, #384]	; (8022c20 <HAL_GPIO_Init+0x30c>)
 8022aa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8022aa2:	4a5f      	ldr	r2, [pc, #380]	; (8022c20 <HAL_GPIO_Init+0x30c>)
 8022aa4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8022aa8:	6453      	str	r3, [r2, #68]	; 0x44
 8022aaa:	4b5d      	ldr	r3, [pc, #372]	; (8022c20 <HAL_GPIO_Init+0x30c>)
 8022aac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8022aae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8022ab2:	60fb      	str	r3, [r7, #12]
 8022ab4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8022ab6:	4a5b      	ldr	r2, [pc, #364]	; (8022c24 <HAL_GPIO_Init+0x310>)
 8022ab8:	69fb      	ldr	r3, [r7, #28]
 8022aba:	089b      	lsrs	r3, r3, #2
 8022abc:	3302      	adds	r3, #2
 8022abe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8022ac2:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8022ac4:	69fb      	ldr	r3, [r7, #28]
 8022ac6:	f003 0303 	and.w	r3, r3, #3
 8022aca:	009b      	lsls	r3, r3, #2
 8022acc:	220f      	movs	r2, #15
 8022ace:	fa02 f303 	lsl.w	r3, r2, r3
 8022ad2:	43db      	mvns	r3, r3
 8022ad4:	69ba      	ldr	r2, [r7, #24]
 8022ad6:	4013      	ands	r3, r2
 8022ad8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8022ada:	687b      	ldr	r3, [r7, #4]
 8022adc:	4a52      	ldr	r2, [pc, #328]	; (8022c28 <HAL_GPIO_Init+0x314>)
 8022ade:	4293      	cmp	r3, r2
 8022ae0:	d02b      	beq.n	8022b3a <HAL_GPIO_Init+0x226>
 8022ae2:	687b      	ldr	r3, [r7, #4]
 8022ae4:	4a51      	ldr	r2, [pc, #324]	; (8022c2c <HAL_GPIO_Init+0x318>)
 8022ae6:	4293      	cmp	r3, r2
 8022ae8:	d025      	beq.n	8022b36 <HAL_GPIO_Init+0x222>
 8022aea:	687b      	ldr	r3, [r7, #4]
 8022aec:	4a50      	ldr	r2, [pc, #320]	; (8022c30 <HAL_GPIO_Init+0x31c>)
 8022aee:	4293      	cmp	r3, r2
 8022af0:	d01f      	beq.n	8022b32 <HAL_GPIO_Init+0x21e>
 8022af2:	687b      	ldr	r3, [r7, #4]
 8022af4:	4a4f      	ldr	r2, [pc, #316]	; (8022c34 <HAL_GPIO_Init+0x320>)
 8022af6:	4293      	cmp	r3, r2
 8022af8:	d019      	beq.n	8022b2e <HAL_GPIO_Init+0x21a>
 8022afa:	687b      	ldr	r3, [r7, #4]
 8022afc:	4a4e      	ldr	r2, [pc, #312]	; (8022c38 <HAL_GPIO_Init+0x324>)
 8022afe:	4293      	cmp	r3, r2
 8022b00:	d013      	beq.n	8022b2a <HAL_GPIO_Init+0x216>
 8022b02:	687b      	ldr	r3, [r7, #4]
 8022b04:	4a4d      	ldr	r2, [pc, #308]	; (8022c3c <HAL_GPIO_Init+0x328>)
 8022b06:	4293      	cmp	r3, r2
 8022b08:	d00d      	beq.n	8022b26 <HAL_GPIO_Init+0x212>
 8022b0a:	687b      	ldr	r3, [r7, #4]
 8022b0c:	4a4c      	ldr	r2, [pc, #304]	; (8022c40 <HAL_GPIO_Init+0x32c>)
 8022b0e:	4293      	cmp	r3, r2
 8022b10:	d007      	beq.n	8022b22 <HAL_GPIO_Init+0x20e>
 8022b12:	687b      	ldr	r3, [r7, #4]
 8022b14:	4a4b      	ldr	r2, [pc, #300]	; (8022c44 <HAL_GPIO_Init+0x330>)
 8022b16:	4293      	cmp	r3, r2
 8022b18:	d101      	bne.n	8022b1e <HAL_GPIO_Init+0x20a>
 8022b1a:	2307      	movs	r3, #7
 8022b1c:	e00e      	b.n	8022b3c <HAL_GPIO_Init+0x228>
 8022b1e:	2308      	movs	r3, #8
 8022b20:	e00c      	b.n	8022b3c <HAL_GPIO_Init+0x228>
 8022b22:	2306      	movs	r3, #6
 8022b24:	e00a      	b.n	8022b3c <HAL_GPIO_Init+0x228>
 8022b26:	2305      	movs	r3, #5
 8022b28:	e008      	b.n	8022b3c <HAL_GPIO_Init+0x228>
 8022b2a:	2304      	movs	r3, #4
 8022b2c:	e006      	b.n	8022b3c <HAL_GPIO_Init+0x228>
 8022b2e:	2303      	movs	r3, #3
 8022b30:	e004      	b.n	8022b3c <HAL_GPIO_Init+0x228>
 8022b32:	2302      	movs	r3, #2
 8022b34:	e002      	b.n	8022b3c <HAL_GPIO_Init+0x228>
 8022b36:	2301      	movs	r3, #1
 8022b38:	e000      	b.n	8022b3c <HAL_GPIO_Init+0x228>
 8022b3a:	2300      	movs	r3, #0
 8022b3c:	69fa      	ldr	r2, [r7, #28]
 8022b3e:	f002 0203 	and.w	r2, r2, #3
 8022b42:	0092      	lsls	r2, r2, #2
 8022b44:	4093      	lsls	r3, r2
 8022b46:	69ba      	ldr	r2, [r7, #24]
 8022b48:	4313      	orrs	r3, r2
 8022b4a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8022b4c:	4935      	ldr	r1, [pc, #212]	; (8022c24 <HAL_GPIO_Init+0x310>)
 8022b4e:	69fb      	ldr	r3, [r7, #28]
 8022b50:	089b      	lsrs	r3, r3, #2
 8022b52:	3302      	adds	r3, #2
 8022b54:	69ba      	ldr	r2, [r7, #24]
 8022b56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8022b5a:	4b3b      	ldr	r3, [pc, #236]	; (8022c48 <HAL_GPIO_Init+0x334>)
 8022b5c:	689b      	ldr	r3, [r3, #8]
 8022b5e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8022b60:	693b      	ldr	r3, [r7, #16]
 8022b62:	43db      	mvns	r3, r3
 8022b64:	69ba      	ldr	r2, [r7, #24]
 8022b66:	4013      	ands	r3, r2
 8022b68:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8022b6a:	683b      	ldr	r3, [r7, #0]
 8022b6c:	685b      	ldr	r3, [r3, #4]
 8022b6e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8022b72:	2b00      	cmp	r3, #0
 8022b74:	d003      	beq.n	8022b7e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8022b76:	69ba      	ldr	r2, [r7, #24]
 8022b78:	693b      	ldr	r3, [r7, #16]
 8022b7a:	4313      	orrs	r3, r2
 8022b7c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8022b7e:	4a32      	ldr	r2, [pc, #200]	; (8022c48 <HAL_GPIO_Init+0x334>)
 8022b80:	69bb      	ldr	r3, [r7, #24]
 8022b82:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8022b84:	4b30      	ldr	r3, [pc, #192]	; (8022c48 <HAL_GPIO_Init+0x334>)
 8022b86:	68db      	ldr	r3, [r3, #12]
 8022b88:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8022b8a:	693b      	ldr	r3, [r7, #16]
 8022b8c:	43db      	mvns	r3, r3
 8022b8e:	69ba      	ldr	r2, [r7, #24]
 8022b90:	4013      	ands	r3, r2
 8022b92:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8022b94:	683b      	ldr	r3, [r7, #0]
 8022b96:	685b      	ldr	r3, [r3, #4]
 8022b98:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8022b9c:	2b00      	cmp	r3, #0
 8022b9e:	d003      	beq.n	8022ba8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8022ba0:	69ba      	ldr	r2, [r7, #24]
 8022ba2:	693b      	ldr	r3, [r7, #16]
 8022ba4:	4313      	orrs	r3, r2
 8022ba6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8022ba8:	4a27      	ldr	r2, [pc, #156]	; (8022c48 <HAL_GPIO_Init+0x334>)
 8022baa:	69bb      	ldr	r3, [r7, #24]
 8022bac:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8022bae:	4b26      	ldr	r3, [pc, #152]	; (8022c48 <HAL_GPIO_Init+0x334>)
 8022bb0:	685b      	ldr	r3, [r3, #4]
 8022bb2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8022bb4:	693b      	ldr	r3, [r7, #16]
 8022bb6:	43db      	mvns	r3, r3
 8022bb8:	69ba      	ldr	r2, [r7, #24]
 8022bba:	4013      	ands	r3, r2
 8022bbc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8022bbe:	683b      	ldr	r3, [r7, #0]
 8022bc0:	685b      	ldr	r3, [r3, #4]
 8022bc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8022bc6:	2b00      	cmp	r3, #0
 8022bc8:	d003      	beq.n	8022bd2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8022bca:	69ba      	ldr	r2, [r7, #24]
 8022bcc:	693b      	ldr	r3, [r7, #16]
 8022bce:	4313      	orrs	r3, r2
 8022bd0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8022bd2:	4a1d      	ldr	r2, [pc, #116]	; (8022c48 <HAL_GPIO_Init+0x334>)
 8022bd4:	69bb      	ldr	r3, [r7, #24]
 8022bd6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8022bd8:	4b1b      	ldr	r3, [pc, #108]	; (8022c48 <HAL_GPIO_Init+0x334>)
 8022bda:	681b      	ldr	r3, [r3, #0]
 8022bdc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8022bde:	693b      	ldr	r3, [r7, #16]
 8022be0:	43db      	mvns	r3, r3
 8022be2:	69ba      	ldr	r2, [r7, #24]
 8022be4:	4013      	ands	r3, r2
 8022be6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8022be8:	683b      	ldr	r3, [r7, #0]
 8022bea:	685b      	ldr	r3, [r3, #4]
 8022bec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8022bf0:	2b00      	cmp	r3, #0
 8022bf2:	d003      	beq.n	8022bfc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8022bf4:	69ba      	ldr	r2, [r7, #24]
 8022bf6:	693b      	ldr	r3, [r7, #16]
 8022bf8:	4313      	orrs	r3, r2
 8022bfa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8022bfc:	4a12      	ldr	r2, [pc, #72]	; (8022c48 <HAL_GPIO_Init+0x334>)
 8022bfe:	69bb      	ldr	r3, [r7, #24]
 8022c00:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8022c02:	69fb      	ldr	r3, [r7, #28]
 8022c04:	3301      	adds	r3, #1
 8022c06:	61fb      	str	r3, [r7, #28]
 8022c08:	69fb      	ldr	r3, [r7, #28]
 8022c0a:	2b0f      	cmp	r3, #15
 8022c0c:	f67f ae92 	bls.w	8022934 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8022c10:	bf00      	nop
 8022c12:	bf00      	nop
 8022c14:	3724      	adds	r7, #36	; 0x24
 8022c16:	46bd      	mov	sp, r7
 8022c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022c1c:	4770      	bx	lr
 8022c1e:	bf00      	nop
 8022c20:	40023800 	.word	0x40023800
 8022c24:	40013800 	.word	0x40013800
 8022c28:	40020000 	.word	0x40020000
 8022c2c:	40020400 	.word	0x40020400
 8022c30:	40020800 	.word	0x40020800
 8022c34:	40020c00 	.word	0x40020c00
 8022c38:	40021000 	.word	0x40021000
 8022c3c:	40021400 	.word	0x40021400
 8022c40:	40021800 	.word	0x40021800
 8022c44:	40021c00 	.word	0x40021c00
 8022c48:	40013c00 	.word	0x40013c00

08022c4c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8022c4c:	b480      	push	{r7}
 8022c4e:	b087      	sub	sp, #28
 8022c50:	af00      	add	r7, sp, #0
 8022c52:	6078      	str	r0, [r7, #4]
 8022c54:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00;
 8022c56:	2300      	movs	r3, #0
 8022c58:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00;
 8022c5a:	2300      	movs	r3, #0
 8022c5c:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00;
 8022c5e:	2300      	movs	r3, #0
 8022c60:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8022c62:	2300      	movs	r3, #0
 8022c64:	617b      	str	r3, [r7, #20]
 8022c66:	e0cd      	b.n	8022e04 <HAL_GPIO_DeInit+0x1b8>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8022c68:	2201      	movs	r2, #1
 8022c6a:	697b      	ldr	r3, [r7, #20]
 8022c6c:	fa02 f303 	lsl.w	r3, r2, r3
 8022c70:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8022c72:	683a      	ldr	r2, [r7, #0]
 8022c74:	693b      	ldr	r3, [r7, #16]
 8022c76:	4013      	ands	r3, r2
 8022c78:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8022c7a:	68fa      	ldr	r2, [r7, #12]
 8022c7c:	693b      	ldr	r3, [r7, #16]
 8022c7e:	429a      	cmp	r2, r3
 8022c80:	f040 80bd 	bne.w	8022dfe <HAL_GPIO_DeInit+0x1b2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2];
 8022c84:	4a65      	ldr	r2, [pc, #404]	; (8022e1c <HAL_GPIO_DeInit+0x1d0>)
 8022c86:	697b      	ldr	r3, [r7, #20]
 8022c88:	089b      	lsrs	r3, r3, #2
 8022c8a:	3302      	adds	r3, #2
 8022c8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8022c90:	60bb      	str	r3, [r7, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 8022c92:	697b      	ldr	r3, [r7, #20]
 8022c94:	f003 0303 	and.w	r3, r3, #3
 8022c98:	009b      	lsls	r3, r3, #2
 8022c9a:	220f      	movs	r2, #15
 8022c9c:	fa02 f303 	lsl.w	r3, r2, r3
 8022ca0:	68ba      	ldr	r2, [r7, #8]
 8022ca2:	4013      	ands	r3, r2
 8022ca4:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 8022ca6:	687b      	ldr	r3, [r7, #4]
 8022ca8:	4a5d      	ldr	r2, [pc, #372]	; (8022e20 <HAL_GPIO_DeInit+0x1d4>)
 8022caa:	4293      	cmp	r3, r2
 8022cac:	d02b      	beq.n	8022d06 <HAL_GPIO_DeInit+0xba>
 8022cae:	687b      	ldr	r3, [r7, #4]
 8022cb0:	4a5c      	ldr	r2, [pc, #368]	; (8022e24 <HAL_GPIO_DeInit+0x1d8>)
 8022cb2:	4293      	cmp	r3, r2
 8022cb4:	d025      	beq.n	8022d02 <HAL_GPIO_DeInit+0xb6>
 8022cb6:	687b      	ldr	r3, [r7, #4]
 8022cb8:	4a5b      	ldr	r2, [pc, #364]	; (8022e28 <HAL_GPIO_DeInit+0x1dc>)
 8022cba:	4293      	cmp	r3, r2
 8022cbc:	d01f      	beq.n	8022cfe <HAL_GPIO_DeInit+0xb2>
 8022cbe:	687b      	ldr	r3, [r7, #4]
 8022cc0:	4a5a      	ldr	r2, [pc, #360]	; (8022e2c <HAL_GPIO_DeInit+0x1e0>)
 8022cc2:	4293      	cmp	r3, r2
 8022cc4:	d019      	beq.n	8022cfa <HAL_GPIO_DeInit+0xae>
 8022cc6:	687b      	ldr	r3, [r7, #4]
 8022cc8:	4a59      	ldr	r2, [pc, #356]	; (8022e30 <HAL_GPIO_DeInit+0x1e4>)
 8022cca:	4293      	cmp	r3, r2
 8022ccc:	d013      	beq.n	8022cf6 <HAL_GPIO_DeInit+0xaa>
 8022cce:	687b      	ldr	r3, [r7, #4]
 8022cd0:	4a58      	ldr	r2, [pc, #352]	; (8022e34 <HAL_GPIO_DeInit+0x1e8>)
 8022cd2:	4293      	cmp	r3, r2
 8022cd4:	d00d      	beq.n	8022cf2 <HAL_GPIO_DeInit+0xa6>
 8022cd6:	687b      	ldr	r3, [r7, #4]
 8022cd8:	4a57      	ldr	r2, [pc, #348]	; (8022e38 <HAL_GPIO_DeInit+0x1ec>)
 8022cda:	4293      	cmp	r3, r2
 8022cdc:	d007      	beq.n	8022cee <HAL_GPIO_DeInit+0xa2>
 8022cde:	687b      	ldr	r3, [r7, #4]
 8022ce0:	4a56      	ldr	r2, [pc, #344]	; (8022e3c <HAL_GPIO_DeInit+0x1f0>)
 8022ce2:	4293      	cmp	r3, r2
 8022ce4:	d101      	bne.n	8022cea <HAL_GPIO_DeInit+0x9e>
 8022ce6:	2307      	movs	r3, #7
 8022ce8:	e00e      	b.n	8022d08 <HAL_GPIO_DeInit+0xbc>
 8022cea:	2308      	movs	r3, #8
 8022cec:	e00c      	b.n	8022d08 <HAL_GPIO_DeInit+0xbc>
 8022cee:	2306      	movs	r3, #6
 8022cf0:	e00a      	b.n	8022d08 <HAL_GPIO_DeInit+0xbc>
 8022cf2:	2305      	movs	r3, #5
 8022cf4:	e008      	b.n	8022d08 <HAL_GPIO_DeInit+0xbc>
 8022cf6:	2304      	movs	r3, #4
 8022cf8:	e006      	b.n	8022d08 <HAL_GPIO_DeInit+0xbc>
 8022cfa:	2303      	movs	r3, #3
 8022cfc:	e004      	b.n	8022d08 <HAL_GPIO_DeInit+0xbc>
 8022cfe:	2302      	movs	r3, #2
 8022d00:	e002      	b.n	8022d08 <HAL_GPIO_DeInit+0xbc>
 8022d02:	2301      	movs	r3, #1
 8022d04:	e000      	b.n	8022d08 <HAL_GPIO_DeInit+0xbc>
 8022d06:	2300      	movs	r3, #0
 8022d08:	697a      	ldr	r2, [r7, #20]
 8022d0a:	f002 0203 	and.w	r2, r2, #3
 8022d0e:	0092      	lsls	r2, r2, #2
 8022d10:	4093      	lsls	r3, r2
 8022d12:	68ba      	ldr	r2, [r7, #8]
 8022d14:	429a      	cmp	r2, r3
 8022d16:	d132      	bne.n	8022d7e <HAL_GPIO_DeInit+0x132>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8022d18:	4b49      	ldr	r3, [pc, #292]	; (8022e40 <HAL_GPIO_DeInit+0x1f4>)
 8022d1a:	681a      	ldr	r2, [r3, #0]
 8022d1c:	68fb      	ldr	r3, [r7, #12]
 8022d1e:	43db      	mvns	r3, r3
 8022d20:	4947      	ldr	r1, [pc, #284]	; (8022e40 <HAL_GPIO_DeInit+0x1f4>)
 8022d22:	4013      	ands	r3, r2
 8022d24:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8022d26:	4b46      	ldr	r3, [pc, #280]	; (8022e40 <HAL_GPIO_DeInit+0x1f4>)
 8022d28:	685a      	ldr	r2, [r3, #4]
 8022d2a:	68fb      	ldr	r3, [r7, #12]
 8022d2c:	43db      	mvns	r3, r3
 8022d2e:	4944      	ldr	r1, [pc, #272]	; (8022e40 <HAL_GPIO_DeInit+0x1f4>)
 8022d30:	4013      	ands	r3, r2
 8022d32:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8022d34:	4b42      	ldr	r3, [pc, #264]	; (8022e40 <HAL_GPIO_DeInit+0x1f4>)
 8022d36:	68da      	ldr	r2, [r3, #12]
 8022d38:	68fb      	ldr	r3, [r7, #12]
 8022d3a:	43db      	mvns	r3, r3
 8022d3c:	4940      	ldr	r1, [pc, #256]	; (8022e40 <HAL_GPIO_DeInit+0x1f4>)
 8022d3e:	4013      	ands	r3, r2
 8022d40:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8022d42:	4b3f      	ldr	r3, [pc, #252]	; (8022e40 <HAL_GPIO_DeInit+0x1f4>)
 8022d44:	689a      	ldr	r2, [r3, #8]
 8022d46:	68fb      	ldr	r3, [r7, #12]
 8022d48:	43db      	mvns	r3, r3
 8022d4a:	493d      	ldr	r1, [pc, #244]	; (8022e40 <HAL_GPIO_DeInit+0x1f4>)
 8022d4c:	4013      	ands	r3, r2
 8022d4e:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
 8022d50:	697b      	ldr	r3, [r7, #20]
 8022d52:	f003 0303 	and.w	r3, r3, #3
 8022d56:	009b      	lsls	r3, r3, #2
 8022d58:	220f      	movs	r2, #15
 8022d5a:	fa02 f303 	lsl.w	r3, r2, r3
 8022d5e:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 8022d60:	4a2e      	ldr	r2, [pc, #184]	; (8022e1c <HAL_GPIO_DeInit+0x1d0>)
 8022d62:	697b      	ldr	r3, [r7, #20]
 8022d64:	089b      	lsrs	r3, r3, #2
 8022d66:	3302      	adds	r3, #2
 8022d68:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8022d6c:	68bb      	ldr	r3, [r7, #8]
 8022d6e:	43da      	mvns	r2, r3
 8022d70:	482a      	ldr	r0, [pc, #168]	; (8022e1c <HAL_GPIO_DeInit+0x1d0>)
 8022d72:	697b      	ldr	r3, [r7, #20]
 8022d74:	089b      	lsrs	r3, r3, #2
 8022d76:	400a      	ands	r2, r1
 8022d78:	3302      	adds	r3, #2
 8022d7a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 8022d7e:	687b      	ldr	r3, [r7, #4]
 8022d80:	681a      	ldr	r2, [r3, #0]
 8022d82:	697b      	ldr	r3, [r7, #20]
 8022d84:	005b      	lsls	r3, r3, #1
 8022d86:	2103      	movs	r1, #3
 8022d88:	fa01 f303 	lsl.w	r3, r1, r3
 8022d8c:	43db      	mvns	r3, r3
 8022d8e:	401a      	ands	r2, r3
 8022d90:	687b      	ldr	r3, [r7, #4]
 8022d92:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8022d94:	697b      	ldr	r3, [r7, #20]
 8022d96:	08da      	lsrs	r2, r3, #3
 8022d98:	687b      	ldr	r3, [r7, #4]
 8022d9a:	3208      	adds	r2, #8
 8022d9c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8022da0:	697b      	ldr	r3, [r7, #20]
 8022da2:	f003 0307 	and.w	r3, r3, #7
 8022da6:	009b      	lsls	r3, r3, #2
 8022da8:	220f      	movs	r2, #15
 8022daa:	fa02 f303 	lsl.w	r3, r2, r3
 8022dae:	43db      	mvns	r3, r3
 8022db0:	697a      	ldr	r2, [r7, #20]
 8022db2:	08d2      	lsrs	r2, r2, #3
 8022db4:	4019      	ands	r1, r3
 8022db6:	687b      	ldr	r3, [r7, #4]
 8022db8:	3208      	adds	r2, #8
 8022dba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8022dbe:	687b      	ldr	r3, [r7, #4]
 8022dc0:	68da      	ldr	r2, [r3, #12]
 8022dc2:	697b      	ldr	r3, [r7, #20]
 8022dc4:	005b      	lsls	r3, r3, #1
 8022dc6:	2103      	movs	r1, #3
 8022dc8:	fa01 f303 	lsl.w	r3, r1, r3
 8022dcc:	43db      	mvns	r3, r3
 8022dce:	401a      	ands	r2, r3
 8022dd0:	687b      	ldr	r3, [r7, #4]
 8022dd2:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8022dd4:	687b      	ldr	r3, [r7, #4]
 8022dd6:	685a      	ldr	r2, [r3, #4]
 8022dd8:	2101      	movs	r1, #1
 8022dda:	697b      	ldr	r3, [r7, #20]
 8022ddc:	fa01 f303 	lsl.w	r3, r1, r3
 8022de0:	43db      	mvns	r3, r3
 8022de2:	401a      	ands	r2, r3
 8022de4:	687b      	ldr	r3, [r7, #4]
 8022de6:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8022de8:	687b      	ldr	r3, [r7, #4]
 8022dea:	689a      	ldr	r2, [r3, #8]
 8022dec:	697b      	ldr	r3, [r7, #20]
 8022dee:	005b      	lsls	r3, r3, #1
 8022df0:	2103      	movs	r1, #3
 8022df2:	fa01 f303 	lsl.w	r3, r1, r3
 8022df6:	43db      	mvns	r3, r3
 8022df8:	401a      	ands	r2, r3
 8022dfa:	687b      	ldr	r3, [r7, #4]
 8022dfc:	609a      	str	r2, [r3, #8]
  for(position = 0; position < GPIO_NUMBER; position++)
 8022dfe:	697b      	ldr	r3, [r7, #20]
 8022e00:	3301      	adds	r3, #1
 8022e02:	617b      	str	r3, [r7, #20]
 8022e04:	697b      	ldr	r3, [r7, #20]
 8022e06:	2b0f      	cmp	r3, #15
 8022e08:	f67f af2e 	bls.w	8022c68 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8022e0c:	bf00      	nop
 8022e0e:	bf00      	nop
 8022e10:	371c      	adds	r7, #28
 8022e12:	46bd      	mov	sp, r7
 8022e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022e18:	4770      	bx	lr
 8022e1a:	bf00      	nop
 8022e1c:	40013800 	.word	0x40013800
 8022e20:	40020000 	.word	0x40020000
 8022e24:	40020400 	.word	0x40020400
 8022e28:	40020800 	.word	0x40020800
 8022e2c:	40020c00 	.word	0x40020c00
 8022e30:	40021000 	.word	0x40021000
 8022e34:	40021400 	.word	0x40021400
 8022e38:	40021800 	.word	0x40021800
 8022e3c:	40021c00 	.word	0x40021c00
 8022e40:	40013c00 	.word	0x40013c00

08022e44 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8022e44:	b480      	push	{r7}
 8022e46:	b083      	sub	sp, #12
 8022e48:	af00      	add	r7, sp, #0
 8022e4a:	6078      	str	r0, [r7, #4]
 8022e4c:	460b      	mov	r3, r1
 8022e4e:	807b      	strh	r3, [r7, #2]
 8022e50:	4613      	mov	r3, r2
 8022e52:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8022e54:	787b      	ldrb	r3, [r7, #1]
 8022e56:	2b00      	cmp	r3, #0
 8022e58:	d003      	beq.n	8022e62 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8022e5a:	887a      	ldrh	r2, [r7, #2]
 8022e5c:	687b      	ldr	r3, [r7, #4]
 8022e5e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8022e60:	e003      	b.n	8022e6a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8022e62:	887b      	ldrh	r3, [r7, #2]
 8022e64:	041a      	lsls	r2, r3, #16
 8022e66:	687b      	ldr	r3, [r7, #4]
 8022e68:	619a      	str	r2, [r3, #24]
}
 8022e6a:	bf00      	nop
 8022e6c:	370c      	adds	r7, #12
 8022e6e:	46bd      	mov	sp, r7
 8022e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022e74:	4770      	bx	lr
	...

08022e78 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8022e78:	b580      	push	{r7, lr}
 8022e7a:	b082      	sub	sp, #8
 8022e7c:	af00      	add	r7, sp, #0
 8022e7e:	4603      	mov	r3, r0
 8022e80:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8022e82:	4b08      	ldr	r3, [pc, #32]	; (8022ea4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8022e84:	695a      	ldr	r2, [r3, #20]
 8022e86:	88fb      	ldrh	r3, [r7, #6]
 8022e88:	4013      	ands	r3, r2
 8022e8a:	2b00      	cmp	r3, #0
 8022e8c:	d006      	beq.n	8022e9c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8022e8e:	4a05      	ldr	r2, [pc, #20]	; (8022ea4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8022e90:	88fb      	ldrh	r3, [r7, #6]
 8022e92:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8022e94:	88fb      	ldrh	r3, [r7, #6]
 8022e96:	4618      	mov	r0, r3
 8022e98:	f7fe fd46 	bl	8021928 <HAL_GPIO_EXTI_Callback>
  }
}
 8022e9c:	bf00      	nop
 8022e9e:	3708      	adds	r7, #8
 8022ea0:	46bd      	mov	sp, r7
 8022ea2:	bd80      	pop	{r7, pc}
 8022ea4:	40013c00 	.word	0x40013c00

08022ea8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8022ea8:	b580      	push	{r7, lr}
 8022eaa:	b082      	sub	sp, #8
 8022eac:	af00      	add	r7, sp, #0
 8022eae:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8022eb0:	687b      	ldr	r3, [r7, #4]
 8022eb2:	2b00      	cmp	r3, #0
 8022eb4:	d101      	bne.n	8022eba <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8022eb6:	2301      	movs	r3, #1
 8022eb8:	e07f      	b.n	8022fba <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8022eba:	687b      	ldr	r3, [r7, #4]
 8022ebc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8022ec0:	b2db      	uxtb	r3, r3
 8022ec2:	2b00      	cmp	r3, #0
 8022ec4:	d106      	bne.n	8022ed4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8022ec6:	687b      	ldr	r3, [r7, #4]
 8022ec8:	2200      	movs	r2, #0
 8022eca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8022ece:	6878      	ldr	r0, [r7, #4]
 8022ed0:	f7fd fd04 	bl	80208dc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8022ed4:	687b      	ldr	r3, [r7, #4]
 8022ed6:	2224      	movs	r2, #36	; 0x24
 8022ed8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8022edc:	687b      	ldr	r3, [r7, #4]
 8022ede:	681b      	ldr	r3, [r3, #0]
 8022ee0:	681a      	ldr	r2, [r3, #0]
 8022ee2:	687b      	ldr	r3, [r7, #4]
 8022ee4:	681b      	ldr	r3, [r3, #0]
 8022ee6:	f022 0201 	bic.w	r2, r2, #1
 8022eea:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8022eec:	687b      	ldr	r3, [r7, #4]
 8022eee:	685a      	ldr	r2, [r3, #4]
 8022ef0:	687b      	ldr	r3, [r7, #4]
 8022ef2:	681b      	ldr	r3, [r3, #0]
 8022ef4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8022ef8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8022efa:	687b      	ldr	r3, [r7, #4]
 8022efc:	681b      	ldr	r3, [r3, #0]
 8022efe:	689a      	ldr	r2, [r3, #8]
 8022f00:	687b      	ldr	r3, [r7, #4]
 8022f02:	681b      	ldr	r3, [r3, #0]
 8022f04:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8022f08:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8022f0a:	687b      	ldr	r3, [r7, #4]
 8022f0c:	68db      	ldr	r3, [r3, #12]
 8022f0e:	2b01      	cmp	r3, #1
 8022f10:	d107      	bne.n	8022f22 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8022f12:	687b      	ldr	r3, [r7, #4]
 8022f14:	689a      	ldr	r2, [r3, #8]
 8022f16:	687b      	ldr	r3, [r7, #4]
 8022f18:	681b      	ldr	r3, [r3, #0]
 8022f1a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8022f1e:	609a      	str	r2, [r3, #8]
 8022f20:	e006      	b.n	8022f30 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8022f22:	687b      	ldr	r3, [r7, #4]
 8022f24:	689a      	ldr	r2, [r3, #8]
 8022f26:	687b      	ldr	r3, [r7, #4]
 8022f28:	681b      	ldr	r3, [r3, #0]
 8022f2a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8022f2e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8022f30:	687b      	ldr	r3, [r7, #4]
 8022f32:	68db      	ldr	r3, [r3, #12]
 8022f34:	2b02      	cmp	r3, #2
 8022f36:	d104      	bne.n	8022f42 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8022f38:	687b      	ldr	r3, [r7, #4]
 8022f3a:	681b      	ldr	r3, [r3, #0]
 8022f3c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8022f40:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8022f42:	687b      	ldr	r3, [r7, #4]
 8022f44:	681b      	ldr	r3, [r3, #0]
 8022f46:	6859      	ldr	r1, [r3, #4]
 8022f48:	687b      	ldr	r3, [r7, #4]
 8022f4a:	681a      	ldr	r2, [r3, #0]
 8022f4c:	4b1d      	ldr	r3, [pc, #116]	; (8022fc4 <HAL_I2C_Init+0x11c>)
 8022f4e:	430b      	orrs	r3, r1
 8022f50:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8022f52:	687b      	ldr	r3, [r7, #4]
 8022f54:	681b      	ldr	r3, [r3, #0]
 8022f56:	68da      	ldr	r2, [r3, #12]
 8022f58:	687b      	ldr	r3, [r7, #4]
 8022f5a:	681b      	ldr	r3, [r3, #0]
 8022f5c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8022f60:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8022f62:	687b      	ldr	r3, [r7, #4]
 8022f64:	691a      	ldr	r2, [r3, #16]
 8022f66:	687b      	ldr	r3, [r7, #4]
 8022f68:	695b      	ldr	r3, [r3, #20]
 8022f6a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8022f6e:	687b      	ldr	r3, [r7, #4]
 8022f70:	699b      	ldr	r3, [r3, #24]
 8022f72:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8022f74:	687b      	ldr	r3, [r7, #4]
 8022f76:	681b      	ldr	r3, [r3, #0]
 8022f78:	430a      	orrs	r2, r1
 8022f7a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8022f7c:	687b      	ldr	r3, [r7, #4]
 8022f7e:	69d9      	ldr	r1, [r3, #28]
 8022f80:	687b      	ldr	r3, [r7, #4]
 8022f82:	6a1a      	ldr	r2, [r3, #32]
 8022f84:	687b      	ldr	r3, [r7, #4]
 8022f86:	681b      	ldr	r3, [r3, #0]
 8022f88:	430a      	orrs	r2, r1
 8022f8a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8022f8c:	687b      	ldr	r3, [r7, #4]
 8022f8e:	681b      	ldr	r3, [r3, #0]
 8022f90:	681a      	ldr	r2, [r3, #0]
 8022f92:	687b      	ldr	r3, [r7, #4]
 8022f94:	681b      	ldr	r3, [r3, #0]
 8022f96:	f042 0201 	orr.w	r2, r2, #1
 8022f9a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8022f9c:	687b      	ldr	r3, [r7, #4]
 8022f9e:	2200      	movs	r2, #0
 8022fa0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8022fa2:	687b      	ldr	r3, [r7, #4]
 8022fa4:	2220      	movs	r2, #32
 8022fa6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8022faa:	687b      	ldr	r3, [r7, #4]
 8022fac:	2200      	movs	r2, #0
 8022fae:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8022fb0:	687b      	ldr	r3, [r7, #4]
 8022fb2:	2200      	movs	r2, #0
 8022fb4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8022fb8:	2300      	movs	r3, #0
}
 8022fba:	4618      	mov	r0, r3
 8022fbc:	3708      	adds	r7, #8
 8022fbe:	46bd      	mov	sp, r7
 8022fc0:	bd80      	pop	{r7, pc}
 8022fc2:	bf00      	nop
 8022fc4:	02008000 	.word	0x02008000

08022fc8 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8022fc8:	b580      	push	{r7, lr}
 8022fca:	b088      	sub	sp, #32
 8022fcc:	af02      	add	r7, sp, #8
 8022fce:	60f8      	str	r0, [r7, #12]
 8022fd0:	4608      	mov	r0, r1
 8022fd2:	4611      	mov	r1, r2
 8022fd4:	461a      	mov	r2, r3
 8022fd6:	4603      	mov	r3, r0
 8022fd8:	817b      	strh	r3, [r7, #10]
 8022fda:	460b      	mov	r3, r1
 8022fdc:	813b      	strh	r3, [r7, #8]
 8022fde:	4613      	mov	r3, r2
 8022fe0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8022fe2:	68fb      	ldr	r3, [r7, #12]
 8022fe4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8022fe8:	b2db      	uxtb	r3, r3
 8022fea:	2b20      	cmp	r3, #32
 8022fec:	f040 80f9 	bne.w	80231e2 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8022ff0:	6a3b      	ldr	r3, [r7, #32]
 8022ff2:	2b00      	cmp	r3, #0
 8022ff4:	d002      	beq.n	8022ffc <HAL_I2C_Mem_Write+0x34>
 8022ff6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8022ff8:	2b00      	cmp	r3, #0
 8022ffa:	d105      	bne.n	8023008 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8022ffc:	68fb      	ldr	r3, [r7, #12]
 8022ffe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8023002:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8023004:	2301      	movs	r3, #1
 8023006:	e0ed      	b.n	80231e4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8023008:	68fb      	ldr	r3, [r7, #12]
 802300a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 802300e:	2b01      	cmp	r3, #1
 8023010:	d101      	bne.n	8023016 <HAL_I2C_Mem_Write+0x4e>
 8023012:	2302      	movs	r3, #2
 8023014:	e0e6      	b.n	80231e4 <HAL_I2C_Mem_Write+0x21c>
 8023016:	68fb      	ldr	r3, [r7, #12]
 8023018:	2201      	movs	r2, #1
 802301a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 802301e:	f7fe ff6f 	bl	8021f00 <HAL_GetTick>
 8023022:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8023024:	697b      	ldr	r3, [r7, #20]
 8023026:	9300      	str	r3, [sp, #0]
 8023028:	2319      	movs	r3, #25
 802302a:	2201      	movs	r2, #1
 802302c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8023030:	68f8      	ldr	r0, [r7, #12]
 8023032:	f000 ffc0 	bl	8023fb6 <I2C_WaitOnFlagUntilTimeout>
 8023036:	4603      	mov	r3, r0
 8023038:	2b00      	cmp	r3, #0
 802303a:	d001      	beq.n	8023040 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 802303c:	2301      	movs	r3, #1
 802303e:	e0d1      	b.n	80231e4 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8023040:	68fb      	ldr	r3, [r7, #12]
 8023042:	2221      	movs	r2, #33	; 0x21
 8023044:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8023048:	68fb      	ldr	r3, [r7, #12]
 802304a:	2240      	movs	r2, #64	; 0x40
 802304c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8023050:	68fb      	ldr	r3, [r7, #12]
 8023052:	2200      	movs	r2, #0
 8023054:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8023056:	68fb      	ldr	r3, [r7, #12]
 8023058:	6a3a      	ldr	r2, [r7, #32]
 802305a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 802305c:	68fb      	ldr	r3, [r7, #12]
 802305e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8023060:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8023062:	68fb      	ldr	r3, [r7, #12]
 8023064:	2200      	movs	r2, #0
 8023066:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8023068:	88f8      	ldrh	r0, [r7, #6]
 802306a:	893a      	ldrh	r2, [r7, #8]
 802306c:	8979      	ldrh	r1, [r7, #10]
 802306e:	697b      	ldr	r3, [r7, #20]
 8023070:	9301      	str	r3, [sp, #4]
 8023072:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8023074:	9300      	str	r3, [sp, #0]
 8023076:	4603      	mov	r3, r0
 8023078:	68f8      	ldr	r0, [r7, #12]
 802307a:	f000 fb81 	bl	8023780 <I2C_RequestMemoryWrite>
 802307e:	4603      	mov	r3, r0
 8023080:	2b00      	cmp	r3, #0
 8023082:	d005      	beq.n	8023090 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8023084:	68fb      	ldr	r3, [r7, #12]
 8023086:	2200      	movs	r2, #0
 8023088:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 802308c:	2301      	movs	r3, #1
 802308e:	e0a9      	b.n	80231e4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8023090:	68fb      	ldr	r3, [r7, #12]
 8023092:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8023094:	b29b      	uxth	r3, r3
 8023096:	2bff      	cmp	r3, #255	; 0xff
 8023098:	d90e      	bls.n	80230b8 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 802309a:	68fb      	ldr	r3, [r7, #12]
 802309c:	22ff      	movs	r2, #255	; 0xff
 802309e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80230a0:	68fb      	ldr	r3, [r7, #12]
 80230a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80230a4:	b2da      	uxtb	r2, r3
 80230a6:	8979      	ldrh	r1, [r7, #10]
 80230a8:	2300      	movs	r3, #0
 80230aa:	9300      	str	r3, [sp, #0]
 80230ac:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80230b0:	68f8      	ldr	r0, [r7, #12]
 80230b2:	f001 f91d 	bl	80242f0 <I2C_TransferConfig>
 80230b6:	e00f      	b.n	80230d8 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80230b8:	68fb      	ldr	r3, [r7, #12]
 80230ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80230bc:	b29a      	uxth	r2, r3
 80230be:	68fb      	ldr	r3, [r7, #12]
 80230c0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80230c2:	68fb      	ldr	r3, [r7, #12]
 80230c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80230c6:	b2da      	uxtb	r2, r3
 80230c8:	8979      	ldrh	r1, [r7, #10]
 80230ca:	2300      	movs	r3, #0
 80230cc:	9300      	str	r3, [sp, #0]
 80230ce:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80230d2:	68f8      	ldr	r0, [r7, #12]
 80230d4:	f001 f90c 	bl	80242f0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80230d8:	697a      	ldr	r2, [r7, #20]
 80230da:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80230dc:	68f8      	ldr	r0, [r7, #12]
 80230de:	f000 ffaa 	bl	8024036 <I2C_WaitOnTXISFlagUntilTimeout>
 80230e2:	4603      	mov	r3, r0
 80230e4:	2b00      	cmp	r3, #0
 80230e6:	d001      	beq.n	80230ec <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80230e8:	2301      	movs	r3, #1
 80230ea:	e07b      	b.n	80231e4 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80230ec:	68fb      	ldr	r3, [r7, #12]
 80230ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80230f0:	781a      	ldrb	r2, [r3, #0]
 80230f2:	68fb      	ldr	r3, [r7, #12]
 80230f4:	681b      	ldr	r3, [r3, #0]
 80230f6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80230f8:	68fb      	ldr	r3, [r7, #12]
 80230fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80230fc:	1c5a      	adds	r2, r3, #1
 80230fe:	68fb      	ldr	r3, [r7, #12]
 8023100:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8023102:	68fb      	ldr	r3, [r7, #12]
 8023104:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8023106:	b29b      	uxth	r3, r3
 8023108:	3b01      	subs	r3, #1
 802310a:	b29a      	uxth	r2, r3
 802310c:	68fb      	ldr	r3, [r7, #12]
 802310e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8023110:	68fb      	ldr	r3, [r7, #12]
 8023112:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8023114:	3b01      	subs	r3, #1
 8023116:	b29a      	uxth	r2, r3
 8023118:	68fb      	ldr	r3, [r7, #12]
 802311a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 802311c:	68fb      	ldr	r3, [r7, #12]
 802311e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8023120:	b29b      	uxth	r3, r3
 8023122:	2b00      	cmp	r3, #0
 8023124:	d034      	beq.n	8023190 <HAL_I2C_Mem_Write+0x1c8>
 8023126:	68fb      	ldr	r3, [r7, #12]
 8023128:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 802312a:	2b00      	cmp	r3, #0
 802312c:	d130      	bne.n	8023190 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 802312e:	697b      	ldr	r3, [r7, #20]
 8023130:	9300      	str	r3, [sp, #0]
 8023132:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8023134:	2200      	movs	r2, #0
 8023136:	2180      	movs	r1, #128	; 0x80
 8023138:	68f8      	ldr	r0, [r7, #12]
 802313a:	f000 ff3c 	bl	8023fb6 <I2C_WaitOnFlagUntilTimeout>
 802313e:	4603      	mov	r3, r0
 8023140:	2b00      	cmp	r3, #0
 8023142:	d001      	beq.n	8023148 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8023144:	2301      	movs	r3, #1
 8023146:	e04d      	b.n	80231e4 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8023148:	68fb      	ldr	r3, [r7, #12]
 802314a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 802314c:	b29b      	uxth	r3, r3
 802314e:	2bff      	cmp	r3, #255	; 0xff
 8023150:	d90e      	bls.n	8023170 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8023152:	68fb      	ldr	r3, [r7, #12]
 8023154:	22ff      	movs	r2, #255	; 0xff
 8023156:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8023158:	68fb      	ldr	r3, [r7, #12]
 802315a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 802315c:	b2da      	uxtb	r2, r3
 802315e:	8979      	ldrh	r1, [r7, #10]
 8023160:	2300      	movs	r3, #0
 8023162:	9300      	str	r3, [sp, #0]
 8023164:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8023168:	68f8      	ldr	r0, [r7, #12]
 802316a:	f001 f8c1 	bl	80242f0 <I2C_TransferConfig>
 802316e:	e00f      	b.n	8023190 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8023170:	68fb      	ldr	r3, [r7, #12]
 8023172:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8023174:	b29a      	uxth	r2, r3
 8023176:	68fb      	ldr	r3, [r7, #12]
 8023178:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 802317a:	68fb      	ldr	r3, [r7, #12]
 802317c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 802317e:	b2da      	uxtb	r2, r3
 8023180:	8979      	ldrh	r1, [r7, #10]
 8023182:	2300      	movs	r3, #0
 8023184:	9300      	str	r3, [sp, #0]
 8023186:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 802318a:	68f8      	ldr	r0, [r7, #12]
 802318c:	f001 f8b0 	bl	80242f0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8023190:	68fb      	ldr	r3, [r7, #12]
 8023192:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8023194:	b29b      	uxth	r3, r3
 8023196:	2b00      	cmp	r3, #0
 8023198:	d19e      	bne.n	80230d8 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 802319a:	697a      	ldr	r2, [r7, #20]
 802319c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 802319e:	68f8      	ldr	r0, [r7, #12]
 80231a0:	f000 ff89 	bl	80240b6 <I2C_WaitOnSTOPFlagUntilTimeout>
 80231a4:	4603      	mov	r3, r0
 80231a6:	2b00      	cmp	r3, #0
 80231a8:	d001      	beq.n	80231ae <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80231aa:	2301      	movs	r3, #1
 80231ac:	e01a      	b.n	80231e4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80231ae:	68fb      	ldr	r3, [r7, #12]
 80231b0:	681b      	ldr	r3, [r3, #0]
 80231b2:	2220      	movs	r2, #32
 80231b4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80231b6:	68fb      	ldr	r3, [r7, #12]
 80231b8:	681b      	ldr	r3, [r3, #0]
 80231ba:	6859      	ldr	r1, [r3, #4]
 80231bc:	68fb      	ldr	r3, [r7, #12]
 80231be:	681a      	ldr	r2, [r3, #0]
 80231c0:	4b0a      	ldr	r3, [pc, #40]	; (80231ec <HAL_I2C_Mem_Write+0x224>)
 80231c2:	400b      	ands	r3, r1
 80231c4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80231c6:	68fb      	ldr	r3, [r7, #12]
 80231c8:	2220      	movs	r2, #32
 80231ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80231ce:	68fb      	ldr	r3, [r7, #12]
 80231d0:	2200      	movs	r2, #0
 80231d2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80231d6:	68fb      	ldr	r3, [r7, #12]
 80231d8:	2200      	movs	r2, #0
 80231da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80231de:	2300      	movs	r3, #0
 80231e0:	e000      	b.n	80231e4 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80231e2:	2302      	movs	r3, #2
  }
}
 80231e4:	4618      	mov	r0, r3
 80231e6:	3718      	adds	r7, #24
 80231e8:	46bd      	mov	sp, r7
 80231ea:	bd80      	pop	{r7, pc}
 80231ec:	fe00e800 	.word	0xfe00e800

080231f0 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80231f0:	b580      	push	{r7, lr}
 80231f2:	b088      	sub	sp, #32
 80231f4:	af02      	add	r7, sp, #8
 80231f6:	60f8      	str	r0, [r7, #12]
 80231f8:	4608      	mov	r0, r1
 80231fa:	4611      	mov	r1, r2
 80231fc:	461a      	mov	r2, r3
 80231fe:	4603      	mov	r3, r0
 8023200:	817b      	strh	r3, [r7, #10]
 8023202:	460b      	mov	r3, r1
 8023204:	813b      	strh	r3, [r7, #8]
 8023206:	4613      	mov	r3, r2
 8023208:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 802320a:	68fb      	ldr	r3, [r7, #12]
 802320c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8023210:	b2db      	uxtb	r3, r3
 8023212:	2b20      	cmp	r3, #32
 8023214:	f040 80fd 	bne.w	8023412 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8023218:	6a3b      	ldr	r3, [r7, #32]
 802321a:	2b00      	cmp	r3, #0
 802321c:	d002      	beq.n	8023224 <HAL_I2C_Mem_Read+0x34>
 802321e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8023220:	2b00      	cmp	r3, #0
 8023222:	d105      	bne.n	8023230 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8023224:	68fb      	ldr	r3, [r7, #12]
 8023226:	f44f 7200 	mov.w	r2, #512	; 0x200
 802322a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 802322c:	2301      	movs	r3, #1
 802322e:	e0f1      	b.n	8023414 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8023230:	68fb      	ldr	r3, [r7, #12]
 8023232:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8023236:	2b01      	cmp	r3, #1
 8023238:	d101      	bne.n	802323e <HAL_I2C_Mem_Read+0x4e>
 802323a:	2302      	movs	r3, #2
 802323c:	e0ea      	b.n	8023414 <HAL_I2C_Mem_Read+0x224>
 802323e:	68fb      	ldr	r3, [r7, #12]
 8023240:	2201      	movs	r2, #1
 8023242:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8023246:	f7fe fe5b 	bl	8021f00 <HAL_GetTick>
 802324a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 802324c:	697b      	ldr	r3, [r7, #20]
 802324e:	9300      	str	r3, [sp, #0]
 8023250:	2319      	movs	r3, #25
 8023252:	2201      	movs	r2, #1
 8023254:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8023258:	68f8      	ldr	r0, [r7, #12]
 802325a:	f000 feac 	bl	8023fb6 <I2C_WaitOnFlagUntilTimeout>
 802325e:	4603      	mov	r3, r0
 8023260:	2b00      	cmp	r3, #0
 8023262:	d001      	beq.n	8023268 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8023264:	2301      	movs	r3, #1
 8023266:	e0d5      	b.n	8023414 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8023268:	68fb      	ldr	r3, [r7, #12]
 802326a:	2222      	movs	r2, #34	; 0x22
 802326c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8023270:	68fb      	ldr	r3, [r7, #12]
 8023272:	2240      	movs	r2, #64	; 0x40
 8023274:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8023278:	68fb      	ldr	r3, [r7, #12]
 802327a:	2200      	movs	r2, #0
 802327c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 802327e:	68fb      	ldr	r3, [r7, #12]
 8023280:	6a3a      	ldr	r2, [r7, #32]
 8023282:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8023284:	68fb      	ldr	r3, [r7, #12]
 8023286:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8023288:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 802328a:	68fb      	ldr	r3, [r7, #12]
 802328c:	2200      	movs	r2, #0
 802328e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8023290:	88f8      	ldrh	r0, [r7, #6]
 8023292:	893a      	ldrh	r2, [r7, #8]
 8023294:	8979      	ldrh	r1, [r7, #10]
 8023296:	697b      	ldr	r3, [r7, #20]
 8023298:	9301      	str	r3, [sp, #4]
 802329a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802329c:	9300      	str	r3, [sp, #0]
 802329e:	4603      	mov	r3, r0
 80232a0:	68f8      	ldr	r0, [r7, #12]
 80232a2:	f000 fac1 	bl	8023828 <I2C_RequestMemoryRead>
 80232a6:	4603      	mov	r3, r0
 80232a8:	2b00      	cmp	r3, #0
 80232aa:	d005      	beq.n	80232b8 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80232ac:	68fb      	ldr	r3, [r7, #12]
 80232ae:	2200      	movs	r2, #0
 80232b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80232b4:	2301      	movs	r3, #1
 80232b6:	e0ad      	b.n	8023414 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80232b8:	68fb      	ldr	r3, [r7, #12]
 80232ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80232bc:	b29b      	uxth	r3, r3
 80232be:	2bff      	cmp	r3, #255	; 0xff
 80232c0:	d90e      	bls.n	80232e0 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80232c2:	68fb      	ldr	r3, [r7, #12]
 80232c4:	22ff      	movs	r2, #255	; 0xff
 80232c6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80232c8:	68fb      	ldr	r3, [r7, #12]
 80232ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80232cc:	b2da      	uxtb	r2, r3
 80232ce:	8979      	ldrh	r1, [r7, #10]
 80232d0:	4b52      	ldr	r3, [pc, #328]	; (802341c <HAL_I2C_Mem_Read+0x22c>)
 80232d2:	9300      	str	r3, [sp, #0]
 80232d4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80232d8:	68f8      	ldr	r0, [r7, #12]
 80232da:	f001 f809 	bl	80242f0 <I2C_TransferConfig>
 80232de:	e00f      	b.n	8023300 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80232e0:	68fb      	ldr	r3, [r7, #12]
 80232e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80232e4:	b29a      	uxth	r2, r3
 80232e6:	68fb      	ldr	r3, [r7, #12]
 80232e8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80232ea:	68fb      	ldr	r3, [r7, #12]
 80232ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80232ee:	b2da      	uxtb	r2, r3
 80232f0:	8979      	ldrh	r1, [r7, #10]
 80232f2:	4b4a      	ldr	r3, [pc, #296]	; (802341c <HAL_I2C_Mem_Read+0x22c>)
 80232f4:	9300      	str	r3, [sp, #0]
 80232f6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80232fa:	68f8      	ldr	r0, [r7, #12]
 80232fc:	f000 fff8 	bl	80242f0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8023300:	697b      	ldr	r3, [r7, #20]
 8023302:	9300      	str	r3, [sp, #0]
 8023304:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8023306:	2200      	movs	r2, #0
 8023308:	2104      	movs	r1, #4
 802330a:	68f8      	ldr	r0, [r7, #12]
 802330c:	f000 fe53 	bl	8023fb6 <I2C_WaitOnFlagUntilTimeout>
 8023310:	4603      	mov	r3, r0
 8023312:	2b00      	cmp	r3, #0
 8023314:	d001      	beq.n	802331a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8023316:	2301      	movs	r3, #1
 8023318:	e07c      	b.n	8023414 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 802331a:	68fb      	ldr	r3, [r7, #12]
 802331c:	681b      	ldr	r3, [r3, #0]
 802331e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8023320:	68fb      	ldr	r3, [r7, #12]
 8023322:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8023324:	b2d2      	uxtb	r2, r2
 8023326:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8023328:	68fb      	ldr	r3, [r7, #12]
 802332a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802332c:	1c5a      	adds	r2, r3, #1
 802332e:	68fb      	ldr	r3, [r7, #12]
 8023330:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8023332:	68fb      	ldr	r3, [r7, #12]
 8023334:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8023336:	3b01      	subs	r3, #1
 8023338:	b29a      	uxth	r2, r3
 802333a:	68fb      	ldr	r3, [r7, #12]
 802333c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 802333e:	68fb      	ldr	r3, [r7, #12]
 8023340:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8023342:	b29b      	uxth	r3, r3
 8023344:	3b01      	subs	r3, #1
 8023346:	b29a      	uxth	r2, r3
 8023348:	68fb      	ldr	r3, [r7, #12]
 802334a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 802334c:	68fb      	ldr	r3, [r7, #12]
 802334e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8023350:	b29b      	uxth	r3, r3
 8023352:	2b00      	cmp	r3, #0
 8023354:	d034      	beq.n	80233c0 <HAL_I2C_Mem_Read+0x1d0>
 8023356:	68fb      	ldr	r3, [r7, #12]
 8023358:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 802335a:	2b00      	cmp	r3, #0
 802335c:	d130      	bne.n	80233c0 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 802335e:	697b      	ldr	r3, [r7, #20]
 8023360:	9300      	str	r3, [sp, #0]
 8023362:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8023364:	2200      	movs	r2, #0
 8023366:	2180      	movs	r1, #128	; 0x80
 8023368:	68f8      	ldr	r0, [r7, #12]
 802336a:	f000 fe24 	bl	8023fb6 <I2C_WaitOnFlagUntilTimeout>
 802336e:	4603      	mov	r3, r0
 8023370:	2b00      	cmp	r3, #0
 8023372:	d001      	beq.n	8023378 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8023374:	2301      	movs	r3, #1
 8023376:	e04d      	b.n	8023414 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8023378:	68fb      	ldr	r3, [r7, #12]
 802337a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 802337c:	b29b      	uxth	r3, r3
 802337e:	2bff      	cmp	r3, #255	; 0xff
 8023380:	d90e      	bls.n	80233a0 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8023382:	68fb      	ldr	r3, [r7, #12]
 8023384:	22ff      	movs	r2, #255	; 0xff
 8023386:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8023388:	68fb      	ldr	r3, [r7, #12]
 802338a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 802338c:	b2da      	uxtb	r2, r3
 802338e:	8979      	ldrh	r1, [r7, #10]
 8023390:	2300      	movs	r3, #0
 8023392:	9300      	str	r3, [sp, #0]
 8023394:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8023398:	68f8      	ldr	r0, [r7, #12]
 802339a:	f000 ffa9 	bl	80242f0 <I2C_TransferConfig>
 802339e:	e00f      	b.n	80233c0 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80233a0:	68fb      	ldr	r3, [r7, #12]
 80233a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80233a4:	b29a      	uxth	r2, r3
 80233a6:	68fb      	ldr	r3, [r7, #12]
 80233a8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80233aa:	68fb      	ldr	r3, [r7, #12]
 80233ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80233ae:	b2da      	uxtb	r2, r3
 80233b0:	8979      	ldrh	r1, [r7, #10]
 80233b2:	2300      	movs	r3, #0
 80233b4:	9300      	str	r3, [sp, #0]
 80233b6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80233ba:	68f8      	ldr	r0, [r7, #12]
 80233bc:	f000 ff98 	bl	80242f0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80233c0:	68fb      	ldr	r3, [r7, #12]
 80233c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80233c4:	b29b      	uxth	r3, r3
 80233c6:	2b00      	cmp	r3, #0
 80233c8:	d19a      	bne.n	8023300 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80233ca:	697a      	ldr	r2, [r7, #20]
 80233cc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80233ce:	68f8      	ldr	r0, [r7, #12]
 80233d0:	f000 fe71 	bl	80240b6 <I2C_WaitOnSTOPFlagUntilTimeout>
 80233d4:	4603      	mov	r3, r0
 80233d6:	2b00      	cmp	r3, #0
 80233d8:	d001      	beq.n	80233de <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80233da:	2301      	movs	r3, #1
 80233dc:	e01a      	b.n	8023414 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80233de:	68fb      	ldr	r3, [r7, #12]
 80233e0:	681b      	ldr	r3, [r3, #0]
 80233e2:	2220      	movs	r2, #32
 80233e4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80233e6:	68fb      	ldr	r3, [r7, #12]
 80233e8:	681b      	ldr	r3, [r3, #0]
 80233ea:	6859      	ldr	r1, [r3, #4]
 80233ec:	68fb      	ldr	r3, [r7, #12]
 80233ee:	681a      	ldr	r2, [r3, #0]
 80233f0:	4b0b      	ldr	r3, [pc, #44]	; (8023420 <HAL_I2C_Mem_Read+0x230>)
 80233f2:	400b      	ands	r3, r1
 80233f4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80233f6:	68fb      	ldr	r3, [r7, #12]
 80233f8:	2220      	movs	r2, #32
 80233fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80233fe:	68fb      	ldr	r3, [r7, #12]
 8023400:	2200      	movs	r2, #0
 8023402:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8023406:	68fb      	ldr	r3, [r7, #12]
 8023408:	2200      	movs	r2, #0
 802340a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 802340e:	2300      	movs	r3, #0
 8023410:	e000      	b.n	8023414 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8023412:	2302      	movs	r3, #2
  }
}
 8023414:	4618      	mov	r0, r3
 8023416:	3718      	adds	r7, #24
 8023418:	46bd      	mov	sp, r7
 802341a:	bd80      	pop	{r7, pc}
 802341c:	80002400 	.word	0x80002400
 8023420:	fe00e800 	.word	0xfe00e800

08023424 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8023424:	b580      	push	{r7, lr}
 8023426:	b084      	sub	sp, #16
 8023428:	af00      	add	r7, sp, #0
 802342a:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 802342c:	687b      	ldr	r3, [r7, #4]
 802342e:	681b      	ldr	r3, [r3, #0]
 8023430:	699b      	ldr	r3, [r3, #24]
 8023432:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8023434:	687b      	ldr	r3, [r7, #4]
 8023436:	681b      	ldr	r3, [r3, #0]
 8023438:	681b      	ldr	r3, [r3, #0]
 802343a:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 802343c:	687b      	ldr	r3, [r7, #4]
 802343e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8023440:	2b00      	cmp	r3, #0
 8023442:	d005      	beq.n	8023450 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8023444:	687b      	ldr	r3, [r7, #4]
 8023446:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8023448:	68ba      	ldr	r2, [r7, #8]
 802344a:	68f9      	ldr	r1, [r7, #12]
 802344c:	6878      	ldr	r0, [r7, #4]
 802344e:	4798      	blx	r3
  }
}
 8023450:	bf00      	nop
 8023452:	3710      	adds	r7, #16
 8023454:	46bd      	mov	sp, r7
 8023456:	bd80      	pop	{r7, pc}

08023458 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8023458:	b580      	push	{r7, lr}
 802345a:	b086      	sub	sp, #24
 802345c:	af00      	add	r7, sp, #0
 802345e:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8023460:	687b      	ldr	r3, [r7, #4]
 8023462:	681b      	ldr	r3, [r3, #0]
 8023464:	699b      	ldr	r3, [r3, #24]
 8023466:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8023468:	687b      	ldr	r3, [r7, #4]
 802346a:	681b      	ldr	r3, [r3, #0]
 802346c:	681b      	ldr	r3, [r3, #0]
 802346e:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8023470:	697b      	ldr	r3, [r7, #20]
 8023472:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8023476:	2b00      	cmp	r3, #0
 8023478:	d00f      	beq.n	802349a <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 802347a:	693b      	ldr	r3, [r7, #16]
 802347c:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8023480:	2b00      	cmp	r3, #0
 8023482:	d00a      	beq.n	802349a <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8023484:	687b      	ldr	r3, [r7, #4]
 8023486:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8023488:	f043 0201 	orr.w	r2, r3, #1
 802348c:	687b      	ldr	r3, [r7, #4]
 802348e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8023490:	687b      	ldr	r3, [r7, #4]
 8023492:	681b      	ldr	r3, [r3, #0]
 8023494:	f44f 7280 	mov.w	r2, #256	; 0x100
 8023498:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 802349a:	697b      	ldr	r3, [r7, #20]
 802349c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80234a0:	2b00      	cmp	r3, #0
 80234a2:	d00f      	beq.n	80234c4 <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80234a4:	693b      	ldr	r3, [r7, #16]
 80234a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80234aa:	2b00      	cmp	r3, #0
 80234ac:	d00a      	beq.n	80234c4 <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 80234ae:	687b      	ldr	r3, [r7, #4]
 80234b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80234b2:	f043 0208 	orr.w	r2, r3, #8
 80234b6:	687b      	ldr	r3, [r7, #4]
 80234b8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80234ba:	687b      	ldr	r3, [r7, #4]
 80234bc:	681b      	ldr	r3, [r3, #0]
 80234be:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80234c2:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80234c4:	697b      	ldr	r3, [r7, #20]
 80234c6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80234ca:	2b00      	cmp	r3, #0
 80234cc:	d00f      	beq.n	80234ee <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80234ce:	693b      	ldr	r3, [r7, #16]
 80234d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80234d4:	2b00      	cmp	r3, #0
 80234d6:	d00a      	beq.n	80234ee <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 80234d8:	687b      	ldr	r3, [r7, #4]
 80234da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80234dc:	f043 0202 	orr.w	r2, r3, #2
 80234e0:	687b      	ldr	r3, [r7, #4]
 80234e2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80234e4:	687b      	ldr	r3, [r7, #4]
 80234e6:	681b      	ldr	r3, [r3, #0]
 80234e8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80234ec:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80234ee:	687b      	ldr	r3, [r7, #4]
 80234f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80234f2:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 80234f4:	68fb      	ldr	r3, [r7, #12]
 80234f6:	f003 030b 	and.w	r3, r3, #11
 80234fa:	2b00      	cmp	r3, #0
 80234fc:	d003      	beq.n	8023506 <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 80234fe:	68f9      	ldr	r1, [r7, #12]
 8023500:	6878      	ldr	r0, [r7, #4]
 8023502:	f000 fc1f 	bl	8023d44 <I2C_ITError>
  }
}
 8023506:	bf00      	nop
 8023508:	3718      	adds	r7, #24
 802350a:	46bd      	mov	sp, r7
 802350c:	bd80      	pop	{r7, pc}

0802350e <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 802350e:	b480      	push	{r7}
 8023510:	b083      	sub	sp, #12
 8023512:	af00      	add	r7, sp, #0
 8023514:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8023516:	bf00      	nop
 8023518:	370c      	adds	r7, #12
 802351a:	46bd      	mov	sp, r7
 802351c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023520:	4770      	bx	lr

08023522 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8023522:	b480      	push	{r7}
 8023524:	b083      	sub	sp, #12
 8023526:	af00      	add	r7, sp, #0
 8023528:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 802352a:	bf00      	nop
 802352c:	370c      	adds	r7, #12
 802352e:	46bd      	mov	sp, r7
 8023530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023534:	4770      	bx	lr

08023536 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8023536:	b480      	push	{r7}
 8023538:	b083      	sub	sp, #12
 802353a:	af00      	add	r7, sp, #0
 802353c:	6078      	str	r0, [r7, #4]
 802353e:	460b      	mov	r3, r1
 8023540:	70fb      	strb	r3, [r7, #3]
 8023542:	4613      	mov	r3, r2
 8023544:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8023546:	bf00      	nop
 8023548:	370c      	adds	r7, #12
 802354a:	46bd      	mov	sp, r7
 802354c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023550:	4770      	bx	lr

08023552 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8023552:	b480      	push	{r7}
 8023554:	b083      	sub	sp, #12
 8023556:	af00      	add	r7, sp, #0
 8023558:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 802355a:	bf00      	nop
 802355c:	370c      	adds	r7, #12
 802355e:	46bd      	mov	sp, r7
 8023560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023564:	4770      	bx	lr

08023566 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8023566:	b480      	push	{r7}
 8023568:	b083      	sub	sp, #12
 802356a:	af00      	add	r7, sp, #0
 802356c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 802356e:	bf00      	nop
 8023570:	370c      	adds	r7, #12
 8023572:	46bd      	mov	sp, r7
 8023574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023578:	4770      	bx	lr

0802357a <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 802357a:	b480      	push	{r7}
 802357c:	b083      	sub	sp, #12
 802357e:	af00      	add	r7, sp, #0
 8023580:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8023582:	bf00      	nop
 8023584:	370c      	adds	r7, #12
 8023586:	46bd      	mov	sp, r7
 8023588:	f85d 7b04 	ldr.w	r7, [sp], #4
 802358c:	4770      	bx	lr

0802358e <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 802358e:	b580      	push	{r7, lr}
 8023590:	b086      	sub	sp, #24
 8023592:	af00      	add	r7, sp, #0
 8023594:	60f8      	str	r0, [r7, #12]
 8023596:	60b9      	str	r1, [r7, #8]
 8023598:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 802359a:	68fb      	ldr	r3, [r7, #12]
 802359c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802359e:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 80235a0:	68bb      	ldr	r3, [r7, #8]
 80235a2:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 80235a4:	68fb      	ldr	r3, [r7, #12]
 80235a6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80235aa:	2b01      	cmp	r3, #1
 80235ac:	d101      	bne.n	80235b2 <I2C_Slave_ISR_IT+0x24>
 80235ae:	2302      	movs	r3, #2
 80235b0:	e0e1      	b.n	8023776 <I2C_Slave_ISR_IT+0x1e8>
 80235b2:	68fb      	ldr	r3, [r7, #12]
 80235b4:	2201      	movs	r2, #1
 80235b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80235ba:	693b      	ldr	r3, [r7, #16]
 80235bc:	f003 0320 	and.w	r3, r3, #32
 80235c0:	2b00      	cmp	r3, #0
 80235c2:	d008      	beq.n	80235d6 <I2C_Slave_ISR_IT+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80235c4:	687b      	ldr	r3, [r7, #4]
 80235c6:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80235ca:	2b00      	cmp	r3, #0
 80235cc:	d003      	beq.n	80235d6 <I2C_Slave_ISR_IT+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 80235ce:	6939      	ldr	r1, [r7, #16]
 80235d0:	68f8      	ldr	r0, [r7, #12]
 80235d2:	f000 fa5d 	bl	8023a90 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80235d6:	693b      	ldr	r3, [r7, #16]
 80235d8:	f003 0310 	and.w	r3, r3, #16
 80235dc:	2b00      	cmp	r3, #0
 80235de:	d04b      	beq.n	8023678 <I2C_Slave_ISR_IT+0xea>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80235e0:	687b      	ldr	r3, [r7, #4]
 80235e2:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80235e6:	2b00      	cmp	r3, #0
 80235e8:	d046      	beq.n	8023678 <I2C_Slave_ISR_IT+0xea>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80235ea:	68fb      	ldr	r3, [r7, #12]
 80235ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80235ee:	b29b      	uxth	r3, r3
 80235f0:	2b00      	cmp	r3, #0
 80235f2:	d128      	bne.n	8023646 <I2C_Slave_ISR_IT+0xb8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80235f4:	68fb      	ldr	r3, [r7, #12]
 80235f6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80235fa:	b2db      	uxtb	r3, r3
 80235fc:	2b28      	cmp	r3, #40	; 0x28
 80235fe:	d108      	bne.n	8023612 <I2C_Slave_ISR_IT+0x84>
 8023600:	697b      	ldr	r3, [r7, #20]
 8023602:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8023606:	d104      	bne.n	8023612 <I2C_Slave_ISR_IT+0x84>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8023608:	6939      	ldr	r1, [r7, #16]
 802360a:	68f8      	ldr	r0, [r7, #12]
 802360c:	f000 fb46 	bl	8023c9c <I2C_ITListenCplt>
 8023610:	e031      	b.n	8023676 <I2C_Slave_ISR_IT+0xe8>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8023612:	68fb      	ldr	r3, [r7, #12]
 8023614:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8023618:	b2db      	uxtb	r3, r3
 802361a:	2b29      	cmp	r3, #41	; 0x29
 802361c:	d10e      	bne.n	802363c <I2C_Slave_ISR_IT+0xae>
 802361e:	697b      	ldr	r3, [r7, #20]
 8023620:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8023624:	d00a      	beq.n	802363c <I2C_Slave_ISR_IT+0xae>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8023626:	68fb      	ldr	r3, [r7, #12]
 8023628:	681b      	ldr	r3, [r3, #0]
 802362a:	2210      	movs	r2, #16
 802362c:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 802362e:	68f8      	ldr	r0, [r7, #12]
 8023630:	f000 fc7f 	bl	8023f32 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8023634:	68f8      	ldr	r0, [r7, #12]
 8023636:	f000 f9cf 	bl	80239d8 <I2C_ITSlaveSeqCplt>
 802363a:	e01c      	b.n	8023676 <I2C_Slave_ISR_IT+0xe8>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 802363c:	68fb      	ldr	r3, [r7, #12]
 802363e:	681b      	ldr	r3, [r3, #0]
 8023640:	2210      	movs	r2, #16
 8023642:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8023644:	e08f      	b.n	8023766 <I2C_Slave_ISR_IT+0x1d8>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8023646:	68fb      	ldr	r3, [r7, #12]
 8023648:	681b      	ldr	r3, [r3, #0]
 802364a:	2210      	movs	r2, #16
 802364c:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 802364e:	68fb      	ldr	r3, [r7, #12]
 8023650:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8023652:	f043 0204 	orr.w	r2, r3, #4
 8023656:	68fb      	ldr	r3, [r7, #12]
 8023658:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 802365a:	697b      	ldr	r3, [r7, #20]
 802365c:	2b00      	cmp	r3, #0
 802365e:	d003      	beq.n	8023668 <I2C_Slave_ISR_IT+0xda>
 8023660:	697b      	ldr	r3, [r7, #20]
 8023662:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8023666:	d17e      	bne.n	8023766 <I2C_Slave_ISR_IT+0x1d8>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8023668:	68fb      	ldr	r3, [r7, #12]
 802366a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 802366c:	4619      	mov	r1, r3
 802366e:	68f8      	ldr	r0, [r7, #12]
 8023670:	f000 fb68 	bl	8023d44 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8023674:	e077      	b.n	8023766 <I2C_Slave_ISR_IT+0x1d8>
 8023676:	e076      	b.n	8023766 <I2C_Slave_ISR_IT+0x1d8>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8023678:	693b      	ldr	r3, [r7, #16]
 802367a:	f003 0304 	and.w	r3, r3, #4
 802367e:	2b00      	cmp	r3, #0
 8023680:	d02f      	beq.n	80236e2 <I2C_Slave_ISR_IT+0x154>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8023682:	687b      	ldr	r3, [r7, #4]
 8023684:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8023688:	2b00      	cmp	r3, #0
 802368a:	d02a      	beq.n	80236e2 <I2C_Slave_ISR_IT+0x154>
  {
    if (hi2c->XferCount > 0U)
 802368c:	68fb      	ldr	r3, [r7, #12]
 802368e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8023690:	b29b      	uxth	r3, r3
 8023692:	2b00      	cmp	r3, #0
 8023694:	d018      	beq.n	80236c8 <I2C_Slave_ISR_IT+0x13a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8023696:	68fb      	ldr	r3, [r7, #12]
 8023698:	681b      	ldr	r3, [r3, #0]
 802369a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 802369c:	68fb      	ldr	r3, [r7, #12]
 802369e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80236a0:	b2d2      	uxtb	r2, r2
 80236a2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80236a4:	68fb      	ldr	r3, [r7, #12]
 80236a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80236a8:	1c5a      	adds	r2, r3, #1
 80236aa:	68fb      	ldr	r3, [r7, #12]
 80236ac:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80236ae:	68fb      	ldr	r3, [r7, #12]
 80236b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80236b2:	3b01      	subs	r3, #1
 80236b4:	b29a      	uxth	r2, r3
 80236b6:	68fb      	ldr	r3, [r7, #12]
 80236b8:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80236ba:	68fb      	ldr	r3, [r7, #12]
 80236bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80236be:	b29b      	uxth	r3, r3
 80236c0:	3b01      	subs	r3, #1
 80236c2:	b29a      	uxth	r2, r3
 80236c4:	68fb      	ldr	r3, [r7, #12]
 80236c6:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 80236c8:	68fb      	ldr	r3, [r7, #12]
 80236ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80236cc:	b29b      	uxth	r3, r3
 80236ce:	2b00      	cmp	r3, #0
 80236d0:	d14b      	bne.n	802376a <I2C_Slave_ISR_IT+0x1dc>
 80236d2:	697b      	ldr	r3, [r7, #20]
 80236d4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80236d8:	d047      	beq.n	802376a <I2C_Slave_ISR_IT+0x1dc>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 80236da:	68f8      	ldr	r0, [r7, #12]
 80236dc:	f000 f97c 	bl	80239d8 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 80236e0:	e043      	b.n	802376a <I2C_Slave_ISR_IT+0x1dc>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80236e2:	693b      	ldr	r3, [r7, #16]
 80236e4:	f003 0308 	and.w	r3, r3, #8
 80236e8:	2b00      	cmp	r3, #0
 80236ea:	d009      	beq.n	8023700 <I2C_Slave_ISR_IT+0x172>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80236ec:	687b      	ldr	r3, [r7, #4]
 80236ee:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80236f2:	2b00      	cmp	r3, #0
 80236f4:	d004      	beq.n	8023700 <I2C_Slave_ISR_IT+0x172>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 80236f6:	6939      	ldr	r1, [r7, #16]
 80236f8:	68f8      	ldr	r0, [r7, #12]
 80236fa:	f000 f8e9 	bl	80238d0 <I2C_ITAddrCplt>
 80236fe:	e035      	b.n	802376c <I2C_Slave_ISR_IT+0x1de>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8023700:	693b      	ldr	r3, [r7, #16]
 8023702:	f003 0302 	and.w	r3, r3, #2
 8023706:	2b00      	cmp	r3, #0
 8023708:	d030      	beq.n	802376c <I2C_Slave_ISR_IT+0x1de>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 802370a:	687b      	ldr	r3, [r7, #4]
 802370c:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8023710:	2b00      	cmp	r3, #0
 8023712:	d02b      	beq.n	802376c <I2C_Slave_ISR_IT+0x1de>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8023714:	68fb      	ldr	r3, [r7, #12]
 8023716:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8023718:	b29b      	uxth	r3, r3
 802371a:	2b00      	cmp	r3, #0
 802371c:	d018      	beq.n	8023750 <I2C_Slave_ISR_IT+0x1c2>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 802371e:	68fb      	ldr	r3, [r7, #12]
 8023720:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8023722:	781a      	ldrb	r2, [r3, #0]
 8023724:	68fb      	ldr	r3, [r7, #12]
 8023726:	681b      	ldr	r3, [r3, #0]
 8023728:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 802372a:	68fb      	ldr	r3, [r7, #12]
 802372c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802372e:	1c5a      	adds	r2, r3, #1
 8023730:	68fb      	ldr	r3, [r7, #12]
 8023732:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8023734:	68fb      	ldr	r3, [r7, #12]
 8023736:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8023738:	b29b      	uxth	r3, r3
 802373a:	3b01      	subs	r3, #1
 802373c:	b29a      	uxth	r2, r3
 802373e:	68fb      	ldr	r3, [r7, #12]
 8023740:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8023742:	68fb      	ldr	r3, [r7, #12]
 8023744:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8023746:	3b01      	subs	r3, #1
 8023748:	b29a      	uxth	r2, r3
 802374a:	68fb      	ldr	r3, [r7, #12]
 802374c:	851a      	strh	r2, [r3, #40]	; 0x28
 802374e:	e00d      	b.n	802376c <I2C_Slave_ISR_IT+0x1de>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8023750:	697b      	ldr	r3, [r7, #20]
 8023752:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8023756:	d002      	beq.n	802375e <I2C_Slave_ISR_IT+0x1d0>
 8023758:	697b      	ldr	r3, [r7, #20]
 802375a:	2b00      	cmp	r3, #0
 802375c:	d106      	bne.n	802376c <I2C_Slave_ISR_IT+0x1de>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 802375e:	68f8      	ldr	r0, [r7, #12]
 8023760:	f000 f93a 	bl	80239d8 <I2C_ITSlaveSeqCplt>
 8023764:	e002      	b.n	802376c <I2C_Slave_ISR_IT+0x1de>
    if (hi2c->XferCount == 0U)
 8023766:	bf00      	nop
 8023768:	e000      	b.n	802376c <I2C_Slave_ISR_IT+0x1de>
    if ((hi2c->XferCount == 0U) && \
 802376a:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 802376c:	68fb      	ldr	r3, [r7, #12]
 802376e:	2200      	movs	r2, #0
 8023770:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8023774:	2300      	movs	r3, #0
}
 8023776:	4618      	mov	r0, r3
 8023778:	3718      	adds	r7, #24
 802377a:	46bd      	mov	sp, r7
 802377c:	bd80      	pop	{r7, pc}
	...

08023780 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8023780:	b580      	push	{r7, lr}
 8023782:	b086      	sub	sp, #24
 8023784:	af02      	add	r7, sp, #8
 8023786:	60f8      	str	r0, [r7, #12]
 8023788:	4608      	mov	r0, r1
 802378a:	4611      	mov	r1, r2
 802378c:	461a      	mov	r2, r3
 802378e:	4603      	mov	r3, r0
 8023790:	817b      	strh	r3, [r7, #10]
 8023792:	460b      	mov	r3, r1
 8023794:	813b      	strh	r3, [r7, #8]
 8023796:	4613      	mov	r3, r2
 8023798:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 802379a:	88fb      	ldrh	r3, [r7, #6]
 802379c:	b2da      	uxtb	r2, r3
 802379e:	8979      	ldrh	r1, [r7, #10]
 80237a0:	4b20      	ldr	r3, [pc, #128]	; (8023824 <I2C_RequestMemoryWrite+0xa4>)
 80237a2:	9300      	str	r3, [sp, #0]
 80237a4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80237a8:	68f8      	ldr	r0, [r7, #12]
 80237aa:	f000 fda1 	bl	80242f0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80237ae:	69fa      	ldr	r2, [r7, #28]
 80237b0:	69b9      	ldr	r1, [r7, #24]
 80237b2:	68f8      	ldr	r0, [r7, #12]
 80237b4:	f000 fc3f 	bl	8024036 <I2C_WaitOnTXISFlagUntilTimeout>
 80237b8:	4603      	mov	r3, r0
 80237ba:	2b00      	cmp	r3, #0
 80237bc:	d001      	beq.n	80237c2 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80237be:	2301      	movs	r3, #1
 80237c0:	e02c      	b.n	802381c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80237c2:	88fb      	ldrh	r3, [r7, #6]
 80237c4:	2b01      	cmp	r3, #1
 80237c6:	d105      	bne.n	80237d4 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80237c8:	893b      	ldrh	r3, [r7, #8]
 80237ca:	b2da      	uxtb	r2, r3
 80237cc:	68fb      	ldr	r3, [r7, #12]
 80237ce:	681b      	ldr	r3, [r3, #0]
 80237d0:	629a      	str	r2, [r3, #40]	; 0x28
 80237d2:	e015      	b.n	8023800 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80237d4:	893b      	ldrh	r3, [r7, #8]
 80237d6:	0a1b      	lsrs	r3, r3, #8
 80237d8:	b29b      	uxth	r3, r3
 80237da:	b2da      	uxtb	r2, r3
 80237dc:	68fb      	ldr	r3, [r7, #12]
 80237de:	681b      	ldr	r3, [r3, #0]
 80237e0:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80237e2:	69fa      	ldr	r2, [r7, #28]
 80237e4:	69b9      	ldr	r1, [r7, #24]
 80237e6:	68f8      	ldr	r0, [r7, #12]
 80237e8:	f000 fc25 	bl	8024036 <I2C_WaitOnTXISFlagUntilTimeout>
 80237ec:	4603      	mov	r3, r0
 80237ee:	2b00      	cmp	r3, #0
 80237f0:	d001      	beq.n	80237f6 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80237f2:	2301      	movs	r3, #1
 80237f4:	e012      	b.n	802381c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80237f6:	893b      	ldrh	r3, [r7, #8]
 80237f8:	b2da      	uxtb	r2, r3
 80237fa:	68fb      	ldr	r3, [r7, #12]
 80237fc:	681b      	ldr	r3, [r3, #0]
 80237fe:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8023800:	69fb      	ldr	r3, [r7, #28]
 8023802:	9300      	str	r3, [sp, #0]
 8023804:	69bb      	ldr	r3, [r7, #24]
 8023806:	2200      	movs	r2, #0
 8023808:	2180      	movs	r1, #128	; 0x80
 802380a:	68f8      	ldr	r0, [r7, #12]
 802380c:	f000 fbd3 	bl	8023fb6 <I2C_WaitOnFlagUntilTimeout>
 8023810:	4603      	mov	r3, r0
 8023812:	2b00      	cmp	r3, #0
 8023814:	d001      	beq.n	802381a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8023816:	2301      	movs	r3, #1
 8023818:	e000      	b.n	802381c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 802381a:	2300      	movs	r3, #0
}
 802381c:	4618      	mov	r0, r3
 802381e:	3710      	adds	r7, #16
 8023820:	46bd      	mov	sp, r7
 8023822:	bd80      	pop	{r7, pc}
 8023824:	80002000 	.word	0x80002000

08023828 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8023828:	b580      	push	{r7, lr}
 802382a:	b086      	sub	sp, #24
 802382c:	af02      	add	r7, sp, #8
 802382e:	60f8      	str	r0, [r7, #12]
 8023830:	4608      	mov	r0, r1
 8023832:	4611      	mov	r1, r2
 8023834:	461a      	mov	r2, r3
 8023836:	4603      	mov	r3, r0
 8023838:	817b      	strh	r3, [r7, #10]
 802383a:	460b      	mov	r3, r1
 802383c:	813b      	strh	r3, [r7, #8]
 802383e:	4613      	mov	r3, r2
 8023840:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8023842:	88fb      	ldrh	r3, [r7, #6]
 8023844:	b2da      	uxtb	r2, r3
 8023846:	8979      	ldrh	r1, [r7, #10]
 8023848:	4b20      	ldr	r3, [pc, #128]	; (80238cc <I2C_RequestMemoryRead+0xa4>)
 802384a:	9300      	str	r3, [sp, #0]
 802384c:	2300      	movs	r3, #0
 802384e:	68f8      	ldr	r0, [r7, #12]
 8023850:	f000 fd4e 	bl	80242f0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8023854:	69fa      	ldr	r2, [r7, #28]
 8023856:	69b9      	ldr	r1, [r7, #24]
 8023858:	68f8      	ldr	r0, [r7, #12]
 802385a:	f000 fbec 	bl	8024036 <I2C_WaitOnTXISFlagUntilTimeout>
 802385e:	4603      	mov	r3, r0
 8023860:	2b00      	cmp	r3, #0
 8023862:	d001      	beq.n	8023868 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8023864:	2301      	movs	r3, #1
 8023866:	e02c      	b.n	80238c2 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8023868:	88fb      	ldrh	r3, [r7, #6]
 802386a:	2b01      	cmp	r3, #1
 802386c:	d105      	bne.n	802387a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 802386e:	893b      	ldrh	r3, [r7, #8]
 8023870:	b2da      	uxtb	r2, r3
 8023872:	68fb      	ldr	r3, [r7, #12]
 8023874:	681b      	ldr	r3, [r3, #0]
 8023876:	629a      	str	r2, [r3, #40]	; 0x28
 8023878:	e015      	b.n	80238a6 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 802387a:	893b      	ldrh	r3, [r7, #8]
 802387c:	0a1b      	lsrs	r3, r3, #8
 802387e:	b29b      	uxth	r3, r3
 8023880:	b2da      	uxtb	r2, r3
 8023882:	68fb      	ldr	r3, [r7, #12]
 8023884:	681b      	ldr	r3, [r3, #0]
 8023886:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8023888:	69fa      	ldr	r2, [r7, #28]
 802388a:	69b9      	ldr	r1, [r7, #24]
 802388c:	68f8      	ldr	r0, [r7, #12]
 802388e:	f000 fbd2 	bl	8024036 <I2C_WaitOnTXISFlagUntilTimeout>
 8023892:	4603      	mov	r3, r0
 8023894:	2b00      	cmp	r3, #0
 8023896:	d001      	beq.n	802389c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8023898:	2301      	movs	r3, #1
 802389a:	e012      	b.n	80238c2 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 802389c:	893b      	ldrh	r3, [r7, #8]
 802389e:	b2da      	uxtb	r2, r3
 80238a0:	68fb      	ldr	r3, [r7, #12]
 80238a2:	681b      	ldr	r3, [r3, #0]
 80238a4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80238a6:	69fb      	ldr	r3, [r7, #28]
 80238a8:	9300      	str	r3, [sp, #0]
 80238aa:	69bb      	ldr	r3, [r7, #24]
 80238ac:	2200      	movs	r2, #0
 80238ae:	2140      	movs	r1, #64	; 0x40
 80238b0:	68f8      	ldr	r0, [r7, #12]
 80238b2:	f000 fb80 	bl	8023fb6 <I2C_WaitOnFlagUntilTimeout>
 80238b6:	4603      	mov	r3, r0
 80238b8:	2b00      	cmp	r3, #0
 80238ba:	d001      	beq.n	80238c0 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80238bc:	2301      	movs	r3, #1
 80238be:	e000      	b.n	80238c2 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80238c0:	2300      	movs	r3, #0
}
 80238c2:	4618      	mov	r0, r3
 80238c4:	3710      	adds	r7, #16
 80238c6:	46bd      	mov	sp, r7
 80238c8:	bd80      	pop	{r7, pc}
 80238ca:	bf00      	nop
 80238cc:	80002000 	.word	0x80002000

080238d0 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80238d0:	b580      	push	{r7, lr}
 80238d2:	b084      	sub	sp, #16
 80238d4:	af00      	add	r7, sp, #0
 80238d6:	6078      	str	r0, [r7, #4]
 80238d8:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80238da:	687b      	ldr	r3, [r7, #4]
 80238dc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80238e0:	b2db      	uxtb	r3, r3
 80238e2:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80238e6:	2b28      	cmp	r3, #40	; 0x28
 80238e8:	d16a      	bne.n	80239c0 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 80238ea:	687b      	ldr	r3, [r7, #4]
 80238ec:	681b      	ldr	r3, [r3, #0]
 80238ee:	699b      	ldr	r3, [r3, #24]
 80238f0:	0c1b      	lsrs	r3, r3, #16
 80238f2:	b2db      	uxtb	r3, r3
 80238f4:	f003 0301 	and.w	r3, r3, #1
 80238f8:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 80238fa:	687b      	ldr	r3, [r7, #4]
 80238fc:	681b      	ldr	r3, [r3, #0]
 80238fe:	699b      	ldr	r3, [r3, #24]
 8023900:	0c1b      	lsrs	r3, r3, #16
 8023902:	b29b      	uxth	r3, r3
 8023904:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8023908:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 802390a:	687b      	ldr	r3, [r7, #4]
 802390c:	681b      	ldr	r3, [r3, #0]
 802390e:	689b      	ldr	r3, [r3, #8]
 8023910:	b29b      	uxth	r3, r3
 8023912:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8023916:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8023918:	687b      	ldr	r3, [r7, #4]
 802391a:	681b      	ldr	r3, [r3, #0]
 802391c:	68db      	ldr	r3, [r3, #12]
 802391e:	b29b      	uxth	r3, r3
 8023920:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8023924:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8023926:	687b      	ldr	r3, [r7, #4]
 8023928:	68db      	ldr	r3, [r3, #12]
 802392a:	2b02      	cmp	r3, #2
 802392c:	d138      	bne.n	80239a0 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 802392e:	897b      	ldrh	r3, [r7, #10]
 8023930:	09db      	lsrs	r3, r3, #7
 8023932:	b29a      	uxth	r2, r3
 8023934:	89bb      	ldrh	r3, [r7, #12]
 8023936:	4053      	eors	r3, r2
 8023938:	b29b      	uxth	r3, r3
 802393a:	f003 0306 	and.w	r3, r3, #6
 802393e:	2b00      	cmp	r3, #0
 8023940:	d11c      	bne.n	802397c <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8023942:	897b      	ldrh	r3, [r7, #10]
 8023944:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8023946:	687b      	ldr	r3, [r7, #4]
 8023948:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 802394a:	1c5a      	adds	r2, r3, #1
 802394c:	687b      	ldr	r3, [r7, #4]
 802394e:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8023950:	687b      	ldr	r3, [r7, #4]
 8023952:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8023954:	2b02      	cmp	r3, #2
 8023956:	d13b      	bne.n	80239d0 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8023958:	687b      	ldr	r3, [r7, #4]
 802395a:	2200      	movs	r2, #0
 802395c:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 802395e:	687b      	ldr	r3, [r7, #4]
 8023960:	681b      	ldr	r3, [r3, #0]
 8023962:	2208      	movs	r2, #8
 8023964:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8023966:	687b      	ldr	r3, [r7, #4]
 8023968:	2200      	movs	r2, #0
 802396a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 802396e:	89ba      	ldrh	r2, [r7, #12]
 8023970:	7bfb      	ldrb	r3, [r7, #15]
 8023972:	4619      	mov	r1, r3
 8023974:	6878      	ldr	r0, [r7, #4]
 8023976:	f7ff fdde 	bl	8023536 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 802397a:	e029      	b.n	80239d0 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 802397c:	893b      	ldrh	r3, [r7, #8]
 802397e:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8023980:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8023984:	6878      	ldr	r0, [r7, #4]
 8023986:	f000 fce5 	bl	8024354 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 802398a:	687b      	ldr	r3, [r7, #4]
 802398c:	2200      	movs	r2, #0
 802398e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8023992:	89ba      	ldrh	r2, [r7, #12]
 8023994:	7bfb      	ldrb	r3, [r7, #15]
 8023996:	4619      	mov	r1, r3
 8023998:	6878      	ldr	r0, [r7, #4]
 802399a:	f7ff fdcc 	bl	8023536 <HAL_I2C_AddrCallback>
}
 802399e:	e017      	b.n	80239d0 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80239a0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80239a4:	6878      	ldr	r0, [r7, #4]
 80239a6:	f000 fcd5 	bl	8024354 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 80239aa:	687b      	ldr	r3, [r7, #4]
 80239ac:	2200      	movs	r2, #0
 80239ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80239b2:	89ba      	ldrh	r2, [r7, #12]
 80239b4:	7bfb      	ldrb	r3, [r7, #15]
 80239b6:	4619      	mov	r1, r3
 80239b8:	6878      	ldr	r0, [r7, #4]
 80239ba:	f7ff fdbc 	bl	8023536 <HAL_I2C_AddrCallback>
}
 80239be:	e007      	b.n	80239d0 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80239c0:	687b      	ldr	r3, [r7, #4]
 80239c2:	681b      	ldr	r3, [r3, #0]
 80239c4:	2208      	movs	r2, #8
 80239c6:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 80239c8:	687b      	ldr	r3, [r7, #4]
 80239ca:	2200      	movs	r2, #0
 80239cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 80239d0:	bf00      	nop
 80239d2:	3710      	adds	r7, #16
 80239d4:	46bd      	mov	sp, r7
 80239d6:	bd80      	pop	{r7, pc}

080239d8 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 80239d8:	b580      	push	{r7, lr}
 80239da:	b084      	sub	sp, #16
 80239dc:	af00      	add	r7, sp, #0
 80239de:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80239e0:	687b      	ldr	r3, [r7, #4]
 80239e2:	681b      	ldr	r3, [r3, #0]
 80239e4:	681b      	ldr	r3, [r3, #0]
 80239e6:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80239e8:	687b      	ldr	r3, [r7, #4]
 80239ea:	2200      	movs	r2, #0
 80239ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80239f0:	68fb      	ldr	r3, [r7, #12]
 80239f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80239f6:	2b00      	cmp	r3, #0
 80239f8:	d008      	beq.n	8023a0c <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80239fa:	687b      	ldr	r3, [r7, #4]
 80239fc:	681b      	ldr	r3, [r3, #0]
 80239fe:	681a      	ldr	r2, [r3, #0]
 8023a00:	687b      	ldr	r3, [r7, #4]
 8023a02:	681b      	ldr	r3, [r3, #0]
 8023a04:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8023a08:	601a      	str	r2, [r3, #0]
 8023a0a:	e00c      	b.n	8023a26 <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8023a0c:	68fb      	ldr	r3, [r7, #12]
 8023a0e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8023a12:	2b00      	cmp	r3, #0
 8023a14:	d007      	beq.n	8023a26 <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8023a16:	687b      	ldr	r3, [r7, #4]
 8023a18:	681b      	ldr	r3, [r3, #0]
 8023a1a:	681a      	ldr	r2, [r3, #0]
 8023a1c:	687b      	ldr	r3, [r7, #4]
 8023a1e:	681b      	ldr	r3, [r3, #0]
 8023a20:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8023a24:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8023a26:	687b      	ldr	r3, [r7, #4]
 8023a28:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8023a2c:	b2db      	uxtb	r3, r3
 8023a2e:	2b29      	cmp	r3, #41	; 0x29
 8023a30:	d112      	bne.n	8023a58 <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8023a32:	687b      	ldr	r3, [r7, #4]
 8023a34:	2228      	movs	r2, #40	; 0x28
 8023a36:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8023a3a:	687b      	ldr	r3, [r7, #4]
 8023a3c:	2221      	movs	r2, #33	; 0x21
 8023a3e:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8023a40:	2101      	movs	r1, #1
 8023a42:	6878      	ldr	r0, [r7, #4]
 8023a44:	f000 fc86 	bl	8024354 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8023a48:	687b      	ldr	r3, [r7, #4]
 8023a4a:	2200      	movs	r2, #0
 8023a4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8023a50:	6878      	ldr	r0, [r7, #4]
 8023a52:	f7ff fd5c 	bl	802350e <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8023a56:	e017      	b.n	8023a88 <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8023a58:	687b      	ldr	r3, [r7, #4]
 8023a5a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8023a5e:	b2db      	uxtb	r3, r3
 8023a60:	2b2a      	cmp	r3, #42	; 0x2a
 8023a62:	d111      	bne.n	8023a88 <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8023a64:	687b      	ldr	r3, [r7, #4]
 8023a66:	2228      	movs	r2, #40	; 0x28
 8023a68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8023a6c:	687b      	ldr	r3, [r7, #4]
 8023a6e:	2222      	movs	r2, #34	; 0x22
 8023a70:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8023a72:	2102      	movs	r1, #2
 8023a74:	6878      	ldr	r0, [r7, #4]
 8023a76:	f000 fc6d 	bl	8024354 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8023a7a:	687b      	ldr	r3, [r7, #4]
 8023a7c:	2200      	movs	r2, #0
 8023a7e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8023a82:	6878      	ldr	r0, [r7, #4]
 8023a84:	f7ff fd4d 	bl	8023522 <HAL_I2C_SlaveRxCpltCallback>
}
 8023a88:	bf00      	nop
 8023a8a:	3710      	adds	r7, #16
 8023a8c:	46bd      	mov	sp, r7
 8023a8e:	bd80      	pop	{r7, pc}

08023a90 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8023a90:	b580      	push	{r7, lr}
 8023a92:	b086      	sub	sp, #24
 8023a94:	af00      	add	r7, sp, #0
 8023a96:	6078      	str	r0, [r7, #4]
 8023a98:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8023a9a:	687b      	ldr	r3, [r7, #4]
 8023a9c:	681b      	ldr	r3, [r3, #0]
 8023a9e:	681b      	ldr	r3, [r3, #0]
 8023aa0:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8023aa2:	683b      	ldr	r3, [r7, #0]
 8023aa4:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8023aa6:	687b      	ldr	r3, [r7, #4]
 8023aa8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8023aac:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8023aae:	687b      	ldr	r3, [r7, #4]
 8023ab0:	681b      	ldr	r3, [r3, #0]
 8023ab2:	2220      	movs	r2, #32
 8023ab4:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8023ab6:	7bfb      	ldrb	r3, [r7, #15]
 8023ab8:	2b21      	cmp	r3, #33	; 0x21
 8023aba:	d002      	beq.n	8023ac2 <I2C_ITSlaveCplt+0x32>
 8023abc:	7bfb      	ldrb	r3, [r7, #15]
 8023abe:	2b29      	cmp	r3, #41	; 0x29
 8023ac0:	d108      	bne.n	8023ad4 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8023ac2:	f248 0101 	movw	r1, #32769	; 0x8001
 8023ac6:	6878      	ldr	r0, [r7, #4]
 8023ac8:	f000 fc44 	bl	8024354 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8023acc:	687b      	ldr	r3, [r7, #4]
 8023ace:	2221      	movs	r2, #33	; 0x21
 8023ad0:	631a      	str	r2, [r3, #48]	; 0x30
 8023ad2:	e00d      	b.n	8023af0 <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8023ad4:	7bfb      	ldrb	r3, [r7, #15]
 8023ad6:	2b22      	cmp	r3, #34	; 0x22
 8023ad8:	d002      	beq.n	8023ae0 <I2C_ITSlaveCplt+0x50>
 8023ada:	7bfb      	ldrb	r3, [r7, #15]
 8023adc:	2b2a      	cmp	r3, #42	; 0x2a
 8023ade:	d107      	bne.n	8023af0 <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8023ae0:	f248 0102 	movw	r1, #32770	; 0x8002
 8023ae4:	6878      	ldr	r0, [r7, #4]
 8023ae6:	f000 fc35 	bl	8024354 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8023aea:	687b      	ldr	r3, [r7, #4]
 8023aec:	2222      	movs	r2, #34	; 0x22
 8023aee:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8023af0:	687b      	ldr	r3, [r7, #4]
 8023af2:	681b      	ldr	r3, [r3, #0]
 8023af4:	685a      	ldr	r2, [r3, #4]
 8023af6:	687b      	ldr	r3, [r7, #4]
 8023af8:	681b      	ldr	r3, [r3, #0]
 8023afa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8023afe:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8023b00:	687b      	ldr	r3, [r7, #4]
 8023b02:	681b      	ldr	r3, [r3, #0]
 8023b04:	6859      	ldr	r1, [r3, #4]
 8023b06:	687b      	ldr	r3, [r7, #4]
 8023b08:	681a      	ldr	r2, [r3, #0]
 8023b0a:	4b62      	ldr	r3, [pc, #392]	; (8023c94 <I2C_ITSlaveCplt+0x204>)
 8023b0c:	400b      	ands	r3, r1
 8023b0e:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8023b10:	6878      	ldr	r0, [r7, #4]
 8023b12:	f000 fa0e 	bl	8023f32 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8023b16:	693b      	ldr	r3, [r7, #16]
 8023b18:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8023b1c:	2b00      	cmp	r3, #0
 8023b1e:	d013      	beq.n	8023b48 <I2C_ITSlaveCplt+0xb8>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8023b20:	687b      	ldr	r3, [r7, #4]
 8023b22:	681b      	ldr	r3, [r3, #0]
 8023b24:	681a      	ldr	r2, [r3, #0]
 8023b26:	687b      	ldr	r3, [r7, #4]
 8023b28:	681b      	ldr	r3, [r3, #0]
 8023b2a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8023b2e:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8023b30:	687b      	ldr	r3, [r7, #4]
 8023b32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8023b34:	2b00      	cmp	r3, #0
 8023b36:	d01f      	beq.n	8023b78 <I2C_ITSlaveCplt+0xe8>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8023b38:	687b      	ldr	r3, [r7, #4]
 8023b3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8023b3c:	681b      	ldr	r3, [r3, #0]
 8023b3e:	685b      	ldr	r3, [r3, #4]
 8023b40:	b29a      	uxth	r2, r3
 8023b42:	687b      	ldr	r3, [r7, #4]
 8023b44:	855a      	strh	r2, [r3, #42]	; 0x2a
 8023b46:	e017      	b.n	8023b78 <I2C_ITSlaveCplt+0xe8>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8023b48:	693b      	ldr	r3, [r7, #16]
 8023b4a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8023b4e:	2b00      	cmp	r3, #0
 8023b50:	d012      	beq.n	8023b78 <I2C_ITSlaveCplt+0xe8>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8023b52:	687b      	ldr	r3, [r7, #4]
 8023b54:	681b      	ldr	r3, [r3, #0]
 8023b56:	681a      	ldr	r2, [r3, #0]
 8023b58:	687b      	ldr	r3, [r7, #4]
 8023b5a:	681b      	ldr	r3, [r3, #0]
 8023b5c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8023b60:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8023b62:	687b      	ldr	r3, [r7, #4]
 8023b64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8023b66:	2b00      	cmp	r3, #0
 8023b68:	d006      	beq.n	8023b78 <I2C_ITSlaveCplt+0xe8>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8023b6a:	687b      	ldr	r3, [r7, #4]
 8023b6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8023b6e:	681b      	ldr	r3, [r3, #0]
 8023b70:	685b      	ldr	r3, [r3, #4]
 8023b72:	b29a      	uxth	r2, r3
 8023b74:	687b      	ldr	r3, [r7, #4]
 8023b76:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8023b78:	697b      	ldr	r3, [r7, #20]
 8023b7a:	f003 0304 	and.w	r3, r3, #4
 8023b7e:	2b00      	cmp	r3, #0
 8023b80:	d020      	beq.n	8023bc4 <I2C_ITSlaveCplt+0x134>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8023b82:	697b      	ldr	r3, [r7, #20]
 8023b84:	f023 0304 	bic.w	r3, r3, #4
 8023b88:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8023b8a:	687b      	ldr	r3, [r7, #4]
 8023b8c:	681b      	ldr	r3, [r3, #0]
 8023b8e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8023b90:	687b      	ldr	r3, [r7, #4]
 8023b92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8023b94:	b2d2      	uxtb	r2, r2
 8023b96:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8023b98:	687b      	ldr	r3, [r7, #4]
 8023b9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8023b9c:	1c5a      	adds	r2, r3, #1
 8023b9e:	687b      	ldr	r3, [r7, #4]
 8023ba0:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8023ba2:	687b      	ldr	r3, [r7, #4]
 8023ba4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8023ba6:	2b00      	cmp	r3, #0
 8023ba8:	d00c      	beq.n	8023bc4 <I2C_ITSlaveCplt+0x134>
    {
      hi2c->XferSize--;
 8023baa:	687b      	ldr	r3, [r7, #4]
 8023bac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8023bae:	3b01      	subs	r3, #1
 8023bb0:	b29a      	uxth	r2, r3
 8023bb2:	687b      	ldr	r3, [r7, #4]
 8023bb4:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8023bb6:	687b      	ldr	r3, [r7, #4]
 8023bb8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8023bba:	b29b      	uxth	r3, r3
 8023bbc:	3b01      	subs	r3, #1
 8023bbe:	b29a      	uxth	r2, r3
 8023bc0:	687b      	ldr	r3, [r7, #4]
 8023bc2:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8023bc4:	687b      	ldr	r3, [r7, #4]
 8023bc6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8023bc8:	b29b      	uxth	r3, r3
 8023bca:	2b00      	cmp	r3, #0
 8023bcc:	d005      	beq.n	8023bda <I2C_ITSlaveCplt+0x14a>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8023bce:	687b      	ldr	r3, [r7, #4]
 8023bd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8023bd2:	f043 0204 	orr.w	r2, r3, #4
 8023bd6:	687b      	ldr	r3, [r7, #4]
 8023bd8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8023bda:	687b      	ldr	r3, [r7, #4]
 8023bdc:	2200      	movs	r2, #0
 8023bde:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8023be2:	687b      	ldr	r3, [r7, #4]
 8023be4:	2200      	movs	r2, #0
 8023be6:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8023be8:	687b      	ldr	r3, [r7, #4]
 8023bea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8023bec:	2b00      	cmp	r3, #0
 8023bee:	d010      	beq.n	8023c12 <I2C_ITSlaveCplt+0x182>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8023bf0:	687b      	ldr	r3, [r7, #4]
 8023bf2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8023bf4:	4619      	mov	r1, r3
 8023bf6:	6878      	ldr	r0, [r7, #4]
 8023bf8:	f000 f8a4 	bl	8023d44 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8023bfc:	687b      	ldr	r3, [r7, #4]
 8023bfe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8023c02:	b2db      	uxtb	r3, r3
 8023c04:	2b28      	cmp	r3, #40	; 0x28
 8023c06:	d141      	bne.n	8023c8c <I2C_ITSlaveCplt+0x1fc>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8023c08:	6979      	ldr	r1, [r7, #20]
 8023c0a:	6878      	ldr	r0, [r7, #4]
 8023c0c:	f000 f846 	bl	8023c9c <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8023c10:	e03c      	b.n	8023c8c <I2C_ITSlaveCplt+0x1fc>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8023c12:	687b      	ldr	r3, [r7, #4]
 8023c14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8023c16:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8023c1a:	d014      	beq.n	8023c46 <I2C_ITSlaveCplt+0x1b6>
    I2C_ITSlaveSeqCplt(hi2c);
 8023c1c:	6878      	ldr	r0, [r7, #4]
 8023c1e:	f7ff fedb 	bl	80239d8 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8023c22:	687b      	ldr	r3, [r7, #4]
 8023c24:	4a1c      	ldr	r2, [pc, #112]	; (8023c98 <I2C_ITSlaveCplt+0x208>)
 8023c26:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8023c28:	687b      	ldr	r3, [r7, #4]
 8023c2a:	2220      	movs	r2, #32
 8023c2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8023c30:	687b      	ldr	r3, [r7, #4]
 8023c32:	2200      	movs	r2, #0
 8023c34:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8023c36:	687b      	ldr	r3, [r7, #4]
 8023c38:	2200      	movs	r2, #0
 8023c3a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8023c3e:	6878      	ldr	r0, [r7, #4]
 8023c40:	f7ff fc87 	bl	8023552 <HAL_I2C_ListenCpltCallback>
}
 8023c44:	e022      	b.n	8023c8c <I2C_ITSlaveCplt+0x1fc>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8023c46:	687b      	ldr	r3, [r7, #4]
 8023c48:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8023c4c:	b2db      	uxtb	r3, r3
 8023c4e:	2b22      	cmp	r3, #34	; 0x22
 8023c50:	d10e      	bne.n	8023c70 <I2C_ITSlaveCplt+0x1e0>
    hi2c->State = HAL_I2C_STATE_READY;
 8023c52:	687b      	ldr	r3, [r7, #4]
 8023c54:	2220      	movs	r2, #32
 8023c56:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8023c5a:	687b      	ldr	r3, [r7, #4]
 8023c5c:	2200      	movs	r2, #0
 8023c5e:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8023c60:	687b      	ldr	r3, [r7, #4]
 8023c62:	2200      	movs	r2, #0
 8023c64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8023c68:	6878      	ldr	r0, [r7, #4]
 8023c6a:	f7ff fc5a 	bl	8023522 <HAL_I2C_SlaveRxCpltCallback>
}
 8023c6e:	e00d      	b.n	8023c8c <I2C_ITSlaveCplt+0x1fc>
    hi2c->State = HAL_I2C_STATE_READY;
 8023c70:	687b      	ldr	r3, [r7, #4]
 8023c72:	2220      	movs	r2, #32
 8023c74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8023c78:	687b      	ldr	r3, [r7, #4]
 8023c7a:	2200      	movs	r2, #0
 8023c7c:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8023c7e:	687b      	ldr	r3, [r7, #4]
 8023c80:	2200      	movs	r2, #0
 8023c82:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8023c86:	6878      	ldr	r0, [r7, #4]
 8023c88:	f7ff fc41 	bl	802350e <HAL_I2C_SlaveTxCpltCallback>
}
 8023c8c:	bf00      	nop
 8023c8e:	3718      	adds	r7, #24
 8023c90:	46bd      	mov	sp, r7
 8023c92:	bd80      	pop	{r7, pc}
 8023c94:	fe00e800 	.word	0xfe00e800
 8023c98:	ffff0000 	.word	0xffff0000

08023c9c <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8023c9c:	b580      	push	{r7, lr}
 8023c9e:	b082      	sub	sp, #8
 8023ca0:	af00      	add	r7, sp, #0
 8023ca2:	6078      	str	r0, [r7, #4]
 8023ca4:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8023ca6:	687b      	ldr	r3, [r7, #4]
 8023ca8:	4a25      	ldr	r2, [pc, #148]	; (8023d40 <I2C_ITListenCplt+0xa4>)
 8023caa:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8023cac:	687b      	ldr	r3, [r7, #4]
 8023cae:	2200      	movs	r2, #0
 8023cb0:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8023cb2:	687b      	ldr	r3, [r7, #4]
 8023cb4:	2220      	movs	r2, #32
 8023cb6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8023cba:	687b      	ldr	r3, [r7, #4]
 8023cbc:	2200      	movs	r2, #0
 8023cbe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8023cc2:	687b      	ldr	r3, [r7, #4]
 8023cc4:	2200      	movs	r2, #0
 8023cc6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8023cc8:	683b      	ldr	r3, [r7, #0]
 8023cca:	f003 0304 	and.w	r3, r3, #4
 8023cce:	2b00      	cmp	r3, #0
 8023cd0:	d022      	beq.n	8023d18 <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8023cd2:	687b      	ldr	r3, [r7, #4]
 8023cd4:	681b      	ldr	r3, [r3, #0]
 8023cd6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8023cd8:	687b      	ldr	r3, [r7, #4]
 8023cda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8023cdc:	b2d2      	uxtb	r2, r2
 8023cde:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8023ce0:	687b      	ldr	r3, [r7, #4]
 8023ce2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8023ce4:	1c5a      	adds	r2, r3, #1
 8023ce6:	687b      	ldr	r3, [r7, #4]
 8023ce8:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8023cea:	687b      	ldr	r3, [r7, #4]
 8023cec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8023cee:	2b00      	cmp	r3, #0
 8023cf0:	d012      	beq.n	8023d18 <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 8023cf2:	687b      	ldr	r3, [r7, #4]
 8023cf4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8023cf6:	3b01      	subs	r3, #1
 8023cf8:	b29a      	uxth	r2, r3
 8023cfa:	687b      	ldr	r3, [r7, #4]
 8023cfc:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8023cfe:	687b      	ldr	r3, [r7, #4]
 8023d00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8023d02:	b29b      	uxth	r3, r3
 8023d04:	3b01      	subs	r3, #1
 8023d06:	b29a      	uxth	r2, r3
 8023d08:	687b      	ldr	r3, [r7, #4]
 8023d0a:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8023d0c:	687b      	ldr	r3, [r7, #4]
 8023d0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8023d10:	f043 0204 	orr.w	r2, r3, #4
 8023d14:	687b      	ldr	r3, [r7, #4]
 8023d16:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8023d18:	f248 0103 	movw	r1, #32771	; 0x8003
 8023d1c:	6878      	ldr	r0, [r7, #4]
 8023d1e:	f000 fb19 	bl	8024354 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8023d22:	687b      	ldr	r3, [r7, #4]
 8023d24:	681b      	ldr	r3, [r3, #0]
 8023d26:	2210      	movs	r2, #16
 8023d28:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8023d2a:	687b      	ldr	r3, [r7, #4]
 8023d2c:	2200      	movs	r2, #0
 8023d2e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8023d32:	6878      	ldr	r0, [r7, #4]
 8023d34:	f7ff fc0d 	bl	8023552 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8023d38:	bf00      	nop
 8023d3a:	3708      	adds	r7, #8
 8023d3c:	46bd      	mov	sp, r7
 8023d3e:	bd80      	pop	{r7, pc}
 8023d40:	ffff0000 	.word	0xffff0000

08023d44 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8023d44:	b580      	push	{r7, lr}
 8023d46:	b084      	sub	sp, #16
 8023d48:	af00      	add	r7, sp, #0
 8023d4a:	6078      	str	r0, [r7, #4]
 8023d4c:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8023d4e:	687b      	ldr	r3, [r7, #4]
 8023d50:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8023d54:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8023d56:	687b      	ldr	r3, [r7, #4]
 8023d58:	2200      	movs	r2, #0
 8023d5a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8023d5e:	687b      	ldr	r3, [r7, #4]
 8023d60:	4a5d      	ldr	r2, [pc, #372]	; (8023ed8 <I2C_ITError+0x194>)
 8023d62:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8023d64:	687b      	ldr	r3, [r7, #4]
 8023d66:	2200      	movs	r2, #0
 8023d68:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8023d6a:	687b      	ldr	r3, [r7, #4]
 8023d6c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8023d6e:	683b      	ldr	r3, [r7, #0]
 8023d70:	431a      	orrs	r2, r3
 8023d72:	687b      	ldr	r3, [r7, #4]
 8023d74:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8023d76:	7bfb      	ldrb	r3, [r7, #15]
 8023d78:	2b28      	cmp	r3, #40	; 0x28
 8023d7a:	d005      	beq.n	8023d88 <I2C_ITError+0x44>
 8023d7c:	7bfb      	ldrb	r3, [r7, #15]
 8023d7e:	2b29      	cmp	r3, #41	; 0x29
 8023d80:	d002      	beq.n	8023d88 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8023d82:	7bfb      	ldrb	r3, [r7, #15]
 8023d84:	2b2a      	cmp	r3, #42	; 0x2a
 8023d86:	d10b      	bne.n	8023da0 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8023d88:	2103      	movs	r1, #3
 8023d8a:	6878      	ldr	r0, [r7, #4]
 8023d8c:	f000 fae2 	bl	8024354 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8023d90:	687b      	ldr	r3, [r7, #4]
 8023d92:	2228      	movs	r2, #40	; 0x28
 8023d94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8023d98:	687b      	ldr	r3, [r7, #4]
 8023d9a:	4a50      	ldr	r2, [pc, #320]	; (8023edc <I2C_ITError+0x198>)
 8023d9c:	635a      	str	r2, [r3, #52]	; 0x34
 8023d9e:	e011      	b.n	8023dc4 <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8023da0:	f248 0103 	movw	r1, #32771	; 0x8003
 8023da4:	6878      	ldr	r0, [r7, #4]
 8023da6:	f000 fad5 	bl	8024354 <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8023daa:	687b      	ldr	r3, [r7, #4]
 8023dac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8023db0:	b2db      	uxtb	r3, r3
 8023db2:	2b60      	cmp	r3, #96	; 0x60
 8023db4:	d003      	beq.n	8023dbe <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8023db6:	687b      	ldr	r3, [r7, #4]
 8023db8:	2220      	movs	r2, #32
 8023dba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 8023dbe:	687b      	ldr	r3, [r7, #4]
 8023dc0:	2200      	movs	r2, #0
 8023dc2:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8023dc4:	687b      	ldr	r3, [r7, #4]
 8023dc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8023dc8:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8023dca:	687b      	ldr	r3, [r7, #4]
 8023dcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8023dce:	2b00      	cmp	r3, #0
 8023dd0:	d039      	beq.n	8023e46 <I2C_ITError+0x102>
 8023dd2:	68bb      	ldr	r3, [r7, #8]
 8023dd4:	2b11      	cmp	r3, #17
 8023dd6:	d002      	beq.n	8023dde <I2C_ITError+0x9a>
 8023dd8:	68bb      	ldr	r3, [r7, #8]
 8023dda:	2b21      	cmp	r3, #33	; 0x21
 8023ddc:	d133      	bne.n	8023e46 <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8023dde:	687b      	ldr	r3, [r7, #4]
 8023de0:	681b      	ldr	r3, [r3, #0]
 8023de2:	681b      	ldr	r3, [r3, #0]
 8023de4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8023de8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8023dec:	d107      	bne.n	8023dfe <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8023dee:	687b      	ldr	r3, [r7, #4]
 8023df0:	681b      	ldr	r3, [r3, #0]
 8023df2:	681a      	ldr	r2, [r3, #0]
 8023df4:	687b      	ldr	r3, [r7, #4]
 8023df6:	681b      	ldr	r3, [r3, #0]
 8023df8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8023dfc:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8023dfe:	687b      	ldr	r3, [r7, #4]
 8023e00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8023e02:	4618      	mov	r0, r3
 8023e04:	f7fe fcc6 	bl	8022794 <HAL_DMA_GetState>
 8023e08:	4603      	mov	r3, r0
 8023e0a:	2b01      	cmp	r3, #1
 8023e0c:	d017      	beq.n	8023e3e <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8023e0e:	687b      	ldr	r3, [r7, #4]
 8023e10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8023e12:	4a33      	ldr	r2, [pc, #204]	; (8023ee0 <I2C_ITError+0x19c>)
 8023e14:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8023e16:	687b      	ldr	r3, [r7, #4]
 8023e18:	2200      	movs	r2, #0
 8023e1a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8023e1e:	687b      	ldr	r3, [r7, #4]
 8023e20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8023e22:	4618      	mov	r0, r3
 8023e24:	f7fe fb0a 	bl	802243c <HAL_DMA_Abort_IT>
 8023e28:	4603      	mov	r3, r0
 8023e2a:	2b00      	cmp	r3, #0
 8023e2c:	d04d      	beq.n	8023eca <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8023e2e:	687b      	ldr	r3, [r7, #4]
 8023e30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8023e32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8023e34:	687a      	ldr	r2, [r7, #4]
 8023e36:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8023e38:	4610      	mov	r0, r2
 8023e3a:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8023e3c:	e045      	b.n	8023eca <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8023e3e:	6878      	ldr	r0, [r7, #4]
 8023e40:	f000 f850 	bl	8023ee4 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8023e44:	e041      	b.n	8023eca <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8023e46:	687b      	ldr	r3, [r7, #4]
 8023e48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8023e4a:	2b00      	cmp	r3, #0
 8023e4c:	d039      	beq.n	8023ec2 <I2C_ITError+0x17e>
 8023e4e:	68bb      	ldr	r3, [r7, #8]
 8023e50:	2b12      	cmp	r3, #18
 8023e52:	d002      	beq.n	8023e5a <I2C_ITError+0x116>
 8023e54:	68bb      	ldr	r3, [r7, #8]
 8023e56:	2b22      	cmp	r3, #34	; 0x22
 8023e58:	d133      	bne.n	8023ec2 <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8023e5a:	687b      	ldr	r3, [r7, #4]
 8023e5c:	681b      	ldr	r3, [r3, #0]
 8023e5e:	681b      	ldr	r3, [r3, #0]
 8023e60:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8023e64:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8023e68:	d107      	bne.n	8023e7a <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8023e6a:	687b      	ldr	r3, [r7, #4]
 8023e6c:	681b      	ldr	r3, [r3, #0]
 8023e6e:	681a      	ldr	r2, [r3, #0]
 8023e70:	687b      	ldr	r3, [r7, #4]
 8023e72:	681b      	ldr	r3, [r3, #0]
 8023e74:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8023e78:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8023e7a:	687b      	ldr	r3, [r7, #4]
 8023e7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8023e7e:	4618      	mov	r0, r3
 8023e80:	f7fe fc88 	bl	8022794 <HAL_DMA_GetState>
 8023e84:	4603      	mov	r3, r0
 8023e86:	2b01      	cmp	r3, #1
 8023e88:	d017      	beq.n	8023eba <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8023e8a:	687b      	ldr	r3, [r7, #4]
 8023e8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8023e8e:	4a14      	ldr	r2, [pc, #80]	; (8023ee0 <I2C_ITError+0x19c>)
 8023e90:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8023e92:	687b      	ldr	r3, [r7, #4]
 8023e94:	2200      	movs	r2, #0
 8023e96:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8023e9a:	687b      	ldr	r3, [r7, #4]
 8023e9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8023e9e:	4618      	mov	r0, r3
 8023ea0:	f7fe facc 	bl	802243c <HAL_DMA_Abort_IT>
 8023ea4:	4603      	mov	r3, r0
 8023ea6:	2b00      	cmp	r3, #0
 8023ea8:	d011      	beq.n	8023ece <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8023eaa:	687b      	ldr	r3, [r7, #4]
 8023eac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8023eae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8023eb0:	687a      	ldr	r2, [r7, #4]
 8023eb2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8023eb4:	4610      	mov	r0, r2
 8023eb6:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8023eb8:	e009      	b.n	8023ece <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8023eba:	6878      	ldr	r0, [r7, #4]
 8023ebc:	f000 f812 	bl	8023ee4 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8023ec0:	e005      	b.n	8023ece <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8023ec2:	6878      	ldr	r0, [r7, #4]
 8023ec4:	f000 f80e 	bl	8023ee4 <I2C_TreatErrorCallback>
  }
}
 8023ec8:	e002      	b.n	8023ed0 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8023eca:	bf00      	nop
 8023ecc:	e000      	b.n	8023ed0 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8023ece:	bf00      	nop
}
 8023ed0:	bf00      	nop
 8023ed2:	3710      	adds	r7, #16
 8023ed4:	46bd      	mov	sp, r7
 8023ed6:	bd80      	pop	{r7, pc}
 8023ed8:	ffff0000 	.word	0xffff0000
 8023edc:	0802358f 	.word	0x0802358f
 8023ee0:	08023f7b 	.word	0x08023f7b

08023ee4 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8023ee4:	b580      	push	{r7, lr}
 8023ee6:	b082      	sub	sp, #8
 8023ee8:	af00      	add	r7, sp, #0
 8023eea:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8023eec:	687b      	ldr	r3, [r7, #4]
 8023eee:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8023ef2:	b2db      	uxtb	r3, r3
 8023ef4:	2b60      	cmp	r3, #96	; 0x60
 8023ef6:	d10e      	bne.n	8023f16 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8023ef8:	687b      	ldr	r3, [r7, #4]
 8023efa:	2220      	movs	r2, #32
 8023efc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8023f00:	687b      	ldr	r3, [r7, #4]
 8023f02:	2200      	movs	r2, #0
 8023f04:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8023f06:	687b      	ldr	r3, [r7, #4]
 8023f08:	2200      	movs	r2, #0
 8023f0a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8023f0e:	6878      	ldr	r0, [r7, #4]
 8023f10:	f7ff fb33 	bl	802357a <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8023f14:	e009      	b.n	8023f2a <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8023f16:	687b      	ldr	r3, [r7, #4]
 8023f18:	2200      	movs	r2, #0
 8023f1a:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8023f1c:	687b      	ldr	r3, [r7, #4]
 8023f1e:	2200      	movs	r2, #0
 8023f20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8023f24:	6878      	ldr	r0, [r7, #4]
 8023f26:	f7ff fb1e 	bl	8023566 <HAL_I2C_ErrorCallback>
}
 8023f2a:	bf00      	nop
 8023f2c:	3708      	adds	r7, #8
 8023f2e:	46bd      	mov	sp, r7
 8023f30:	bd80      	pop	{r7, pc}

08023f32 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8023f32:	b480      	push	{r7}
 8023f34:	b083      	sub	sp, #12
 8023f36:	af00      	add	r7, sp, #0
 8023f38:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8023f3a:	687b      	ldr	r3, [r7, #4]
 8023f3c:	681b      	ldr	r3, [r3, #0]
 8023f3e:	699b      	ldr	r3, [r3, #24]
 8023f40:	f003 0302 	and.w	r3, r3, #2
 8023f44:	2b02      	cmp	r3, #2
 8023f46:	d103      	bne.n	8023f50 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8023f48:	687b      	ldr	r3, [r7, #4]
 8023f4a:	681b      	ldr	r3, [r3, #0]
 8023f4c:	2200      	movs	r2, #0
 8023f4e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8023f50:	687b      	ldr	r3, [r7, #4]
 8023f52:	681b      	ldr	r3, [r3, #0]
 8023f54:	699b      	ldr	r3, [r3, #24]
 8023f56:	f003 0301 	and.w	r3, r3, #1
 8023f5a:	2b01      	cmp	r3, #1
 8023f5c:	d007      	beq.n	8023f6e <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8023f5e:	687b      	ldr	r3, [r7, #4]
 8023f60:	681b      	ldr	r3, [r3, #0]
 8023f62:	699a      	ldr	r2, [r3, #24]
 8023f64:	687b      	ldr	r3, [r7, #4]
 8023f66:	681b      	ldr	r3, [r3, #0]
 8023f68:	f042 0201 	orr.w	r2, r2, #1
 8023f6c:	619a      	str	r2, [r3, #24]
  }
}
 8023f6e:	bf00      	nop
 8023f70:	370c      	adds	r7, #12
 8023f72:	46bd      	mov	sp, r7
 8023f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023f78:	4770      	bx	lr

08023f7a <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8023f7a:	b580      	push	{r7, lr}
 8023f7c:	b084      	sub	sp, #16
 8023f7e:	af00      	add	r7, sp, #0
 8023f80:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8023f82:	687b      	ldr	r3, [r7, #4]
 8023f84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8023f86:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8023f88:	68fb      	ldr	r3, [r7, #12]
 8023f8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8023f8c:	2b00      	cmp	r3, #0
 8023f8e:	d003      	beq.n	8023f98 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8023f90:	68fb      	ldr	r3, [r7, #12]
 8023f92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8023f94:	2200      	movs	r2, #0
 8023f96:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8023f98:	68fb      	ldr	r3, [r7, #12]
 8023f9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8023f9c:	2b00      	cmp	r3, #0
 8023f9e:	d003      	beq.n	8023fa8 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8023fa0:	68fb      	ldr	r3, [r7, #12]
 8023fa2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8023fa4:	2200      	movs	r2, #0
 8023fa6:	651a      	str	r2, [r3, #80]	; 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 8023fa8:	68f8      	ldr	r0, [r7, #12]
 8023faa:	f7ff ff9b 	bl	8023ee4 <I2C_TreatErrorCallback>
}
 8023fae:	bf00      	nop
 8023fb0:	3710      	adds	r7, #16
 8023fb2:	46bd      	mov	sp, r7
 8023fb4:	bd80      	pop	{r7, pc}

08023fb6 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8023fb6:	b580      	push	{r7, lr}
 8023fb8:	b084      	sub	sp, #16
 8023fba:	af00      	add	r7, sp, #0
 8023fbc:	60f8      	str	r0, [r7, #12]
 8023fbe:	60b9      	str	r1, [r7, #8]
 8023fc0:	603b      	str	r3, [r7, #0]
 8023fc2:	4613      	mov	r3, r2
 8023fc4:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8023fc6:	e022      	b.n	802400e <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8023fc8:	683b      	ldr	r3, [r7, #0]
 8023fca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8023fce:	d01e      	beq.n	802400e <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8023fd0:	f7fd ff96 	bl	8021f00 <HAL_GetTick>
 8023fd4:	4602      	mov	r2, r0
 8023fd6:	69bb      	ldr	r3, [r7, #24]
 8023fd8:	1ad3      	subs	r3, r2, r3
 8023fda:	683a      	ldr	r2, [r7, #0]
 8023fdc:	429a      	cmp	r2, r3
 8023fde:	d302      	bcc.n	8023fe6 <I2C_WaitOnFlagUntilTimeout+0x30>
 8023fe0:	683b      	ldr	r3, [r7, #0]
 8023fe2:	2b00      	cmp	r3, #0
 8023fe4:	d113      	bne.n	802400e <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8023fe6:	68fb      	ldr	r3, [r7, #12]
 8023fe8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8023fea:	f043 0220 	orr.w	r2, r3, #32
 8023fee:	68fb      	ldr	r3, [r7, #12]
 8023ff0:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8023ff2:	68fb      	ldr	r3, [r7, #12]
 8023ff4:	2220      	movs	r2, #32
 8023ff6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8023ffa:	68fb      	ldr	r3, [r7, #12]
 8023ffc:	2200      	movs	r2, #0
 8023ffe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8024002:	68fb      	ldr	r3, [r7, #12]
 8024004:	2200      	movs	r2, #0
 8024006:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 802400a:	2301      	movs	r3, #1
 802400c:	e00f      	b.n	802402e <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 802400e:	68fb      	ldr	r3, [r7, #12]
 8024010:	681b      	ldr	r3, [r3, #0]
 8024012:	699a      	ldr	r2, [r3, #24]
 8024014:	68bb      	ldr	r3, [r7, #8]
 8024016:	4013      	ands	r3, r2
 8024018:	68ba      	ldr	r2, [r7, #8]
 802401a:	429a      	cmp	r2, r3
 802401c:	bf0c      	ite	eq
 802401e:	2301      	moveq	r3, #1
 8024020:	2300      	movne	r3, #0
 8024022:	b2db      	uxtb	r3, r3
 8024024:	461a      	mov	r2, r3
 8024026:	79fb      	ldrb	r3, [r7, #7]
 8024028:	429a      	cmp	r2, r3
 802402a:	d0cd      	beq.n	8023fc8 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 802402c:	2300      	movs	r3, #0
}
 802402e:	4618      	mov	r0, r3
 8024030:	3710      	adds	r7, #16
 8024032:	46bd      	mov	sp, r7
 8024034:	bd80      	pop	{r7, pc}

08024036 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8024036:	b580      	push	{r7, lr}
 8024038:	b084      	sub	sp, #16
 802403a:	af00      	add	r7, sp, #0
 802403c:	60f8      	str	r0, [r7, #12]
 802403e:	60b9      	str	r1, [r7, #8]
 8024040:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8024042:	e02c      	b.n	802409e <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8024044:	687a      	ldr	r2, [r7, #4]
 8024046:	68b9      	ldr	r1, [r7, #8]
 8024048:	68f8      	ldr	r0, [r7, #12]
 802404a:	f000 f871 	bl	8024130 <I2C_IsErrorOccurred>
 802404e:	4603      	mov	r3, r0
 8024050:	2b00      	cmp	r3, #0
 8024052:	d001      	beq.n	8024058 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8024054:	2301      	movs	r3, #1
 8024056:	e02a      	b.n	80240ae <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8024058:	68bb      	ldr	r3, [r7, #8]
 802405a:	f1b3 3fff 	cmp.w	r3, #4294967295
 802405e:	d01e      	beq.n	802409e <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8024060:	f7fd ff4e 	bl	8021f00 <HAL_GetTick>
 8024064:	4602      	mov	r2, r0
 8024066:	687b      	ldr	r3, [r7, #4]
 8024068:	1ad3      	subs	r3, r2, r3
 802406a:	68ba      	ldr	r2, [r7, #8]
 802406c:	429a      	cmp	r2, r3
 802406e:	d302      	bcc.n	8024076 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8024070:	68bb      	ldr	r3, [r7, #8]
 8024072:	2b00      	cmp	r3, #0
 8024074:	d113      	bne.n	802409e <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8024076:	68fb      	ldr	r3, [r7, #12]
 8024078:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 802407a:	f043 0220 	orr.w	r2, r3, #32
 802407e:	68fb      	ldr	r3, [r7, #12]
 8024080:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8024082:	68fb      	ldr	r3, [r7, #12]
 8024084:	2220      	movs	r2, #32
 8024086:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 802408a:	68fb      	ldr	r3, [r7, #12]
 802408c:	2200      	movs	r2, #0
 802408e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8024092:	68fb      	ldr	r3, [r7, #12]
 8024094:	2200      	movs	r2, #0
 8024096:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 802409a:	2301      	movs	r3, #1
 802409c:	e007      	b.n	80240ae <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 802409e:	68fb      	ldr	r3, [r7, #12]
 80240a0:	681b      	ldr	r3, [r3, #0]
 80240a2:	699b      	ldr	r3, [r3, #24]
 80240a4:	f003 0302 	and.w	r3, r3, #2
 80240a8:	2b02      	cmp	r3, #2
 80240aa:	d1cb      	bne.n	8024044 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80240ac:	2300      	movs	r3, #0
}
 80240ae:	4618      	mov	r0, r3
 80240b0:	3710      	adds	r7, #16
 80240b2:	46bd      	mov	sp, r7
 80240b4:	bd80      	pop	{r7, pc}

080240b6 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80240b6:	b580      	push	{r7, lr}
 80240b8:	b084      	sub	sp, #16
 80240ba:	af00      	add	r7, sp, #0
 80240bc:	60f8      	str	r0, [r7, #12]
 80240be:	60b9      	str	r1, [r7, #8]
 80240c0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80240c2:	e028      	b.n	8024116 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80240c4:	687a      	ldr	r2, [r7, #4]
 80240c6:	68b9      	ldr	r1, [r7, #8]
 80240c8:	68f8      	ldr	r0, [r7, #12]
 80240ca:	f000 f831 	bl	8024130 <I2C_IsErrorOccurred>
 80240ce:	4603      	mov	r3, r0
 80240d0:	2b00      	cmp	r3, #0
 80240d2:	d001      	beq.n	80240d8 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80240d4:	2301      	movs	r3, #1
 80240d6:	e026      	b.n	8024126 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80240d8:	f7fd ff12 	bl	8021f00 <HAL_GetTick>
 80240dc:	4602      	mov	r2, r0
 80240de:	687b      	ldr	r3, [r7, #4]
 80240e0:	1ad3      	subs	r3, r2, r3
 80240e2:	68ba      	ldr	r2, [r7, #8]
 80240e4:	429a      	cmp	r2, r3
 80240e6:	d302      	bcc.n	80240ee <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80240e8:	68bb      	ldr	r3, [r7, #8]
 80240ea:	2b00      	cmp	r3, #0
 80240ec:	d113      	bne.n	8024116 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80240ee:	68fb      	ldr	r3, [r7, #12]
 80240f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80240f2:	f043 0220 	orr.w	r2, r3, #32
 80240f6:	68fb      	ldr	r3, [r7, #12]
 80240f8:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80240fa:	68fb      	ldr	r3, [r7, #12]
 80240fc:	2220      	movs	r2, #32
 80240fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8024102:	68fb      	ldr	r3, [r7, #12]
 8024104:	2200      	movs	r2, #0
 8024106:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 802410a:	68fb      	ldr	r3, [r7, #12]
 802410c:	2200      	movs	r2, #0
 802410e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8024112:	2301      	movs	r3, #1
 8024114:	e007      	b.n	8024126 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8024116:	68fb      	ldr	r3, [r7, #12]
 8024118:	681b      	ldr	r3, [r3, #0]
 802411a:	699b      	ldr	r3, [r3, #24]
 802411c:	f003 0320 	and.w	r3, r3, #32
 8024120:	2b20      	cmp	r3, #32
 8024122:	d1cf      	bne.n	80240c4 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8024124:	2300      	movs	r3, #0
}
 8024126:	4618      	mov	r0, r3
 8024128:	3710      	adds	r7, #16
 802412a:	46bd      	mov	sp, r7
 802412c:	bd80      	pop	{r7, pc}
	...

08024130 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8024130:	b580      	push	{r7, lr}
 8024132:	b08a      	sub	sp, #40	; 0x28
 8024134:	af00      	add	r7, sp, #0
 8024136:	60f8      	str	r0, [r7, #12]
 8024138:	60b9      	str	r1, [r7, #8]
 802413a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 802413c:	2300      	movs	r3, #0
 802413e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8024142:	68fb      	ldr	r3, [r7, #12]
 8024144:	681b      	ldr	r3, [r3, #0]
 8024146:	699b      	ldr	r3, [r3, #24]
 8024148:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 802414a:	2300      	movs	r3, #0
 802414c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 802414e:	687b      	ldr	r3, [r7, #4]
 8024150:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8024152:	69bb      	ldr	r3, [r7, #24]
 8024154:	f003 0310 	and.w	r3, r3, #16
 8024158:	2b00      	cmp	r3, #0
 802415a:	d068      	beq.n	802422e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 802415c:	68fb      	ldr	r3, [r7, #12]
 802415e:	681b      	ldr	r3, [r3, #0]
 8024160:	2210      	movs	r2, #16
 8024162:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8024164:	e049      	b.n	80241fa <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8024166:	68bb      	ldr	r3, [r7, #8]
 8024168:	f1b3 3fff 	cmp.w	r3, #4294967295
 802416c:	d045      	beq.n	80241fa <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 802416e:	f7fd fec7 	bl	8021f00 <HAL_GetTick>
 8024172:	4602      	mov	r2, r0
 8024174:	69fb      	ldr	r3, [r7, #28]
 8024176:	1ad3      	subs	r3, r2, r3
 8024178:	68ba      	ldr	r2, [r7, #8]
 802417a:	429a      	cmp	r2, r3
 802417c:	d302      	bcc.n	8024184 <I2C_IsErrorOccurred+0x54>
 802417e:	68bb      	ldr	r3, [r7, #8]
 8024180:	2b00      	cmp	r3, #0
 8024182:	d13a      	bne.n	80241fa <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8024184:	68fb      	ldr	r3, [r7, #12]
 8024186:	681b      	ldr	r3, [r3, #0]
 8024188:	685b      	ldr	r3, [r3, #4]
 802418a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 802418e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8024190:	68fb      	ldr	r3, [r7, #12]
 8024192:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8024196:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8024198:	68fb      	ldr	r3, [r7, #12]
 802419a:	681b      	ldr	r3, [r3, #0]
 802419c:	699b      	ldr	r3, [r3, #24]
 802419e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80241a2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80241a6:	d121      	bne.n	80241ec <I2C_IsErrorOccurred+0xbc>
 80241a8:	697b      	ldr	r3, [r7, #20]
 80241aa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80241ae:	d01d      	beq.n	80241ec <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80241b0:	7cfb      	ldrb	r3, [r7, #19]
 80241b2:	2b20      	cmp	r3, #32
 80241b4:	d01a      	beq.n	80241ec <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80241b6:	68fb      	ldr	r3, [r7, #12]
 80241b8:	681b      	ldr	r3, [r3, #0]
 80241ba:	685a      	ldr	r2, [r3, #4]
 80241bc:	68fb      	ldr	r3, [r7, #12]
 80241be:	681b      	ldr	r3, [r3, #0]
 80241c0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80241c4:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80241c6:	f7fd fe9b 	bl	8021f00 <HAL_GetTick>
 80241ca:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80241cc:	e00e      	b.n	80241ec <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80241ce:	f7fd fe97 	bl	8021f00 <HAL_GetTick>
 80241d2:	4602      	mov	r2, r0
 80241d4:	69fb      	ldr	r3, [r7, #28]
 80241d6:	1ad3      	subs	r3, r2, r3
 80241d8:	2b19      	cmp	r3, #25
 80241da:	d907      	bls.n	80241ec <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 80241dc:	6a3b      	ldr	r3, [r7, #32]
 80241de:	f043 0320 	orr.w	r3, r3, #32
 80241e2:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80241e4:	2301      	movs	r3, #1
 80241e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 80241ea:	e006      	b.n	80241fa <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80241ec:	68fb      	ldr	r3, [r7, #12]
 80241ee:	681b      	ldr	r3, [r3, #0]
 80241f0:	699b      	ldr	r3, [r3, #24]
 80241f2:	f003 0320 	and.w	r3, r3, #32
 80241f6:	2b20      	cmp	r3, #32
 80241f8:	d1e9      	bne.n	80241ce <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80241fa:	68fb      	ldr	r3, [r7, #12]
 80241fc:	681b      	ldr	r3, [r3, #0]
 80241fe:	699b      	ldr	r3, [r3, #24]
 8024200:	f003 0320 	and.w	r3, r3, #32
 8024204:	2b20      	cmp	r3, #32
 8024206:	d003      	beq.n	8024210 <I2C_IsErrorOccurred+0xe0>
 8024208:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 802420c:	2b00      	cmp	r3, #0
 802420e:	d0aa      	beq.n	8024166 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8024210:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8024214:	2b00      	cmp	r3, #0
 8024216:	d103      	bne.n	8024220 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8024218:	68fb      	ldr	r3, [r7, #12]
 802421a:	681b      	ldr	r3, [r3, #0]
 802421c:	2220      	movs	r2, #32
 802421e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8024220:	6a3b      	ldr	r3, [r7, #32]
 8024222:	f043 0304 	orr.w	r3, r3, #4
 8024226:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8024228:	2301      	movs	r3, #1
 802422a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 802422e:	68fb      	ldr	r3, [r7, #12]
 8024230:	681b      	ldr	r3, [r3, #0]
 8024232:	699b      	ldr	r3, [r3, #24]
 8024234:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8024236:	69bb      	ldr	r3, [r7, #24]
 8024238:	f403 7380 	and.w	r3, r3, #256	; 0x100
 802423c:	2b00      	cmp	r3, #0
 802423e:	d00b      	beq.n	8024258 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8024240:	6a3b      	ldr	r3, [r7, #32]
 8024242:	f043 0301 	orr.w	r3, r3, #1
 8024246:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8024248:	68fb      	ldr	r3, [r7, #12]
 802424a:	681b      	ldr	r3, [r3, #0]
 802424c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8024250:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8024252:	2301      	movs	r3, #1
 8024254:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8024258:	69bb      	ldr	r3, [r7, #24]
 802425a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 802425e:	2b00      	cmp	r3, #0
 8024260:	d00b      	beq.n	802427a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8024262:	6a3b      	ldr	r3, [r7, #32]
 8024264:	f043 0308 	orr.w	r3, r3, #8
 8024268:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 802426a:	68fb      	ldr	r3, [r7, #12]
 802426c:	681b      	ldr	r3, [r3, #0]
 802426e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8024272:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8024274:	2301      	movs	r3, #1
 8024276:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 802427a:	69bb      	ldr	r3, [r7, #24]
 802427c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8024280:	2b00      	cmp	r3, #0
 8024282:	d00b      	beq.n	802429c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8024284:	6a3b      	ldr	r3, [r7, #32]
 8024286:	f043 0302 	orr.w	r3, r3, #2
 802428a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 802428c:	68fb      	ldr	r3, [r7, #12]
 802428e:	681b      	ldr	r3, [r3, #0]
 8024290:	f44f 7200 	mov.w	r2, #512	; 0x200
 8024294:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8024296:	2301      	movs	r3, #1
 8024298:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 802429c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80242a0:	2b00      	cmp	r3, #0
 80242a2:	d01c      	beq.n	80242de <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80242a4:	68f8      	ldr	r0, [r7, #12]
 80242a6:	f7ff fe44 	bl	8023f32 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80242aa:	68fb      	ldr	r3, [r7, #12]
 80242ac:	681b      	ldr	r3, [r3, #0]
 80242ae:	6859      	ldr	r1, [r3, #4]
 80242b0:	68fb      	ldr	r3, [r7, #12]
 80242b2:	681a      	ldr	r2, [r3, #0]
 80242b4:	4b0d      	ldr	r3, [pc, #52]	; (80242ec <I2C_IsErrorOccurred+0x1bc>)
 80242b6:	400b      	ands	r3, r1
 80242b8:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80242ba:	68fb      	ldr	r3, [r7, #12]
 80242bc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80242be:	6a3b      	ldr	r3, [r7, #32]
 80242c0:	431a      	orrs	r2, r3
 80242c2:	68fb      	ldr	r3, [r7, #12]
 80242c4:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80242c6:	68fb      	ldr	r3, [r7, #12]
 80242c8:	2220      	movs	r2, #32
 80242ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80242ce:	68fb      	ldr	r3, [r7, #12]
 80242d0:	2200      	movs	r2, #0
 80242d2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80242d6:	68fb      	ldr	r3, [r7, #12]
 80242d8:	2200      	movs	r2, #0
 80242da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80242de:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80242e2:	4618      	mov	r0, r3
 80242e4:	3728      	adds	r7, #40	; 0x28
 80242e6:	46bd      	mov	sp, r7
 80242e8:	bd80      	pop	{r7, pc}
 80242ea:	bf00      	nop
 80242ec:	fe00e800 	.word	0xfe00e800

080242f0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80242f0:	b480      	push	{r7}
 80242f2:	b087      	sub	sp, #28
 80242f4:	af00      	add	r7, sp, #0
 80242f6:	60f8      	str	r0, [r7, #12]
 80242f8:	607b      	str	r3, [r7, #4]
 80242fa:	460b      	mov	r3, r1
 80242fc:	817b      	strh	r3, [r7, #10]
 80242fe:	4613      	mov	r3, r2
 8024300:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8024302:	897b      	ldrh	r3, [r7, #10]
 8024304:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8024308:	7a7b      	ldrb	r3, [r7, #9]
 802430a:	041b      	lsls	r3, r3, #16
 802430c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8024310:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8024312:	687b      	ldr	r3, [r7, #4]
 8024314:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8024316:	6a3b      	ldr	r3, [r7, #32]
 8024318:	4313      	orrs	r3, r2
 802431a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 802431e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8024320:	68fb      	ldr	r3, [r7, #12]
 8024322:	681b      	ldr	r3, [r3, #0]
 8024324:	685a      	ldr	r2, [r3, #4]
 8024326:	6a3b      	ldr	r3, [r7, #32]
 8024328:	0d5b      	lsrs	r3, r3, #21
 802432a:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 802432e:	4b08      	ldr	r3, [pc, #32]	; (8024350 <I2C_TransferConfig+0x60>)
 8024330:	430b      	orrs	r3, r1
 8024332:	43db      	mvns	r3, r3
 8024334:	ea02 0103 	and.w	r1, r2, r3
 8024338:	68fb      	ldr	r3, [r7, #12]
 802433a:	681b      	ldr	r3, [r3, #0]
 802433c:	697a      	ldr	r2, [r7, #20]
 802433e:	430a      	orrs	r2, r1
 8024340:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8024342:	bf00      	nop
 8024344:	371c      	adds	r7, #28
 8024346:	46bd      	mov	sp, r7
 8024348:	f85d 7b04 	ldr.w	r7, [sp], #4
 802434c:	4770      	bx	lr
 802434e:	bf00      	nop
 8024350:	03ff63ff 	.word	0x03ff63ff

08024354 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8024354:	b480      	push	{r7}
 8024356:	b085      	sub	sp, #20
 8024358:	af00      	add	r7, sp, #0
 802435a:	6078      	str	r0, [r7, #4]
 802435c:	460b      	mov	r3, r1
 802435e:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8024360:	2300      	movs	r3, #0
 8024362:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8024364:	887b      	ldrh	r3, [r7, #2]
 8024366:	f003 0301 	and.w	r3, r3, #1
 802436a:	2b00      	cmp	r3, #0
 802436c:	d00f      	beq.n	802438e <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 802436e:	68fb      	ldr	r3, [r7, #12]
 8024370:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 8024374:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8024376:	687b      	ldr	r3, [r7, #4]
 8024378:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 802437c:	b2db      	uxtb	r3, r3
 802437e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8024382:	2b28      	cmp	r3, #40	; 0x28
 8024384:	d003      	beq.n	802438e <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8024386:	68fb      	ldr	r3, [r7, #12]
 8024388:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 802438c:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 802438e:	887b      	ldrh	r3, [r7, #2]
 8024390:	f003 0302 	and.w	r3, r3, #2
 8024394:	2b00      	cmp	r3, #0
 8024396:	d00f      	beq.n	80243b8 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8024398:	68fb      	ldr	r3, [r7, #12]
 802439a:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 802439e:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80243a0:	687b      	ldr	r3, [r7, #4]
 80243a2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80243a6:	b2db      	uxtb	r3, r3
 80243a8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80243ac:	2b28      	cmp	r3, #40	; 0x28
 80243ae:	d003      	beq.n	80243b8 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80243b0:	68fb      	ldr	r3, [r7, #12]
 80243b2:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 80243b6:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80243b8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80243bc:	2b00      	cmp	r3, #0
 80243be:	da03      	bge.n	80243c8 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80243c0:	68fb      	ldr	r3, [r7, #12]
 80243c2:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 80243c6:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 80243c8:	887b      	ldrh	r3, [r7, #2]
 80243ca:	2b10      	cmp	r3, #16
 80243cc:	d103      	bne.n	80243d6 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80243ce:	68fb      	ldr	r3, [r7, #12]
 80243d0:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 80243d4:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 80243d6:	887b      	ldrh	r3, [r7, #2]
 80243d8:	2b20      	cmp	r3, #32
 80243da:	d103      	bne.n	80243e4 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 80243dc:	68fb      	ldr	r3, [r7, #12]
 80243de:	f043 0320 	orr.w	r3, r3, #32
 80243e2:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 80243e4:	887b      	ldrh	r3, [r7, #2]
 80243e6:	2b40      	cmp	r3, #64	; 0x40
 80243e8:	d103      	bne.n	80243f2 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 80243ea:	68fb      	ldr	r3, [r7, #12]
 80243ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80243f0:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80243f2:	687b      	ldr	r3, [r7, #4]
 80243f4:	681b      	ldr	r3, [r3, #0]
 80243f6:	6819      	ldr	r1, [r3, #0]
 80243f8:	68fb      	ldr	r3, [r7, #12]
 80243fa:	43da      	mvns	r2, r3
 80243fc:	687b      	ldr	r3, [r7, #4]
 80243fe:	681b      	ldr	r3, [r3, #0]
 8024400:	400a      	ands	r2, r1
 8024402:	601a      	str	r2, [r3, #0]
}
 8024404:	bf00      	nop
 8024406:	3714      	adds	r7, #20
 8024408:	46bd      	mov	sp, r7
 802440a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802440e:	4770      	bx	lr

08024410 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8024410:	b480      	push	{r7}
 8024412:	b083      	sub	sp, #12
 8024414:	af00      	add	r7, sp, #0
 8024416:	6078      	str	r0, [r7, #4]
 8024418:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 802441a:	687b      	ldr	r3, [r7, #4]
 802441c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8024420:	b2db      	uxtb	r3, r3
 8024422:	2b20      	cmp	r3, #32
 8024424:	d138      	bne.n	8024498 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8024426:	687b      	ldr	r3, [r7, #4]
 8024428:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 802442c:	2b01      	cmp	r3, #1
 802442e:	d101      	bne.n	8024434 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8024430:	2302      	movs	r3, #2
 8024432:	e032      	b.n	802449a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8024434:	687b      	ldr	r3, [r7, #4]
 8024436:	2201      	movs	r2, #1
 8024438:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 802443c:	687b      	ldr	r3, [r7, #4]
 802443e:	2224      	movs	r2, #36	; 0x24
 8024440:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8024444:	687b      	ldr	r3, [r7, #4]
 8024446:	681b      	ldr	r3, [r3, #0]
 8024448:	681a      	ldr	r2, [r3, #0]
 802444a:	687b      	ldr	r3, [r7, #4]
 802444c:	681b      	ldr	r3, [r3, #0]
 802444e:	f022 0201 	bic.w	r2, r2, #1
 8024452:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8024454:	687b      	ldr	r3, [r7, #4]
 8024456:	681b      	ldr	r3, [r3, #0]
 8024458:	681a      	ldr	r2, [r3, #0]
 802445a:	687b      	ldr	r3, [r7, #4]
 802445c:	681b      	ldr	r3, [r3, #0]
 802445e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8024462:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8024464:	687b      	ldr	r3, [r7, #4]
 8024466:	681b      	ldr	r3, [r3, #0]
 8024468:	6819      	ldr	r1, [r3, #0]
 802446a:	687b      	ldr	r3, [r7, #4]
 802446c:	681b      	ldr	r3, [r3, #0]
 802446e:	683a      	ldr	r2, [r7, #0]
 8024470:	430a      	orrs	r2, r1
 8024472:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8024474:	687b      	ldr	r3, [r7, #4]
 8024476:	681b      	ldr	r3, [r3, #0]
 8024478:	681a      	ldr	r2, [r3, #0]
 802447a:	687b      	ldr	r3, [r7, #4]
 802447c:	681b      	ldr	r3, [r3, #0]
 802447e:	f042 0201 	orr.w	r2, r2, #1
 8024482:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8024484:	687b      	ldr	r3, [r7, #4]
 8024486:	2220      	movs	r2, #32
 8024488:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 802448c:	687b      	ldr	r3, [r7, #4]
 802448e:	2200      	movs	r2, #0
 8024490:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8024494:	2300      	movs	r3, #0
 8024496:	e000      	b.n	802449a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8024498:	2302      	movs	r3, #2
  }
}
 802449a:	4618      	mov	r0, r3
 802449c:	370c      	adds	r7, #12
 802449e:	46bd      	mov	sp, r7
 80244a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80244a4:	4770      	bx	lr

080244a6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80244a6:	b480      	push	{r7}
 80244a8:	b085      	sub	sp, #20
 80244aa:	af00      	add	r7, sp, #0
 80244ac:	6078      	str	r0, [r7, #4]
 80244ae:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80244b0:	687b      	ldr	r3, [r7, #4]
 80244b2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80244b6:	b2db      	uxtb	r3, r3
 80244b8:	2b20      	cmp	r3, #32
 80244ba:	d139      	bne.n	8024530 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80244bc:	687b      	ldr	r3, [r7, #4]
 80244be:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80244c2:	2b01      	cmp	r3, #1
 80244c4:	d101      	bne.n	80244ca <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80244c6:	2302      	movs	r3, #2
 80244c8:	e033      	b.n	8024532 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80244ca:	687b      	ldr	r3, [r7, #4]
 80244cc:	2201      	movs	r2, #1
 80244ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80244d2:	687b      	ldr	r3, [r7, #4]
 80244d4:	2224      	movs	r2, #36	; 0x24
 80244d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80244da:	687b      	ldr	r3, [r7, #4]
 80244dc:	681b      	ldr	r3, [r3, #0]
 80244de:	681a      	ldr	r2, [r3, #0]
 80244e0:	687b      	ldr	r3, [r7, #4]
 80244e2:	681b      	ldr	r3, [r3, #0]
 80244e4:	f022 0201 	bic.w	r2, r2, #1
 80244e8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80244ea:	687b      	ldr	r3, [r7, #4]
 80244ec:	681b      	ldr	r3, [r3, #0]
 80244ee:	681b      	ldr	r3, [r3, #0]
 80244f0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80244f2:	68fb      	ldr	r3, [r7, #12]
 80244f4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80244f8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80244fa:	683b      	ldr	r3, [r7, #0]
 80244fc:	021b      	lsls	r3, r3, #8
 80244fe:	68fa      	ldr	r2, [r7, #12]
 8024500:	4313      	orrs	r3, r2
 8024502:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8024504:	687b      	ldr	r3, [r7, #4]
 8024506:	681b      	ldr	r3, [r3, #0]
 8024508:	68fa      	ldr	r2, [r7, #12]
 802450a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 802450c:	687b      	ldr	r3, [r7, #4]
 802450e:	681b      	ldr	r3, [r3, #0]
 8024510:	681a      	ldr	r2, [r3, #0]
 8024512:	687b      	ldr	r3, [r7, #4]
 8024514:	681b      	ldr	r3, [r3, #0]
 8024516:	f042 0201 	orr.w	r2, r2, #1
 802451a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 802451c:	687b      	ldr	r3, [r7, #4]
 802451e:	2220      	movs	r2, #32
 8024520:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8024524:	687b      	ldr	r3, [r7, #4]
 8024526:	2200      	movs	r2, #0
 8024528:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 802452c:	2300      	movs	r3, #0
 802452e:	e000      	b.n	8024532 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8024530:	2302      	movs	r3, #2
  }
}
 8024532:	4618      	mov	r0, r3
 8024534:	3714      	adds	r7, #20
 8024536:	46bd      	mov	sp, r7
 8024538:	f85d 7b04 	ldr.w	r7, [sp], #4
 802453c:	4770      	bx	lr
	...

08024540 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8024540:	b580      	push	{r7, lr}
 8024542:	b088      	sub	sp, #32
 8024544:	af00      	add	r7, sp, #0
 8024546:	6078      	str	r0, [r7, #4]
  uint32_t packetlength;
  uint32_t tmp;
  uint32_t i2sclk;

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8024548:	687b      	ldr	r3, [r7, #4]
 802454a:	2b00      	cmp	r3, #0
 802454c:	d101      	bne.n	8024552 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 802454e:	2301      	movs	r3, #1
 8024550:	e0d2      	b.n	80246f8 <HAL_I2S_Init+0x1b8>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8024552:	687b      	ldr	r3, [r7, #4]
 8024554:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8024558:	b2db      	uxtb	r3, r3
 802455a:	2b00      	cmp	r3, #0
 802455c:	d106      	bne.n	802456c <HAL_I2S_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 802455e:	687b      	ldr	r3, [r7, #4]
 8024560:	2200      	movs	r2, #0
 8024562:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8024566:	6878      	ldr	r0, [r7, #4]
 8024568:	f7fc facc 	bl	8020b04 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 802456c:	687b      	ldr	r3, [r7, #4]
 802456e:	2202      	movs	r2, #2
 8024570:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8024574:	687b      	ldr	r3, [r7, #4]
 8024576:	681b      	ldr	r3, [r3, #0]
 8024578:	69d9      	ldr	r1, [r3, #28]
 802457a:	687b      	ldr	r3, [r7, #4]
 802457c:	681a      	ldr	r2, [r3, #0]
 802457e:	4b60      	ldr	r3, [pc, #384]	; (8024700 <HAL_I2S_Init+0x1c0>)
 8024580:	400b      	ands	r3, r1
 8024582:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8024584:	687b      	ldr	r3, [r7, #4]
 8024586:	681b      	ldr	r3, [r3, #0]
 8024588:	2202      	movs	r2, #2
 802458a:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 802458c:	687b      	ldr	r3, [r7, #4]
 802458e:	695b      	ldr	r3, [r3, #20]
 8024590:	2b02      	cmp	r3, #2
 8024592:	d067      	beq.n	8024664 <HAL_I2S_Init+0x124>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8024594:	687b      	ldr	r3, [r7, #4]
 8024596:	68db      	ldr	r3, [r3, #12]
 8024598:	2b00      	cmp	r3, #0
 802459a:	d102      	bne.n	80245a2 <HAL_I2S_Init+0x62>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 802459c:	2310      	movs	r3, #16
 802459e:	617b      	str	r3, [r7, #20]
 80245a0:	e001      	b.n	80245a6 <HAL_I2S_Init+0x66>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 80245a2:	2320      	movs	r3, #32
 80245a4:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80245a6:	687b      	ldr	r3, [r7, #4]
 80245a8:	689b      	ldr	r3, [r3, #8]
 80245aa:	2b20      	cmp	r3, #32
 80245ac:	d802      	bhi.n	80245b4 <HAL_I2S_Init+0x74>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 80245ae:	697b      	ldr	r3, [r7, #20]
 80245b0:	005b      	lsls	r3, r3, #1
 80245b2:	617b      	str	r3, [r7, #20]
    }

    /* If an external I2S clock has to be used, the specific define should be set
    in the project configuration or in the stm32f3xx_conf.h file */
    if (hi2s->Init.ClockSource == I2S_CLOCK_EXTERNAL)
 80245b4:	687b      	ldr	r3, [r7, #4]
 80245b6:	69db      	ldr	r3, [r3, #28]
 80245b8:	2b01      	cmp	r3, #1
 80245ba:	d102      	bne.n	80245c2 <HAL_I2S_Init+0x82>
    {
      /* Set the I2S clock to the external clock  value */
      i2sclk = EXTERNAL_CLOCK_VALUE;
 80245bc:	4b51      	ldr	r3, [pc, #324]	; (8024704 <HAL_I2S_Init+0x1c4>)
 80245be:	60fb      	str	r3, [r7, #12]
 80245c0:	e003      	b.n	80245ca <HAL_I2S_Init+0x8a>
    }
    else
    {
      /* Get the I2S source clock value */
      i2sclk = I2S_GetClockFreq(hi2s);
 80245c2:	6878      	ldr	r0, [r7, #4]
 80245c4:	f000 f918 	bl	80247f8 <I2S_GetClockFreq>
 80245c8:	60f8      	str	r0, [r7, #12]
    }

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80245ca:	687b      	ldr	r3, [r7, #4]
 80245cc:	691b      	ldr	r3, [r3, #16]
 80245ce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80245d2:	d125      	bne.n	8024620 <HAL_I2S_Init+0xe0>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80245d4:	687b      	ldr	r3, [r7, #4]
 80245d6:	68db      	ldr	r3, [r3, #12]
 80245d8:	2b00      	cmp	r3, #0
 80245da:	d010      	beq.n	80245fe <HAL_I2S_Init+0xbe>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80245dc:	697b      	ldr	r3, [r7, #20]
 80245de:	009b      	lsls	r3, r3, #2
 80245e0:	68fa      	ldr	r2, [r7, #12]
 80245e2:	fbb2 f2f3 	udiv	r2, r2, r3
 80245e6:	4613      	mov	r3, r2
 80245e8:	009b      	lsls	r3, r3, #2
 80245ea:	4413      	add	r3, r2
 80245ec:	005b      	lsls	r3, r3, #1
 80245ee:	461a      	mov	r2, r3
 80245f0:	687b      	ldr	r3, [r7, #4]
 80245f2:	695b      	ldr	r3, [r3, #20]
 80245f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80245f8:	3305      	adds	r3, #5
 80245fa:	613b      	str	r3, [r7, #16]
 80245fc:	e01f      	b.n	802463e <HAL_I2S_Init+0xfe>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80245fe:	697b      	ldr	r3, [r7, #20]
 8024600:	00db      	lsls	r3, r3, #3
 8024602:	68fa      	ldr	r2, [r7, #12]
 8024604:	fbb2 f2f3 	udiv	r2, r2, r3
 8024608:	4613      	mov	r3, r2
 802460a:	009b      	lsls	r3, r3, #2
 802460c:	4413      	add	r3, r2
 802460e:	005b      	lsls	r3, r3, #1
 8024610:	461a      	mov	r2, r3
 8024612:	687b      	ldr	r3, [r7, #4]
 8024614:	695b      	ldr	r3, [r3, #20]
 8024616:	fbb2 f3f3 	udiv	r3, r2, r3
 802461a:	3305      	adds	r3, #5
 802461c:	613b      	str	r3, [r7, #16]
 802461e:	e00e      	b.n	802463e <HAL_I2S_Init+0xfe>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8024620:	68fa      	ldr	r2, [r7, #12]
 8024622:	697b      	ldr	r3, [r7, #20]
 8024624:	fbb2 f2f3 	udiv	r2, r2, r3
 8024628:	4613      	mov	r3, r2
 802462a:	009b      	lsls	r3, r3, #2
 802462c:	4413      	add	r3, r2
 802462e:	005b      	lsls	r3, r3, #1
 8024630:	461a      	mov	r2, r3
 8024632:	687b      	ldr	r3, [r7, #4]
 8024634:	695b      	ldr	r3, [r3, #20]
 8024636:	fbb2 f3f3 	udiv	r3, r2, r3
 802463a:	3305      	adds	r3, #5
 802463c:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 802463e:	693b      	ldr	r3, [r7, #16]
 8024640:	4a31      	ldr	r2, [pc, #196]	; (8024708 <HAL_I2S_Init+0x1c8>)
 8024642:	fba2 2303 	umull	r2, r3, r2, r3
 8024646:	08db      	lsrs	r3, r3, #3
 8024648:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 802464a:	693b      	ldr	r3, [r7, #16]
 802464c:	f003 0301 	and.w	r3, r3, #1
 8024650:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8024652:	693a      	ldr	r2, [r7, #16]
 8024654:	69bb      	ldr	r3, [r7, #24]
 8024656:	1ad3      	subs	r3, r2, r3
 8024658:	085b      	lsrs	r3, r3, #1
 802465a:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 802465c:	69bb      	ldr	r3, [r7, #24]
 802465e:	021b      	lsls	r3, r3, #8
 8024660:	61bb      	str	r3, [r7, #24]
 8024662:	e003      	b.n	802466c <HAL_I2S_Init+0x12c>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8024664:	2302      	movs	r3, #2
 8024666:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8024668:	2300      	movs	r3, #0
 802466a:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 802466c:	69fb      	ldr	r3, [r7, #28]
 802466e:	2b01      	cmp	r3, #1
 8024670:	d902      	bls.n	8024678 <HAL_I2S_Init+0x138>
 8024672:	69fb      	ldr	r3, [r7, #28]
 8024674:	2bff      	cmp	r3, #255	; 0xff
 8024676:	d907      	bls.n	8024688 <HAL_I2S_Init+0x148>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8024678:	687b      	ldr	r3, [r7, #4]
 802467a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802467c:	f043 0210 	orr.w	r2, r3, #16
 8024680:	687b      	ldr	r3, [r7, #4]
 8024682:	63da      	str	r2, [r3, #60]	; 0x3c
    return  HAL_ERROR;
 8024684:	2301      	movs	r3, #1
 8024686:	e037      	b.n	80246f8 <HAL_I2S_Init+0x1b8>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8024688:	687b      	ldr	r3, [r7, #4]
 802468a:	691a      	ldr	r2, [r3, #16]
 802468c:	69bb      	ldr	r3, [r7, #24]
 802468e:	ea42 0103 	orr.w	r1, r2, r3
 8024692:	687b      	ldr	r3, [r7, #4]
 8024694:	681b      	ldr	r3, [r3, #0]
 8024696:	69fa      	ldr	r2, [r7, #28]
 8024698:	430a      	orrs	r2, r1
 802469a:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 802469c:	687b      	ldr	r3, [r7, #4]
 802469e:	681b      	ldr	r3, [r3, #0]
 80246a0:	69da      	ldr	r2, [r3, #28]
 80246a2:	4b17      	ldr	r3, [pc, #92]	; (8024700 <HAL_I2S_Init+0x1c0>)
 80246a4:	4013      	ands	r3, r2
 80246a6:	687a      	ldr	r2, [r7, #4]
 80246a8:	6851      	ldr	r1, [r2, #4]
 80246aa:	687a      	ldr	r2, [r7, #4]
 80246ac:	6892      	ldr	r2, [r2, #8]
 80246ae:	4311      	orrs	r1, r2
 80246b0:	687a      	ldr	r2, [r7, #4]
 80246b2:	68d2      	ldr	r2, [r2, #12]
 80246b4:	4311      	orrs	r1, r2
 80246b6:	687a      	ldr	r2, [r7, #4]
 80246b8:	6992      	ldr	r2, [r2, #24]
 80246ba:	430a      	orrs	r2, r1
 80246bc:	431a      	orrs	r2, r3
 80246be:	687b      	ldr	r3, [r7, #4]
 80246c0:	681b      	ldr	r3, [r3, #0]
 80246c2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80246c6:	61da      	str	r2, [r3, #28]
             (SPI_I2SCFGR_I2SMOD | hi2s->Init.Mode | \
              hi2s->Init.Standard | hi2s->Init.DataFormat | \
              hi2s->Init.CPOL));

#if defined(SPI_I2SCFGR_ASTRTEN)
  if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) || ((hi2s->Init.Standard == I2S_STANDARD_PCM_LONG)))
 80246c8:	687b      	ldr	r3, [r7, #4]
 80246ca:	689b      	ldr	r3, [r3, #8]
 80246cc:	2b30      	cmp	r3, #48	; 0x30
 80246ce:	d003      	beq.n	80246d8 <HAL_I2S_Init+0x198>
 80246d0:	687b      	ldr	r3, [r7, #4]
 80246d2:	689b      	ldr	r3, [r3, #8]
 80246d4:	2bb0      	cmp	r3, #176	; 0xb0
 80246d6:	d107      	bne.n	80246e8 <HAL_I2S_Init+0x1a8>
  {
    /* Write to SPIx I2SCFGR */
    SET_BIT(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_ASTRTEN);
 80246d8:	687b      	ldr	r3, [r7, #4]
 80246da:	681b      	ldr	r3, [r3, #0]
 80246dc:	69da      	ldr	r2, [r3, #28]
 80246de:	687b      	ldr	r3, [r7, #4]
 80246e0:	681b      	ldr	r3, [r3, #0]
 80246e2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80246e6:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2SCFGR_ASTRTEN */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80246e8:	687b      	ldr	r3, [r7, #4]
 80246ea:	2200      	movs	r2, #0
 80246ec:	63da      	str	r2, [r3, #60]	; 0x3c
  hi2s->State     = HAL_I2S_STATE_READY;
 80246ee:	687b      	ldr	r3, [r7, #4]
 80246f0:	2201      	movs	r2, #1
 80246f2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 80246f6:	2300      	movs	r3, #0
}
 80246f8:	4618      	mov	r0, r3
 80246fa:	3720      	adds	r7, #32
 80246fc:	46bd      	mov	sp, r7
 80246fe:	bd80      	pop	{r7, pc}
 8024700:	fffff040 	.word	0xfffff040
 8024704:	00bb8000 	.word	0x00bb8000
 8024708:	cccccccd 	.word	0xcccccccd

0802470c <HAL_I2S_IRQHandler>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
void HAL_I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 802470c:	b580      	push	{r7, lr}
 802470e:	b084      	sub	sp, #16
 8024710:	af00      	add	r7, sp, #0
 8024712:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hi2s->Instance->CR2;
 8024714:	687b      	ldr	r3, [r7, #4]
 8024716:	681b      	ldr	r3, [r3, #0]
 8024718:	685b      	ldr	r3, [r3, #4]
 802471a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = hi2s->Instance->SR;
 802471c:	687b      	ldr	r3, [r7, #4]
 802471e:	681b      	ldr	r3, [r3, #0]
 8024720:	689b      	ldr	r3, [r3, #8]
 8024722:	60bb      	str	r3, [r7, #8]

  /* I2S in mode Receiver ------------------------------------------------*/
  if ((I2S_CHECK_FLAG(itflag, I2S_FLAG_OVR) == RESET) &&
 8024724:	68bb      	ldr	r3, [r7, #8]
 8024726:	f003 0340 	and.w	r3, r3, #64	; 0x40
 802472a:	2b00      	cmp	r3, #0
 802472c:	d10d      	bne.n	802474a <HAL_I2S_IRQHandler+0x3e>
      (I2S_CHECK_FLAG(itflag, I2S_FLAG_RXNE) != RESET) && (I2S_CHECK_IT_SOURCE(itsource, I2S_IT_RXNE) != RESET))
 802472e:	68bb      	ldr	r3, [r7, #8]
 8024730:	f003 0301 	and.w	r3, r3, #1
  if ((I2S_CHECK_FLAG(itflag, I2S_FLAG_OVR) == RESET) &&
 8024734:	2b00      	cmp	r3, #0
 8024736:	d008      	beq.n	802474a <HAL_I2S_IRQHandler+0x3e>
      (I2S_CHECK_FLAG(itflag, I2S_FLAG_RXNE) != RESET) && (I2S_CHECK_IT_SOURCE(itsource, I2S_IT_RXNE) != RESET))
 8024738:	68fb      	ldr	r3, [r7, #12]
 802473a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 802473e:	2b00      	cmp	r3, #0
 8024740:	d003      	beq.n	802474a <HAL_I2S_IRQHandler+0x3e>
  {
    I2S_Receive_IT(hi2s);
 8024742:	6878      	ldr	r0, [r7, #4]
 8024744:	f000 f8d2 	bl	80248ec <I2S_Receive_IT>
    return;
 8024748:	e03f      	b.n	80247ca <HAL_I2S_IRQHandler+0xbe>
  }

  /* I2S in mode Tramitter -----------------------------------------------*/
  if ((I2S_CHECK_FLAG(itflag, I2S_FLAG_TXE) != RESET) && (I2S_CHECK_IT_SOURCE(itsource, I2S_IT_TXE) != RESET))
 802474a:	68bb      	ldr	r3, [r7, #8]
 802474c:	f003 0302 	and.w	r3, r3, #2
 8024750:	2b00      	cmp	r3, #0
 8024752:	d008      	beq.n	8024766 <HAL_I2S_IRQHandler+0x5a>
 8024754:	68fb      	ldr	r3, [r7, #12]
 8024756:	f003 0380 	and.w	r3, r3, #128	; 0x80
 802475a:	2b00      	cmp	r3, #0
 802475c:	d003      	beq.n	8024766 <HAL_I2S_IRQHandler+0x5a>
  {
    I2S_Transmit_IT(hi2s);
 802475e:	6878      	ldr	r0, [r7, #4]
 8024760:	f000 f896 	bl	8024890 <I2S_Transmit_IT>
    return;
 8024764:	e031      	b.n	80247ca <HAL_I2S_IRQHandler+0xbe>
  }

  /* I2S interrupt error -------------------------------------------------*/
  if (I2S_CHECK_IT_SOURCE(itsource, I2S_IT_ERR) != RESET)
 8024766:	68fb      	ldr	r3, [r7, #12]
 8024768:	f003 0320 	and.w	r3, r3, #32
 802476c:	2b00      	cmp	r3, #0
 802476e:	d02c      	beq.n	80247ca <HAL_I2S_IRQHandler+0xbe>
  {
    /* I2S Overrun error interrupt occurred ---------------------------------*/
    if (I2S_CHECK_FLAG(itflag, I2S_FLAG_OVR) != RESET)
 8024770:	68bb      	ldr	r3, [r7, #8]
 8024772:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8024776:	2b00      	cmp	r3, #0
 8024778:	d00d      	beq.n	8024796 <HAL_I2S_IRQHandler+0x8a>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 802477a:	687b      	ldr	r3, [r7, #4]
 802477c:	681b      	ldr	r3, [r3, #0]
 802477e:	685a      	ldr	r2, [r3, #4]
 8024780:	687b      	ldr	r3, [r7, #4]
 8024782:	681b      	ldr	r3, [r3, #0]
 8024784:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8024788:	605a      	str	r2, [r3, #4]

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 802478a:	687b      	ldr	r3, [r7, #4]
 802478c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802478e:	f043 0202 	orr.w	r2, r3, #2
 8024792:	687b      	ldr	r3, [r7, #4]
 8024794:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (I2S_CHECK_FLAG(itflag, I2S_FLAG_UDR) != RESET)
 8024796:	68bb      	ldr	r3, [r7, #8]
 8024798:	f003 0308 	and.w	r3, r3, #8
 802479c:	2b00      	cmp	r3, #0
 802479e:	d00d      	beq.n	80247bc <HAL_I2S_IRQHandler+0xb0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80247a0:	687b      	ldr	r3, [r7, #4]
 80247a2:	681b      	ldr	r3, [r3, #0]
 80247a4:	685a      	ldr	r2, [r3, #4]
 80247a6:	687b      	ldr	r3, [r7, #4]
 80247a8:	681b      	ldr	r3, [r3, #0]
 80247aa:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80247ae:	605a      	str	r2, [r3, #4]

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80247b0:	687b      	ldr	r3, [r7, #4]
 80247b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80247b4:	f043 0204 	orr.w	r2, r3, #4
 80247b8:	687b      	ldr	r3, [r7, #4]
 80247ba:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Set the I2S State ready */
    hi2s->State = HAL_I2S_STATE_READY;
 80247bc:	687b      	ldr	r3, [r7, #4]
 80247be:	2201      	movs	r2, #1
 80247c0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->ErrorCallback(hi2s);
#else
    HAL_I2S_ErrorCallback(hi2s);
 80247c4:	6878      	ldr	r0, [r7, #4]
 80247c6:	f000 f80d 	bl	80247e4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80247ca:	3710      	adds	r7, #16
 80247cc:	46bd      	mov	sp, r7
 80247ce:	bd80      	pop	{r7, pc}

080247d0 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80247d0:	b480      	push	{r7}
 80247d2:	b083      	sub	sp, #12
 80247d4:	af00      	add	r7, sp, #0
 80247d6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 80247d8:	bf00      	nop
 80247da:	370c      	adds	r7, #12
 80247dc:	46bd      	mov	sp, r7
 80247de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80247e2:	4770      	bx	lr

080247e4 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 80247e4:	b480      	push	{r7}
 80247e6:	b083      	sub	sp, #12
 80247e8:	af00      	add	r7, sp, #0
 80247ea:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 80247ec:	bf00      	nop
 80247ee:	370c      	adds	r7, #12
 80247f0:	46bd      	mov	sp, r7
 80247f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80247f6:	4770      	bx	lr

080247f8 <I2S_GetClockFreq>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *               the configuration information for I2S module.
  * @retval I2S Clock Input
  */
static uint32_t I2S_GetClockFreq(I2S_HandleTypeDef *hi2s)
{
 80247f8:	b480      	push	{r7}
 80247fa:	b087      	sub	sp, #28
 80247fc:	af00      	add	r7, sp, #0
 80247fe:	6078      	str	r0, [r7, #4]
  uint32_t i2sclocksource;

  /* Configure I2S Clock based on I2S source clock selection */

  /* I2S_CLK_x : I2S Block Clock configuration for different clock sources selected */
  switch (hi2s->Init.ClockSource)
 8024800:	687b      	ldr	r3, [r7, #4]
 8024802:	69db      	ldr	r3, [r3, #28]
 8024804:	2b01      	cmp	r3, #1
 8024806:	d02d      	beq.n	8024864 <I2S_GetClockFreq+0x6c>
 8024808:	2b02      	cmp	r3, #2
 802480a:	d12e      	bne.n	802486a <I2S_GetClockFreq+0x72>
  {
    case I2S_CLOCK_PLL :
    {
      /* Configure the PLLI2S division factor */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 802480c:	4b1c      	ldr	r3, [pc, #112]	; (8024880 <I2S_GetClockFreq+0x88>)
 802480e:	685b      	ldr	r3, [r3, #4]
 8024810:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8024814:	2b00      	cmp	r3, #0
 8024816:	d108      	bne.n	802482a <I2S_GetClockFreq+0x32>
      {
        /* In Case the PLL Source is HSI (Internal Clock) */
        vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8024818:	4b19      	ldr	r3, [pc, #100]	; (8024880 <I2S_GetClockFreq+0x88>)
 802481a:	685b      	ldr	r3, [r3, #4]
 802481c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8024820:	4a18      	ldr	r2, [pc, #96]	; (8024884 <I2S_GetClockFreq+0x8c>)
 8024822:	fbb2 f3f3 	udiv	r3, r2, r3
 8024826:	617b      	str	r3, [r7, #20]
 8024828:	e007      	b.n	802483a <I2S_GetClockFreq+0x42>
      }
      else
      {
        /* In Case the PLL Source is HSE (External Clock) */
        vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 802482a:	4b15      	ldr	r3, [pc, #84]	; (8024880 <I2S_GetClockFreq+0x88>)
 802482c:	685b      	ldr	r3, [r3, #4]
 802482e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8024832:	4a15      	ldr	r2, [pc, #84]	; (8024888 <I2S_GetClockFreq+0x90>)
 8024834:	fbb2 f3f3 	udiv	r3, r2, r3
 8024838:	617b      	str	r3, [r7, #20]
      }

      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* I2S_CLK(first level) = PLLI2S_VCO Output/PLLI2SR */
      tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U;
 802483a:	4b11      	ldr	r3, [pc, #68]	; (8024880 <I2S_GetClockFreq+0x88>)
 802483c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8024840:	0f1b      	lsrs	r3, r3, #28
 8024842:	f003 0307 	and.w	r3, r3, #7
 8024846:	60fb      	str	r3, [r7, #12]
      i2sclocksource = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U)) / (tmpreg);
 8024848:	4b0d      	ldr	r3, [pc, #52]	; (8024880 <I2S_GetClockFreq+0x88>)
 802484a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 802484e:	099b      	lsrs	r3, r3, #6
 8024850:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8024854:	697a      	ldr	r2, [r7, #20]
 8024856:	fb03 f202 	mul.w	r2, r3, r2
 802485a:	68fb      	ldr	r3, [r7, #12]
 802485c:	fbb2 f3f3 	udiv	r3, r2, r3
 8024860:	613b      	str	r3, [r7, #16]

      break;
 8024862:	e005      	b.n	8024870 <I2S_GetClockFreq+0x78>
    }
    case I2S_CLOCK_EXTERNAL :
    {
      i2sclocksource = EXTERNAL_CLOCK_VALUE;
 8024864:	4b09      	ldr	r3, [pc, #36]	; (802488c <I2S_GetClockFreq+0x94>)
 8024866:	613b      	str	r3, [r7, #16]
      break;
 8024868:	e002      	b.n	8024870 <I2S_GetClockFreq+0x78>
    }
    default :
    {
      i2sclocksource = 0U;
 802486a:	2300      	movs	r3, #0
 802486c:	613b      	str	r3, [r7, #16]
      break;
 802486e:	bf00      	nop
    }
  }

  /* the return result is the value of I2S clock */
  return i2sclocksource;
 8024870:	693b      	ldr	r3, [r7, #16]
}
 8024872:	4618      	mov	r0, r3
 8024874:	371c      	adds	r7, #28
 8024876:	46bd      	mov	sp, r7
 8024878:	f85d 7b04 	ldr.w	r7, [sp], #4
 802487c:	4770      	bx	lr
 802487e:	bf00      	nop
 8024880:	40023800 	.word	0x40023800
 8024884:	00f42400 	.word	0x00f42400
 8024888:	016e3600 	.word	0x016e3600
 802488c:	00bb8000 	.word	0x00bb8000

08024890 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8024890:	b580      	push	{r7, lr}
 8024892:	b082      	sub	sp, #8
 8024894:	af00      	add	r7, sp, #0
 8024896:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8024898:	687b      	ldr	r3, [r7, #4]
 802489a:	6a1b      	ldr	r3, [r3, #32]
 802489c:	881a      	ldrh	r2, [r3, #0]
 802489e:	687b      	ldr	r3, [r7, #4]
 80248a0:	681b      	ldr	r3, [r3, #0]
 80248a2:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 80248a4:	687b      	ldr	r3, [r7, #4]
 80248a6:	6a1b      	ldr	r3, [r3, #32]
 80248a8:	1c9a      	adds	r2, r3, #2
 80248aa:	687b      	ldr	r3, [r7, #4]
 80248ac:	621a      	str	r2, [r3, #32]
  hi2s->TxXferCount--;
 80248ae:	687b      	ldr	r3, [r7, #4]
 80248b0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80248b2:	b29b      	uxth	r3, r3
 80248b4:	3b01      	subs	r3, #1
 80248b6:	b29a      	uxth	r2, r3
 80248b8:	687b      	ldr	r3, [r7, #4]
 80248ba:	84da      	strh	r2, [r3, #38]	; 0x26

  if (hi2s->TxXferCount == 0U)
 80248bc:	687b      	ldr	r3, [r7, #4]
 80248be:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80248c0:	b29b      	uxth	r3, r3
 80248c2:	2b00      	cmp	r3, #0
 80248c4:	d10e      	bne.n	80248e4 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80248c6:	687b      	ldr	r3, [r7, #4]
 80248c8:	681b      	ldr	r3, [r3, #0]
 80248ca:	685a      	ldr	r2, [r3, #4]
 80248cc:	687b      	ldr	r3, [r7, #4]
 80248ce:	681b      	ldr	r3, [r3, #0]
 80248d0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80248d4:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80248d6:	687b      	ldr	r3, [r7, #4]
 80248d8:	2201      	movs	r2, #1
 80248da:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 80248de:	6878      	ldr	r0, [r7, #4]
 80248e0:	f7ff ff76 	bl	80247d0 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80248e4:	bf00      	nop
 80248e6:	3708      	adds	r7, #8
 80248e8:	46bd      	mov	sp, r7
 80248ea:	bd80      	pop	{r7, pc}

080248ec <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 80248ec:	b580      	push	{r7, lr}
 80248ee:	b082      	sub	sp, #8
 80248f0:	af00      	add	r7, sp, #0
 80248f2:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 80248f4:	687b      	ldr	r3, [r7, #4]
 80248f6:	681b      	ldr	r3, [r3, #0]
 80248f8:	68da      	ldr	r2, [r3, #12]
 80248fa:	687b      	ldr	r3, [r7, #4]
 80248fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80248fe:	b292      	uxth	r2, r2
 8024900:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8024902:	687b      	ldr	r3, [r7, #4]
 8024904:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8024906:	1c9a      	adds	r2, r3, #2
 8024908:	687b      	ldr	r3, [r7, #4]
 802490a:	629a      	str	r2, [r3, #40]	; 0x28
  hi2s->RxXferCount--;
 802490c:	687b      	ldr	r3, [r7, #4]
 802490e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8024910:	b29b      	uxth	r3, r3
 8024912:	3b01      	subs	r3, #1
 8024914:	b29a      	uxth	r2, r3
 8024916:	687b      	ldr	r3, [r7, #4]
 8024918:	85da      	strh	r2, [r3, #46]	; 0x2e

  if (hi2s->RxXferCount == 0U)
 802491a:	687b      	ldr	r3, [r7, #4]
 802491c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 802491e:	b29b      	uxth	r3, r3
 8024920:	2b00      	cmp	r3, #0
 8024922:	d10e      	bne.n	8024942 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8024924:	687b      	ldr	r3, [r7, #4]
 8024926:	681b      	ldr	r3, [r3, #0]
 8024928:	685a      	ldr	r2, [r3, #4]
 802492a:	687b      	ldr	r3, [r7, #4]
 802492c:	681b      	ldr	r3, [r3, #0]
 802492e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8024932:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8024934:	687b      	ldr	r3, [r7, #4]
 8024936:	2201      	movs	r2, #1
 8024938:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 802493c:	6878      	ldr	r0, [r7, #4]
 802493e:	f7fd f811 	bl	8021964 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8024942:	bf00      	nop
 8024944:	3708      	adds	r7, #8
 8024946:	46bd      	mov	sp, r7
 8024948:	bd80      	pop	{r7, pc}

0802494a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 802494a:	b5f0      	push	{r4, r5, r6, r7, lr}
 802494c:	b08f      	sub	sp, #60	; 0x3c
 802494e:	af0a      	add	r7, sp, #40	; 0x28
 8024950:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8024952:	687b      	ldr	r3, [r7, #4]
 8024954:	2b00      	cmp	r3, #0
 8024956:	d101      	bne.n	802495c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8024958:	2301      	movs	r3, #1
 802495a:	e116      	b.n	8024b8a <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 802495c:	687b      	ldr	r3, [r7, #4]
 802495e:	681b      	ldr	r3, [r3, #0]
 8024960:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8024962:	687b      	ldr	r3, [r7, #4]
 8024964:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8024968:	b2db      	uxtb	r3, r3
 802496a:	2b00      	cmp	r3, #0
 802496c:	d106      	bne.n	802497c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 802496e:	687b      	ldr	r3, [r7, #4]
 8024970:	2200      	movs	r2, #0
 8024972:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8024976:	6878      	ldr	r0, [r7, #4]
 8024978:	f006 fb86 	bl	802b088 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 802497c:	687b      	ldr	r3, [r7, #4]
 802497e:	2203      	movs	r2, #3
 8024980:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8024984:	68bb      	ldr	r3, [r7, #8]
 8024986:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8024988:	f403 7380 	and.w	r3, r3, #256	; 0x100
 802498c:	2b00      	cmp	r3, #0
 802498e:	d102      	bne.n	8024996 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8024990:	687b      	ldr	r3, [r7, #4]
 8024992:	2200      	movs	r2, #0
 8024994:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8024996:	687b      	ldr	r3, [r7, #4]
 8024998:	681b      	ldr	r3, [r3, #0]
 802499a:	4618      	mov	r0, r3
 802499c:	f002 fcc9 	bl	8027332 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80249a0:	687b      	ldr	r3, [r7, #4]
 80249a2:	681b      	ldr	r3, [r3, #0]
 80249a4:	603b      	str	r3, [r7, #0]
 80249a6:	687e      	ldr	r6, [r7, #4]
 80249a8:	466d      	mov	r5, sp
 80249aa:	f106 0410 	add.w	r4, r6, #16
 80249ae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80249b0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80249b2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80249b4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80249b6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80249ba:	e885 0003 	stmia.w	r5, {r0, r1}
 80249be:	1d33      	adds	r3, r6, #4
 80249c0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80249c2:	6838      	ldr	r0, [r7, #0]
 80249c4:	f002 fb6c 	bl	80270a0 <USB_CoreInit>
 80249c8:	4603      	mov	r3, r0
 80249ca:	2b00      	cmp	r3, #0
 80249cc:	d005      	beq.n	80249da <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80249ce:	687b      	ldr	r3, [r7, #4]
 80249d0:	2202      	movs	r2, #2
 80249d2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80249d6:	2301      	movs	r3, #1
 80249d8:	e0d7      	b.n	8024b8a <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80249da:	687b      	ldr	r3, [r7, #4]
 80249dc:	681b      	ldr	r3, [r3, #0]
 80249de:	2100      	movs	r1, #0
 80249e0:	4618      	mov	r0, r3
 80249e2:	f002 fcb7 	bl	8027354 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80249e6:	2300      	movs	r3, #0
 80249e8:	73fb      	strb	r3, [r7, #15]
 80249ea:	e04a      	b.n	8024a82 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80249ec:	7bfa      	ldrb	r2, [r7, #15]
 80249ee:	6879      	ldr	r1, [r7, #4]
 80249f0:	4613      	mov	r3, r2
 80249f2:	00db      	lsls	r3, r3, #3
 80249f4:	4413      	add	r3, r2
 80249f6:	009b      	lsls	r3, r3, #2
 80249f8:	440b      	add	r3, r1
 80249fa:	333d      	adds	r3, #61	; 0x3d
 80249fc:	2201      	movs	r2, #1
 80249fe:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8024a00:	7bfa      	ldrb	r2, [r7, #15]
 8024a02:	6879      	ldr	r1, [r7, #4]
 8024a04:	4613      	mov	r3, r2
 8024a06:	00db      	lsls	r3, r3, #3
 8024a08:	4413      	add	r3, r2
 8024a0a:	009b      	lsls	r3, r3, #2
 8024a0c:	440b      	add	r3, r1
 8024a0e:	333c      	adds	r3, #60	; 0x3c
 8024a10:	7bfa      	ldrb	r2, [r7, #15]
 8024a12:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8024a14:	7bfa      	ldrb	r2, [r7, #15]
 8024a16:	7bfb      	ldrb	r3, [r7, #15]
 8024a18:	b298      	uxth	r0, r3
 8024a1a:	6879      	ldr	r1, [r7, #4]
 8024a1c:	4613      	mov	r3, r2
 8024a1e:	00db      	lsls	r3, r3, #3
 8024a20:	4413      	add	r3, r2
 8024a22:	009b      	lsls	r3, r3, #2
 8024a24:	440b      	add	r3, r1
 8024a26:	3344      	adds	r3, #68	; 0x44
 8024a28:	4602      	mov	r2, r0
 8024a2a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8024a2c:	7bfa      	ldrb	r2, [r7, #15]
 8024a2e:	6879      	ldr	r1, [r7, #4]
 8024a30:	4613      	mov	r3, r2
 8024a32:	00db      	lsls	r3, r3, #3
 8024a34:	4413      	add	r3, r2
 8024a36:	009b      	lsls	r3, r3, #2
 8024a38:	440b      	add	r3, r1
 8024a3a:	3340      	adds	r3, #64	; 0x40
 8024a3c:	2200      	movs	r2, #0
 8024a3e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8024a40:	7bfa      	ldrb	r2, [r7, #15]
 8024a42:	6879      	ldr	r1, [r7, #4]
 8024a44:	4613      	mov	r3, r2
 8024a46:	00db      	lsls	r3, r3, #3
 8024a48:	4413      	add	r3, r2
 8024a4a:	009b      	lsls	r3, r3, #2
 8024a4c:	440b      	add	r3, r1
 8024a4e:	3348      	adds	r3, #72	; 0x48
 8024a50:	2200      	movs	r2, #0
 8024a52:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8024a54:	7bfa      	ldrb	r2, [r7, #15]
 8024a56:	6879      	ldr	r1, [r7, #4]
 8024a58:	4613      	mov	r3, r2
 8024a5a:	00db      	lsls	r3, r3, #3
 8024a5c:	4413      	add	r3, r2
 8024a5e:	009b      	lsls	r3, r3, #2
 8024a60:	440b      	add	r3, r1
 8024a62:	334c      	adds	r3, #76	; 0x4c
 8024a64:	2200      	movs	r2, #0
 8024a66:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8024a68:	7bfa      	ldrb	r2, [r7, #15]
 8024a6a:	6879      	ldr	r1, [r7, #4]
 8024a6c:	4613      	mov	r3, r2
 8024a6e:	00db      	lsls	r3, r3, #3
 8024a70:	4413      	add	r3, r2
 8024a72:	009b      	lsls	r3, r3, #2
 8024a74:	440b      	add	r3, r1
 8024a76:	3354      	adds	r3, #84	; 0x54
 8024a78:	2200      	movs	r2, #0
 8024a7a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8024a7c:	7bfb      	ldrb	r3, [r7, #15]
 8024a7e:	3301      	adds	r3, #1
 8024a80:	73fb      	strb	r3, [r7, #15]
 8024a82:	7bfa      	ldrb	r2, [r7, #15]
 8024a84:	687b      	ldr	r3, [r7, #4]
 8024a86:	685b      	ldr	r3, [r3, #4]
 8024a88:	429a      	cmp	r2, r3
 8024a8a:	d3af      	bcc.n	80249ec <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8024a8c:	2300      	movs	r3, #0
 8024a8e:	73fb      	strb	r3, [r7, #15]
 8024a90:	e044      	b.n	8024b1c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8024a92:	7bfa      	ldrb	r2, [r7, #15]
 8024a94:	6879      	ldr	r1, [r7, #4]
 8024a96:	4613      	mov	r3, r2
 8024a98:	00db      	lsls	r3, r3, #3
 8024a9a:	4413      	add	r3, r2
 8024a9c:	009b      	lsls	r3, r3, #2
 8024a9e:	440b      	add	r3, r1
 8024aa0:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8024aa4:	2200      	movs	r2, #0
 8024aa6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8024aa8:	7bfa      	ldrb	r2, [r7, #15]
 8024aaa:	6879      	ldr	r1, [r7, #4]
 8024aac:	4613      	mov	r3, r2
 8024aae:	00db      	lsls	r3, r3, #3
 8024ab0:	4413      	add	r3, r2
 8024ab2:	009b      	lsls	r3, r3, #2
 8024ab4:	440b      	add	r3, r1
 8024ab6:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8024aba:	7bfa      	ldrb	r2, [r7, #15]
 8024abc:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8024abe:	7bfa      	ldrb	r2, [r7, #15]
 8024ac0:	6879      	ldr	r1, [r7, #4]
 8024ac2:	4613      	mov	r3, r2
 8024ac4:	00db      	lsls	r3, r3, #3
 8024ac6:	4413      	add	r3, r2
 8024ac8:	009b      	lsls	r3, r3, #2
 8024aca:	440b      	add	r3, r1
 8024acc:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8024ad0:	2200      	movs	r2, #0
 8024ad2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8024ad4:	7bfa      	ldrb	r2, [r7, #15]
 8024ad6:	6879      	ldr	r1, [r7, #4]
 8024ad8:	4613      	mov	r3, r2
 8024ada:	00db      	lsls	r3, r3, #3
 8024adc:	4413      	add	r3, r2
 8024ade:	009b      	lsls	r3, r3, #2
 8024ae0:	440b      	add	r3, r1
 8024ae2:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8024ae6:	2200      	movs	r2, #0
 8024ae8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8024aea:	7bfa      	ldrb	r2, [r7, #15]
 8024aec:	6879      	ldr	r1, [r7, #4]
 8024aee:	4613      	mov	r3, r2
 8024af0:	00db      	lsls	r3, r3, #3
 8024af2:	4413      	add	r3, r2
 8024af4:	009b      	lsls	r3, r3, #2
 8024af6:	440b      	add	r3, r1
 8024af8:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8024afc:	2200      	movs	r2, #0
 8024afe:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8024b00:	7bfa      	ldrb	r2, [r7, #15]
 8024b02:	6879      	ldr	r1, [r7, #4]
 8024b04:	4613      	mov	r3, r2
 8024b06:	00db      	lsls	r3, r3, #3
 8024b08:	4413      	add	r3, r2
 8024b0a:	009b      	lsls	r3, r3, #2
 8024b0c:	440b      	add	r3, r1
 8024b0e:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8024b12:	2200      	movs	r2, #0
 8024b14:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8024b16:	7bfb      	ldrb	r3, [r7, #15]
 8024b18:	3301      	adds	r3, #1
 8024b1a:	73fb      	strb	r3, [r7, #15]
 8024b1c:	7bfa      	ldrb	r2, [r7, #15]
 8024b1e:	687b      	ldr	r3, [r7, #4]
 8024b20:	685b      	ldr	r3, [r3, #4]
 8024b22:	429a      	cmp	r2, r3
 8024b24:	d3b5      	bcc.n	8024a92 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8024b26:	687b      	ldr	r3, [r7, #4]
 8024b28:	681b      	ldr	r3, [r3, #0]
 8024b2a:	603b      	str	r3, [r7, #0]
 8024b2c:	687e      	ldr	r6, [r7, #4]
 8024b2e:	466d      	mov	r5, sp
 8024b30:	f106 0410 	add.w	r4, r6, #16
 8024b34:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8024b36:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8024b38:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8024b3a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8024b3c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8024b40:	e885 0003 	stmia.w	r5, {r0, r1}
 8024b44:	1d33      	adds	r3, r6, #4
 8024b46:	cb0e      	ldmia	r3, {r1, r2, r3}
 8024b48:	6838      	ldr	r0, [r7, #0]
 8024b4a:	f002 fc4f 	bl	80273ec <USB_DevInit>
 8024b4e:	4603      	mov	r3, r0
 8024b50:	2b00      	cmp	r3, #0
 8024b52:	d005      	beq.n	8024b60 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8024b54:	687b      	ldr	r3, [r7, #4]
 8024b56:	2202      	movs	r2, #2
 8024b58:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8024b5c:	2301      	movs	r3, #1
 8024b5e:	e014      	b.n	8024b8a <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8024b60:	687b      	ldr	r3, [r7, #4]
 8024b62:	2200      	movs	r2, #0
 8024b64:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8024b68:	687b      	ldr	r3, [r7, #4]
 8024b6a:	2201      	movs	r2, #1
 8024b6c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8024b70:	687b      	ldr	r3, [r7, #4]
 8024b72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8024b74:	2b01      	cmp	r3, #1
 8024b76:	d102      	bne.n	8024b7e <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8024b78:	6878      	ldr	r0, [r7, #4]
 8024b7a:	f001 f9c5 	bl	8025f08 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8024b7e:	687b      	ldr	r3, [r7, #4]
 8024b80:	681b      	ldr	r3, [r3, #0]
 8024b82:	4618      	mov	r0, r3
 8024b84:	f003 fdfc 	bl	8028780 <USB_DevDisconnect>

  return HAL_OK;
 8024b88:	2300      	movs	r3, #0
}
 8024b8a:	4618      	mov	r0, r3
 8024b8c:	3714      	adds	r7, #20
 8024b8e:	46bd      	mov	sp, r7
 8024b90:	bdf0      	pop	{r4, r5, r6, r7, pc}

08024b92 <HAL_PCD_DeInit>:
  * @brief  DeInitializes the PCD peripheral.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_DeInit(PCD_HandleTypeDef *hpcd)
{
 8024b92:	b580      	push	{r7, lr}
 8024b94:	b082      	sub	sp, #8
 8024b96:	af00      	add	r7, sp, #0
 8024b98:	6078      	str	r0, [r7, #4]
  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8024b9a:	687b      	ldr	r3, [r7, #4]
 8024b9c:	2b00      	cmp	r3, #0
 8024b9e:	d101      	bne.n	8024ba4 <HAL_PCD_DeInit+0x12>
  {
    return HAL_ERROR;
 8024ba0:	2301      	movs	r3, #1
 8024ba2:	e015      	b.n	8024bd0 <HAL_PCD_DeInit+0x3e>
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8024ba4:	687b      	ldr	r3, [r7, #4]
 8024ba6:	2203      	movs	r2, #3
 8024ba8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Stop Device */
  if (USB_StopDevice(hpcd->Instance) != HAL_OK)
 8024bac:	687b      	ldr	r3, [r7, #4]
 8024bae:	681b      	ldr	r3, [r3, #0]
 8024bb0:	4618      	mov	r0, r3
 8024bb2:	f003 fd4f 	bl	8028654 <USB_StopDevice>
 8024bb6:	4603      	mov	r3, r0
 8024bb8:	2b00      	cmp	r3, #0
 8024bba:	d001      	beq.n	8024bc0 <HAL_PCD_DeInit+0x2e>
  {
    return HAL_ERROR;
 8024bbc:	2301      	movs	r3, #1
 8024bbe:	e007      	b.n	8024bd0 <HAL_PCD_DeInit+0x3e>

  /* DeInit the low level hardware */
  hpcd->MspDeInitCallback(hpcd);
#else
  /* DeInit the low level hardware: CLOCK, NVIC.*/
  HAL_PCD_MspDeInit(hpcd);
 8024bc0:	6878      	ldr	r0, [r7, #4]
 8024bc2:	f006 fad3 	bl	802b16c <HAL_PCD_MspDeInit>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  hpcd->State = HAL_PCD_STATE_RESET;
 8024bc6:	687b      	ldr	r3, [r7, #4]
 8024bc8:	2200      	movs	r2, #0
 8024bca:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  return HAL_OK;
 8024bce:	2300      	movs	r3, #0
}
 8024bd0:	4618      	mov	r0, r3
 8024bd2:	3708      	adds	r7, #8
 8024bd4:	46bd      	mov	sp, r7
 8024bd6:	bd80      	pop	{r7, pc}

08024bd8 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8024bd8:	b580      	push	{r7, lr}
 8024bda:	b082      	sub	sp, #8
 8024bdc:	af00      	add	r7, sp, #0
 8024bde:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8024be0:	687b      	ldr	r3, [r7, #4]
 8024be2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8024be6:	2b01      	cmp	r3, #1
 8024be8:	d101      	bne.n	8024bee <HAL_PCD_Start+0x16>
 8024bea:	2302      	movs	r3, #2
 8024bec:	e012      	b.n	8024c14 <HAL_PCD_Start+0x3c>
 8024bee:	687b      	ldr	r3, [r7, #4]
 8024bf0:	2201      	movs	r2, #1
 8024bf2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  __HAL_PCD_ENABLE(hpcd);
 8024bf6:	687b      	ldr	r3, [r7, #4]
 8024bf8:	681b      	ldr	r3, [r3, #0]
 8024bfa:	4618      	mov	r0, r3
 8024bfc:	f002 fb88 	bl	8027310 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8024c00:	687b      	ldr	r3, [r7, #4]
 8024c02:	681b      	ldr	r3, [r3, #0]
 8024c04:	4618      	mov	r0, r3
 8024c06:	f003 fd9a 	bl	802873e <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8024c0a:	687b      	ldr	r3, [r7, #4]
 8024c0c:	2200      	movs	r2, #0
 8024c0e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8024c12:	2300      	movs	r3, #0
}
 8024c14:	4618      	mov	r0, r3
 8024c16:	3708      	adds	r7, #8
 8024c18:	46bd      	mov	sp, r7
 8024c1a:	bd80      	pop	{r7, pc}

08024c1c <HAL_PCD_Stop>:
  * @brief  Stop the USB device.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Stop(PCD_HandleTypeDef *hpcd)
{
 8024c1c:	b580      	push	{r7, lr}
 8024c1e:	b082      	sub	sp, #8
 8024c20:	af00      	add	r7, sp, #0
 8024c22:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8024c24:	687b      	ldr	r3, [r7, #4]
 8024c26:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8024c2a:	2b01      	cmp	r3, #1
 8024c2c:	d101      	bne.n	8024c32 <HAL_PCD_Stop+0x16>
 8024c2e:	2302      	movs	r3, #2
 8024c30:	e018      	b.n	8024c64 <HAL_PCD_Stop+0x48>
 8024c32:	687b      	ldr	r3, [r7, #4]
 8024c34:	2201      	movs	r2, #1
 8024c36:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  __HAL_PCD_DISABLE(hpcd);
 8024c3a:	687b      	ldr	r3, [r7, #4]
 8024c3c:	681b      	ldr	r3, [r3, #0]
 8024c3e:	4618      	mov	r0, r3
 8024c40:	f002 fb77 	bl	8027332 <USB_DisableGlobalInt>
  (void)USB_DevDisconnect(hpcd->Instance);
 8024c44:	687b      	ldr	r3, [r7, #4]
 8024c46:	681b      	ldr	r3, [r3, #0]
 8024c48:	4618      	mov	r0, r3
 8024c4a:	f003 fd99 	bl	8028780 <USB_DevDisconnect>

  (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8024c4e:	687b      	ldr	r3, [r7, #4]
 8024c50:	681b      	ldr	r3, [r3, #0]
 8024c52:	2110      	movs	r1, #16
 8024c54:	4618      	mov	r0, r3
 8024c56:	f002 fd37 	bl	80276c8 <USB_FlushTxFifo>

  __HAL_UNLOCK(hpcd);
 8024c5a:	687b      	ldr	r3, [r7, #4]
 8024c5c:	2200      	movs	r2, #0
 8024c5e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8024c62:	2300      	movs	r3, #0
}
 8024c64:	4618      	mov	r0, r3
 8024c66:	3708      	adds	r7, #8
 8024c68:	46bd      	mov	sp, r7
 8024c6a:	bd80      	pop	{r7, pc}

08024c6c <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8024c6c:	b590      	push	{r4, r7, lr}
 8024c6e:	b08d      	sub	sp, #52	; 0x34
 8024c70:	af00      	add	r7, sp, #0
 8024c72:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8024c74:	687b      	ldr	r3, [r7, #4]
 8024c76:	681b      	ldr	r3, [r3, #0]
 8024c78:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8024c7a:	6a3b      	ldr	r3, [r7, #32]
 8024c7c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8024c7e:	687b      	ldr	r3, [r7, #4]
 8024c80:	681b      	ldr	r3, [r3, #0]
 8024c82:	4618      	mov	r0, r3
 8024c84:	f003 fe30 	bl	80288e8 <USB_GetMode>
 8024c88:	4603      	mov	r3, r0
 8024c8a:	2b00      	cmp	r3, #0
 8024c8c:	f040 84b7 	bne.w	80255fe <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8024c90:	687b      	ldr	r3, [r7, #4]
 8024c92:	681b      	ldr	r3, [r3, #0]
 8024c94:	4618      	mov	r0, r3
 8024c96:	f003 fd94 	bl	80287c2 <USB_ReadInterrupts>
 8024c9a:	4603      	mov	r3, r0
 8024c9c:	2b00      	cmp	r3, #0
 8024c9e:	f000 84ad 	beq.w	80255fc <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8024ca2:	69fb      	ldr	r3, [r7, #28]
 8024ca4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8024ca8:	689b      	ldr	r3, [r3, #8]
 8024caa:	0a1b      	lsrs	r3, r3, #8
 8024cac:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8024cb0:	687b      	ldr	r3, [r7, #4]
 8024cb2:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8024cb6:	687b      	ldr	r3, [r7, #4]
 8024cb8:	681b      	ldr	r3, [r3, #0]
 8024cba:	4618      	mov	r0, r3
 8024cbc:	f003 fd81 	bl	80287c2 <USB_ReadInterrupts>
 8024cc0:	4603      	mov	r3, r0
 8024cc2:	f003 0302 	and.w	r3, r3, #2
 8024cc6:	2b02      	cmp	r3, #2
 8024cc8:	d107      	bne.n	8024cda <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8024cca:	687b      	ldr	r3, [r7, #4]
 8024ccc:	681b      	ldr	r3, [r3, #0]
 8024cce:	695a      	ldr	r2, [r3, #20]
 8024cd0:	687b      	ldr	r3, [r7, #4]
 8024cd2:	681b      	ldr	r3, [r3, #0]
 8024cd4:	f002 0202 	and.w	r2, r2, #2
 8024cd8:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8024cda:	687b      	ldr	r3, [r7, #4]
 8024cdc:	681b      	ldr	r3, [r3, #0]
 8024cde:	4618      	mov	r0, r3
 8024ce0:	f003 fd6f 	bl	80287c2 <USB_ReadInterrupts>
 8024ce4:	4603      	mov	r3, r0
 8024ce6:	f003 0310 	and.w	r3, r3, #16
 8024cea:	2b10      	cmp	r3, #16
 8024cec:	d161      	bne.n	8024db2 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8024cee:	687b      	ldr	r3, [r7, #4]
 8024cf0:	681b      	ldr	r3, [r3, #0]
 8024cf2:	699a      	ldr	r2, [r3, #24]
 8024cf4:	687b      	ldr	r3, [r7, #4]
 8024cf6:	681b      	ldr	r3, [r3, #0]
 8024cf8:	f022 0210 	bic.w	r2, r2, #16
 8024cfc:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8024cfe:	6a3b      	ldr	r3, [r7, #32]
 8024d00:	6a1b      	ldr	r3, [r3, #32]
 8024d02:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8024d04:	69bb      	ldr	r3, [r7, #24]
 8024d06:	f003 020f 	and.w	r2, r3, #15
 8024d0a:	4613      	mov	r3, r2
 8024d0c:	00db      	lsls	r3, r3, #3
 8024d0e:	4413      	add	r3, r2
 8024d10:	009b      	lsls	r3, r3, #2
 8024d12:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8024d16:	687a      	ldr	r2, [r7, #4]
 8024d18:	4413      	add	r3, r2
 8024d1a:	3304      	adds	r3, #4
 8024d1c:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8024d1e:	69bb      	ldr	r3, [r7, #24]
 8024d20:	0c5b      	lsrs	r3, r3, #17
 8024d22:	f003 030f 	and.w	r3, r3, #15
 8024d26:	2b02      	cmp	r3, #2
 8024d28:	d124      	bne.n	8024d74 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8024d2a:	69ba      	ldr	r2, [r7, #24]
 8024d2c:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8024d30:	4013      	ands	r3, r2
 8024d32:	2b00      	cmp	r3, #0
 8024d34:	d035      	beq.n	8024da2 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8024d36:	697b      	ldr	r3, [r7, #20]
 8024d38:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8024d3a:	69bb      	ldr	r3, [r7, #24]
 8024d3c:	091b      	lsrs	r3, r3, #4
 8024d3e:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8024d40:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8024d44:	b29b      	uxth	r3, r3
 8024d46:	461a      	mov	r2, r3
 8024d48:	6a38      	ldr	r0, [r7, #32]
 8024d4a:	f003 fb57 	bl	80283fc <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8024d4e:	697b      	ldr	r3, [r7, #20]
 8024d50:	691a      	ldr	r2, [r3, #16]
 8024d52:	69bb      	ldr	r3, [r7, #24]
 8024d54:	091b      	lsrs	r3, r3, #4
 8024d56:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8024d5a:	441a      	add	r2, r3
 8024d5c:	697b      	ldr	r3, [r7, #20]
 8024d5e:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8024d60:	697b      	ldr	r3, [r7, #20]
 8024d62:	6a1a      	ldr	r2, [r3, #32]
 8024d64:	69bb      	ldr	r3, [r7, #24]
 8024d66:	091b      	lsrs	r3, r3, #4
 8024d68:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8024d6c:	441a      	add	r2, r3
 8024d6e:	697b      	ldr	r3, [r7, #20]
 8024d70:	621a      	str	r2, [r3, #32]
 8024d72:	e016      	b.n	8024da2 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8024d74:	69bb      	ldr	r3, [r7, #24]
 8024d76:	0c5b      	lsrs	r3, r3, #17
 8024d78:	f003 030f 	and.w	r3, r3, #15
 8024d7c:	2b06      	cmp	r3, #6
 8024d7e:	d110      	bne.n	8024da2 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8024d80:	687b      	ldr	r3, [r7, #4]
 8024d82:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8024d86:	2208      	movs	r2, #8
 8024d88:	4619      	mov	r1, r3
 8024d8a:	6a38      	ldr	r0, [r7, #32]
 8024d8c:	f003 fb36 	bl	80283fc <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8024d90:	697b      	ldr	r3, [r7, #20]
 8024d92:	6a1a      	ldr	r2, [r3, #32]
 8024d94:	69bb      	ldr	r3, [r7, #24]
 8024d96:	091b      	lsrs	r3, r3, #4
 8024d98:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8024d9c:	441a      	add	r2, r3
 8024d9e:	697b      	ldr	r3, [r7, #20]
 8024da0:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8024da2:	687b      	ldr	r3, [r7, #4]
 8024da4:	681b      	ldr	r3, [r3, #0]
 8024da6:	699a      	ldr	r2, [r3, #24]
 8024da8:	687b      	ldr	r3, [r7, #4]
 8024daa:	681b      	ldr	r3, [r3, #0]
 8024dac:	f042 0210 	orr.w	r2, r2, #16
 8024db0:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8024db2:	687b      	ldr	r3, [r7, #4]
 8024db4:	681b      	ldr	r3, [r3, #0]
 8024db6:	4618      	mov	r0, r3
 8024db8:	f003 fd03 	bl	80287c2 <USB_ReadInterrupts>
 8024dbc:	4603      	mov	r3, r0
 8024dbe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8024dc2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8024dc6:	f040 80a7 	bne.w	8024f18 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8024dca:	2300      	movs	r3, #0
 8024dcc:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8024dce:	687b      	ldr	r3, [r7, #4]
 8024dd0:	681b      	ldr	r3, [r3, #0]
 8024dd2:	4618      	mov	r0, r3
 8024dd4:	f003 fd08 	bl	80287e8 <USB_ReadDevAllOutEpInterrupt>
 8024dd8:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8024dda:	e099      	b.n	8024f10 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8024ddc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8024dde:	f003 0301 	and.w	r3, r3, #1
 8024de2:	2b00      	cmp	r3, #0
 8024de4:	f000 808e 	beq.w	8024f04 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8024de8:	687b      	ldr	r3, [r7, #4]
 8024dea:	681b      	ldr	r3, [r3, #0]
 8024dec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8024dee:	b2d2      	uxtb	r2, r2
 8024df0:	4611      	mov	r1, r2
 8024df2:	4618      	mov	r0, r3
 8024df4:	f003 fd2c 	bl	8028850 <USB_ReadDevOutEPInterrupt>
 8024df8:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8024dfa:	693b      	ldr	r3, [r7, #16]
 8024dfc:	f003 0301 	and.w	r3, r3, #1
 8024e00:	2b00      	cmp	r3, #0
 8024e02:	d00c      	beq.n	8024e1e <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8024e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8024e06:	015a      	lsls	r2, r3, #5
 8024e08:	69fb      	ldr	r3, [r7, #28]
 8024e0a:	4413      	add	r3, r2
 8024e0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8024e10:	461a      	mov	r2, r3
 8024e12:	2301      	movs	r3, #1
 8024e14:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8024e16:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8024e18:	6878      	ldr	r0, [r7, #4]
 8024e1a:	f000 feef 	bl	8025bfc <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8024e1e:	693b      	ldr	r3, [r7, #16]
 8024e20:	f003 0308 	and.w	r3, r3, #8
 8024e24:	2b00      	cmp	r3, #0
 8024e26:	d00c      	beq.n	8024e42 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8024e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8024e2a:	015a      	lsls	r2, r3, #5
 8024e2c:	69fb      	ldr	r3, [r7, #28]
 8024e2e:	4413      	add	r3, r2
 8024e30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8024e34:	461a      	mov	r2, r3
 8024e36:	2308      	movs	r3, #8
 8024e38:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8024e3a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8024e3c:	6878      	ldr	r0, [r7, #4]
 8024e3e:	f000 ffc5 	bl	8025dcc <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8024e42:	693b      	ldr	r3, [r7, #16]
 8024e44:	f003 0310 	and.w	r3, r3, #16
 8024e48:	2b00      	cmp	r3, #0
 8024e4a:	d008      	beq.n	8024e5e <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8024e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8024e4e:	015a      	lsls	r2, r3, #5
 8024e50:	69fb      	ldr	r3, [r7, #28]
 8024e52:	4413      	add	r3, r2
 8024e54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8024e58:	461a      	mov	r2, r3
 8024e5a:	2310      	movs	r3, #16
 8024e5c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8024e5e:	693b      	ldr	r3, [r7, #16]
 8024e60:	f003 0302 	and.w	r3, r3, #2
 8024e64:	2b00      	cmp	r3, #0
 8024e66:	d030      	beq.n	8024eca <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8024e68:	6a3b      	ldr	r3, [r7, #32]
 8024e6a:	695b      	ldr	r3, [r3, #20]
 8024e6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8024e70:	2b80      	cmp	r3, #128	; 0x80
 8024e72:	d109      	bne.n	8024e88 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8024e74:	69fb      	ldr	r3, [r7, #28]
 8024e76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8024e7a:	685b      	ldr	r3, [r3, #4]
 8024e7c:	69fa      	ldr	r2, [r7, #28]
 8024e7e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8024e82:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8024e86:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8024e88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8024e8a:	4613      	mov	r3, r2
 8024e8c:	00db      	lsls	r3, r3, #3
 8024e8e:	4413      	add	r3, r2
 8024e90:	009b      	lsls	r3, r3, #2
 8024e92:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8024e96:	687a      	ldr	r2, [r7, #4]
 8024e98:	4413      	add	r3, r2
 8024e9a:	3304      	adds	r3, #4
 8024e9c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8024e9e:	697b      	ldr	r3, [r7, #20]
 8024ea0:	78db      	ldrb	r3, [r3, #3]
 8024ea2:	2b01      	cmp	r3, #1
 8024ea4:	d108      	bne.n	8024eb8 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8024ea6:	697b      	ldr	r3, [r7, #20]
 8024ea8:	2200      	movs	r2, #0
 8024eaa:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8024eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8024eae:	b2db      	uxtb	r3, r3
 8024eb0:	4619      	mov	r1, r3
 8024eb2:	6878      	ldr	r0, [r7, #4]
 8024eb4:	f006 fa2c 	bl	802b310 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8024eb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8024eba:	015a      	lsls	r2, r3, #5
 8024ebc:	69fb      	ldr	r3, [r7, #28]
 8024ebe:	4413      	add	r3, r2
 8024ec0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8024ec4:	461a      	mov	r2, r3
 8024ec6:	2302      	movs	r3, #2
 8024ec8:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8024eca:	693b      	ldr	r3, [r7, #16]
 8024ecc:	f003 0320 	and.w	r3, r3, #32
 8024ed0:	2b00      	cmp	r3, #0
 8024ed2:	d008      	beq.n	8024ee6 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8024ed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8024ed6:	015a      	lsls	r2, r3, #5
 8024ed8:	69fb      	ldr	r3, [r7, #28]
 8024eda:	4413      	add	r3, r2
 8024edc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8024ee0:	461a      	mov	r2, r3
 8024ee2:	2320      	movs	r3, #32
 8024ee4:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8024ee6:	693b      	ldr	r3, [r7, #16]
 8024ee8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8024eec:	2b00      	cmp	r3, #0
 8024eee:	d009      	beq.n	8024f04 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8024ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8024ef2:	015a      	lsls	r2, r3, #5
 8024ef4:	69fb      	ldr	r3, [r7, #28]
 8024ef6:	4413      	add	r3, r2
 8024ef8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8024efc:	461a      	mov	r2, r3
 8024efe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8024f02:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8024f04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8024f06:	3301      	adds	r3, #1
 8024f08:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8024f0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8024f0c:	085b      	lsrs	r3, r3, #1
 8024f0e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8024f10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8024f12:	2b00      	cmp	r3, #0
 8024f14:	f47f af62 	bne.w	8024ddc <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8024f18:	687b      	ldr	r3, [r7, #4]
 8024f1a:	681b      	ldr	r3, [r3, #0]
 8024f1c:	4618      	mov	r0, r3
 8024f1e:	f003 fc50 	bl	80287c2 <USB_ReadInterrupts>
 8024f22:	4603      	mov	r3, r0
 8024f24:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8024f28:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8024f2c:	f040 80db 	bne.w	80250e6 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8024f30:	687b      	ldr	r3, [r7, #4]
 8024f32:	681b      	ldr	r3, [r3, #0]
 8024f34:	4618      	mov	r0, r3
 8024f36:	f003 fc71 	bl	802881c <USB_ReadDevAllInEpInterrupt>
 8024f3a:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8024f3c:	2300      	movs	r3, #0
 8024f3e:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8024f40:	e0cd      	b.n	80250de <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8024f42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8024f44:	f003 0301 	and.w	r3, r3, #1
 8024f48:	2b00      	cmp	r3, #0
 8024f4a:	f000 80c2 	beq.w	80250d2 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8024f4e:	687b      	ldr	r3, [r7, #4]
 8024f50:	681b      	ldr	r3, [r3, #0]
 8024f52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8024f54:	b2d2      	uxtb	r2, r2
 8024f56:	4611      	mov	r1, r2
 8024f58:	4618      	mov	r0, r3
 8024f5a:	f003 fc97 	bl	802888c <USB_ReadDevInEPInterrupt>
 8024f5e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8024f60:	693b      	ldr	r3, [r7, #16]
 8024f62:	f003 0301 	and.w	r3, r3, #1
 8024f66:	2b00      	cmp	r3, #0
 8024f68:	d057      	beq.n	802501a <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8024f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8024f6c:	f003 030f 	and.w	r3, r3, #15
 8024f70:	2201      	movs	r2, #1
 8024f72:	fa02 f303 	lsl.w	r3, r2, r3
 8024f76:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8024f78:	69fb      	ldr	r3, [r7, #28]
 8024f7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8024f7e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8024f80:	68fb      	ldr	r3, [r7, #12]
 8024f82:	43db      	mvns	r3, r3
 8024f84:	69f9      	ldr	r1, [r7, #28]
 8024f86:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8024f8a:	4013      	ands	r3, r2
 8024f8c:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8024f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8024f90:	015a      	lsls	r2, r3, #5
 8024f92:	69fb      	ldr	r3, [r7, #28]
 8024f94:	4413      	add	r3, r2
 8024f96:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8024f9a:	461a      	mov	r2, r3
 8024f9c:	2301      	movs	r3, #1
 8024f9e:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8024fa0:	687b      	ldr	r3, [r7, #4]
 8024fa2:	691b      	ldr	r3, [r3, #16]
 8024fa4:	2b01      	cmp	r3, #1
 8024fa6:	d132      	bne.n	802500e <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8024fa8:	6879      	ldr	r1, [r7, #4]
 8024faa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8024fac:	4613      	mov	r3, r2
 8024fae:	00db      	lsls	r3, r3, #3
 8024fb0:	4413      	add	r3, r2
 8024fb2:	009b      	lsls	r3, r3, #2
 8024fb4:	440b      	add	r3, r1
 8024fb6:	334c      	adds	r3, #76	; 0x4c
 8024fb8:	6819      	ldr	r1, [r3, #0]
 8024fba:	6878      	ldr	r0, [r7, #4]
 8024fbc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8024fbe:	4613      	mov	r3, r2
 8024fc0:	00db      	lsls	r3, r3, #3
 8024fc2:	4413      	add	r3, r2
 8024fc4:	009b      	lsls	r3, r3, #2
 8024fc6:	4403      	add	r3, r0
 8024fc8:	3348      	adds	r3, #72	; 0x48
 8024fca:	681b      	ldr	r3, [r3, #0]
 8024fcc:	4419      	add	r1, r3
 8024fce:	6878      	ldr	r0, [r7, #4]
 8024fd0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8024fd2:	4613      	mov	r3, r2
 8024fd4:	00db      	lsls	r3, r3, #3
 8024fd6:	4413      	add	r3, r2
 8024fd8:	009b      	lsls	r3, r3, #2
 8024fda:	4403      	add	r3, r0
 8024fdc:	334c      	adds	r3, #76	; 0x4c
 8024fde:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8024fe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8024fe2:	2b00      	cmp	r3, #0
 8024fe4:	d113      	bne.n	802500e <HAL_PCD_IRQHandler+0x3a2>
 8024fe6:	6879      	ldr	r1, [r7, #4]
 8024fe8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8024fea:	4613      	mov	r3, r2
 8024fec:	00db      	lsls	r3, r3, #3
 8024fee:	4413      	add	r3, r2
 8024ff0:	009b      	lsls	r3, r3, #2
 8024ff2:	440b      	add	r3, r1
 8024ff4:	3354      	adds	r3, #84	; 0x54
 8024ff6:	681b      	ldr	r3, [r3, #0]
 8024ff8:	2b00      	cmp	r3, #0
 8024ffa:	d108      	bne.n	802500e <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8024ffc:	687b      	ldr	r3, [r7, #4]
 8024ffe:	6818      	ldr	r0, [r3, #0]
 8025000:	687b      	ldr	r3, [r7, #4]
 8025002:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8025006:	461a      	mov	r2, r3
 8025008:	2101      	movs	r1, #1
 802500a:	f003 fc9f 	bl	802894c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 802500e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8025010:	b2db      	uxtb	r3, r3
 8025012:	4619      	mov	r1, r3
 8025014:	6878      	ldr	r0, [r7, #4]
 8025016:	f006 f8f6 	bl	802b206 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 802501a:	693b      	ldr	r3, [r7, #16]
 802501c:	f003 0308 	and.w	r3, r3, #8
 8025020:	2b00      	cmp	r3, #0
 8025022:	d008      	beq.n	8025036 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8025024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8025026:	015a      	lsls	r2, r3, #5
 8025028:	69fb      	ldr	r3, [r7, #28]
 802502a:	4413      	add	r3, r2
 802502c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8025030:	461a      	mov	r2, r3
 8025032:	2308      	movs	r3, #8
 8025034:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8025036:	693b      	ldr	r3, [r7, #16]
 8025038:	f003 0310 	and.w	r3, r3, #16
 802503c:	2b00      	cmp	r3, #0
 802503e:	d008      	beq.n	8025052 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8025040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8025042:	015a      	lsls	r2, r3, #5
 8025044:	69fb      	ldr	r3, [r7, #28]
 8025046:	4413      	add	r3, r2
 8025048:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802504c:	461a      	mov	r2, r3
 802504e:	2310      	movs	r3, #16
 8025050:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8025052:	693b      	ldr	r3, [r7, #16]
 8025054:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8025058:	2b00      	cmp	r3, #0
 802505a:	d008      	beq.n	802506e <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 802505c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802505e:	015a      	lsls	r2, r3, #5
 8025060:	69fb      	ldr	r3, [r7, #28]
 8025062:	4413      	add	r3, r2
 8025064:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8025068:	461a      	mov	r2, r3
 802506a:	2340      	movs	r3, #64	; 0x40
 802506c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 802506e:	693b      	ldr	r3, [r7, #16]
 8025070:	f003 0302 	and.w	r3, r3, #2
 8025074:	2b00      	cmp	r3, #0
 8025076:	d023      	beq.n	80250c0 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8025078:	6a79      	ldr	r1, [r7, #36]	; 0x24
 802507a:	6a38      	ldr	r0, [r7, #32]
 802507c:	f002 fb24 	bl	80276c8 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8025080:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8025082:	4613      	mov	r3, r2
 8025084:	00db      	lsls	r3, r3, #3
 8025086:	4413      	add	r3, r2
 8025088:	009b      	lsls	r3, r3, #2
 802508a:	3338      	adds	r3, #56	; 0x38
 802508c:	687a      	ldr	r2, [r7, #4]
 802508e:	4413      	add	r3, r2
 8025090:	3304      	adds	r3, #4
 8025092:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8025094:	697b      	ldr	r3, [r7, #20]
 8025096:	78db      	ldrb	r3, [r3, #3]
 8025098:	2b01      	cmp	r3, #1
 802509a:	d108      	bne.n	80250ae <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 802509c:	697b      	ldr	r3, [r7, #20]
 802509e:	2200      	movs	r2, #0
 80250a0:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80250a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80250a4:	b2db      	uxtb	r3, r3
 80250a6:	4619      	mov	r1, r3
 80250a8:	6878      	ldr	r0, [r7, #4]
 80250aa:	f006 f943 	bl	802b334 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80250ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80250b0:	015a      	lsls	r2, r3, #5
 80250b2:	69fb      	ldr	r3, [r7, #28]
 80250b4:	4413      	add	r3, r2
 80250b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80250ba:	461a      	mov	r2, r3
 80250bc:	2302      	movs	r3, #2
 80250be:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80250c0:	693b      	ldr	r3, [r7, #16]
 80250c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80250c6:	2b00      	cmp	r3, #0
 80250c8:	d003      	beq.n	80250d2 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80250ca:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80250cc:	6878      	ldr	r0, [r7, #4]
 80250ce:	f000 fd08 	bl	8025ae2 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80250d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80250d4:	3301      	adds	r3, #1
 80250d6:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80250d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80250da:	085b      	lsrs	r3, r3, #1
 80250dc:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80250de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80250e0:	2b00      	cmp	r3, #0
 80250e2:	f47f af2e 	bne.w	8024f42 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80250e6:	687b      	ldr	r3, [r7, #4]
 80250e8:	681b      	ldr	r3, [r3, #0]
 80250ea:	4618      	mov	r0, r3
 80250ec:	f003 fb69 	bl	80287c2 <USB_ReadInterrupts>
 80250f0:	4603      	mov	r3, r0
 80250f2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80250f6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80250fa:	d122      	bne.n	8025142 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80250fc:	69fb      	ldr	r3, [r7, #28]
 80250fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8025102:	685b      	ldr	r3, [r3, #4]
 8025104:	69fa      	ldr	r2, [r7, #28]
 8025106:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 802510a:	f023 0301 	bic.w	r3, r3, #1
 802510e:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8025110:	687b      	ldr	r3, [r7, #4]
 8025112:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8025116:	2b01      	cmp	r3, #1
 8025118:	d108      	bne.n	802512c <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 802511a:	687b      	ldr	r3, [r7, #4]
 802511c:	2200      	movs	r2, #0
 802511e:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8025122:	2100      	movs	r1, #0
 8025124:	6878      	ldr	r0, [r7, #4]
 8025126:	f006 faf3 	bl	802b710 <HAL_PCDEx_LPM_Callback>
 802512a:	e002      	b.n	8025132 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 802512c:	6878      	ldr	r0, [r7, #4]
 802512e:	f006 f8e1 	bl	802b2f4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8025132:	687b      	ldr	r3, [r7, #4]
 8025134:	681b      	ldr	r3, [r3, #0]
 8025136:	695a      	ldr	r2, [r3, #20]
 8025138:	687b      	ldr	r3, [r7, #4]
 802513a:	681b      	ldr	r3, [r3, #0]
 802513c:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8025140:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8025142:	687b      	ldr	r3, [r7, #4]
 8025144:	681b      	ldr	r3, [r3, #0]
 8025146:	4618      	mov	r0, r3
 8025148:	f003 fb3b 	bl	80287c2 <USB_ReadInterrupts>
 802514c:	4603      	mov	r3, r0
 802514e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8025152:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8025156:	d112      	bne.n	802517e <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8025158:	69fb      	ldr	r3, [r7, #28]
 802515a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 802515e:	689b      	ldr	r3, [r3, #8]
 8025160:	f003 0301 	and.w	r3, r3, #1
 8025164:	2b01      	cmp	r3, #1
 8025166:	d102      	bne.n	802516e <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8025168:	6878      	ldr	r0, [r7, #4]
 802516a:	f006 f89d 	bl	802b2a8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 802516e:	687b      	ldr	r3, [r7, #4]
 8025170:	681b      	ldr	r3, [r3, #0]
 8025172:	695a      	ldr	r2, [r3, #20]
 8025174:	687b      	ldr	r3, [r7, #4]
 8025176:	681b      	ldr	r3, [r3, #0]
 8025178:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 802517c:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 802517e:	687b      	ldr	r3, [r7, #4]
 8025180:	681b      	ldr	r3, [r3, #0]
 8025182:	4618      	mov	r0, r3
 8025184:	f003 fb1d 	bl	80287c2 <USB_ReadInterrupts>
 8025188:	4603      	mov	r3, r0
 802518a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 802518e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8025192:	d121      	bne.n	80251d8 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8025194:	687b      	ldr	r3, [r7, #4]
 8025196:	681b      	ldr	r3, [r3, #0]
 8025198:	695a      	ldr	r2, [r3, #20]
 802519a:	687b      	ldr	r3, [r7, #4]
 802519c:	681b      	ldr	r3, [r3, #0]
 802519e:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 80251a2:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 80251a4:	687b      	ldr	r3, [r7, #4]
 80251a6:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80251aa:	2b00      	cmp	r3, #0
 80251ac:	d111      	bne.n	80251d2 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 80251ae:	687b      	ldr	r3, [r7, #4]
 80251b0:	2201      	movs	r2, #1
 80251b2:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 80251b6:	687b      	ldr	r3, [r7, #4]
 80251b8:	681b      	ldr	r3, [r3, #0]
 80251ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80251bc:	089b      	lsrs	r3, r3, #2
 80251be:	f003 020f 	and.w	r2, r3, #15
 80251c2:	687b      	ldr	r3, [r7, #4]
 80251c4:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80251c8:	2101      	movs	r1, #1
 80251ca:	6878      	ldr	r0, [r7, #4]
 80251cc:	f006 faa0 	bl	802b710 <HAL_PCDEx_LPM_Callback>
 80251d0:	e002      	b.n	80251d8 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80251d2:	6878      	ldr	r0, [r7, #4]
 80251d4:	f006 f868 	bl	802b2a8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80251d8:	687b      	ldr	r3, [r7, #4]
 80251da:	681b      	ldr	r3, [r3, #0]
 80251dc:	4618      	mov	r0, r3
 80251de:	f003 faf0 	bl	80287c2 <USB_ReadInterrupts>
 80251e2:	4603      	mov	r3, r0
 80251e4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80251e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80251ec:	f040 80b7 	bne.w	802535e <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80251f0:	69fb      	ldr	r3, [r7, #28]
 80251f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80251f6:	685b      	ldr	r3, [r3, #4]
 80251f8:	69fa      	ldr	r2, [r7, #28]
 80251fa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80251fe:	f023 0301 	bic.w	r3, r3, #1
 8025202:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8025204:	687b      	ldr	r3, [r7, #4]
 8025206:	681b      	ldr	r3, [r3, #0]
 8025208:	2110      	movs	r1, #16
 802520a:	4618      	mov	r0, r3
 802520c:	f002 fa5c 	bl	80276c8 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8025210:	2300      	movs	r3, #0
 8025212:	62fb      	str	r3, [r7, #44]	; 0x2c
 8025214:	e046      	b.n	80252a4 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8025216:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8025218:	015a      	lsls	r2, r3, #5
 802521a:	69fb      	ldr	r3, [r7, #28]
 802521c:	4413      	add	r3, r2
 802521e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8025222:	461a      	mov	r2, r3
 8025224:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8025228:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 802522a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802522c:	015a      	lsls	r2, r3, #5
 802522e:	69fb      	ldr	r3, [r7, #28]
 8025230:	4413      	add	r3, r2
 8025232:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8025236:	681b      	ldr	r3, [r3, #0]
 8025238:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 802523a:	0151      	lsls	r1, r2, #5
 802523c:	69fa      	ldr	r2, [r7, #28]
 802523e:	440a      	add	r2, r1
 8025240:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8025244:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8025248:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 802524a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802524c:	015a      	lsls	r2, r3, #5
 802524e:	69fb      	ldr	r3, [r7, #28]
 8025250:	4413      	add	r3, r2
 8025252:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8025256:	461a      	mov	r2, r3
 8025258:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 802525c:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 802525e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8025260:	015a      	lsls	r2, r3, #5
 8025262:	69fb      	ldr	r3, [r7, #28]
 8025264:	4413      	add	r3, r2
 8025266:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802526a:	681b      	ldr	r3, [r3, #0]
 802526c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 802526e:	0151      	lsls	r1, r2, #5
 8025270:	69fa      	ldr	r2, [r7, #28]
 8025272:	440a      	add	r2, r1
 8025274:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8025278:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 802527c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 802527e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8025280:	015a      	lsls	r2, r3, #5
 8025282:	69fb      	ldr	r3, [r7, #28]
 8025284:	4413      	add	r3, r2
 8025286:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802528a:	681b      	ldr	r3, [r3, #0]
 802528c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 802528e:	0151      	lsls	r1, r2, #5
 8025290:	69fa      	ldr	r2, [r7, #28]
 8025292:	440a      	add	r2, r1
 8025294:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8025298:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 802529c:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 802529e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80252a0:	3301      	adds	r3, #1
 80252a2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80252a4:	687b      	ldr	r3, [r7, #4]
 80252a6:	685b      	ldr	r3, [r3, #4]
 80252a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80252aa:	429a      	cmp	r2, r3
 80252ac:	d3b3      	bcc.n	8025216 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80252ae:	69fb      	ldr	r3, [r7, #28]
 80252b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80252b4:	69db      	ldr	r3, [r3, #28]
 80252b6:	69fa      	ldr	r2, [r7, #28]
 80252b8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80252bc:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80252c0:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80252c2:	687b      	ldr	r3, [r7, #4]
 80252c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80252c6:	2b00      	cmp	r3, #0
 80252c8:	d016      	beq.n	80252f8 <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80252ca:	69fb      	ldr	r3, [r7, #28]
 80252cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80252d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80252d4:	69fa      	ldr	r2, [r7, #28]
 80252d6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80252da:	f043 030b 	orr.w	r3, r3, #11
 80252de:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80252e2:	69fb      	ldr	r3, [r7, #28]
 80252e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80252e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80252ea:	69fa      	ldr	r2, [r7, #28]
 80252ec:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80252f0:	f043 030b 	orr.w	r3, r3, #11
 80252f4:	6453      	str	r3, [r2, #68]	; 0x44
 80252f6:	e015      	b.n	8025324 <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80252f8:	69fb      	ldr	r3, [r7, #28]
 80252fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80252fe:	695a      	ldr	r2, [r3, #20]
 8025300:	69fb      	ldr	r3, [r7, #28]
 8025302:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8025306:	4619      	mov	r1, r3
 8025308:	f242 032b 	movw	r3, #8235	; 0x202b
 802530c:	4313      	orrs	r3, r2
 802530e:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8025310:	69fb      	ldr	r3, [r7, #28]
 8025312:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8025316:	691b      	ldr	r3, [r3, #16]
 8025318:	69fa      	ldr	r2, [r7, #28]
 802531a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 802531e:	f043 030b 	orr.w	r3, r3, #11
 8025322:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8025324:	69fb      	ldr	r3, [r7, #28]
 8025326:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 802532a:	681b      	ldr	r3, [r3, #0]
 802532c:	69fa      	ldr	r2, [r7, #28]
 802532e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8025332:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8025336:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8025338:	687b      	ldr	r3, [r7, #4]
 802533a:	6818      	ldr	r0, [r3, #0]
 802533c:	687b      	ldr	r3, [r7, #4]
 802533e:	691b      	ldr	r3, [r3, #16]
 8025340:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8025342:	687b      	ldr	r3, [r7, #4]
 8025344:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8025348:	461a      	mov	r2, r3
 802534a:	f003 faff 	bl	802894c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 802534e:	687b      	ldr	r3, [r7, #4]
 8025350:	681b      	ldr	r3, [r3, #0]
 8025352:	695a      	ldr	r2, [r3, #20]
 8025354:	687b      	ldr	r3, [r7, #4]
 8025356:	681b      	ldr	r3, [r3, #0]
 8025358:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 802535c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 802535e:	687b      	ldr	r3, [r7, #4]
 8025360:	681b      	ldr	r3, [r3, #0]
 8025362:	4618      	mov	r0, r3
 8025364:	f003 fa2d 	bl	80287c2 <USB_ReadInterrupts>
 8025368:	4603      	mov	r3, r0
 802536a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 802536e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8025372:	d124      	bne.n	80253be <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8025374:	687b      	ldr	r3, [r7, #4]
 8025376:	681b      	ldr	r3, [r3, #0]
 8025378:	4618      	mov	r0, r3
 802537a:	f003 fac3 	bl	8028904 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 802537e:	687b      	ldr	r3, [r7, #4]
 8025380:	681b      	ldr	r3, [r3, #0]
 8025382:	4618      	mov	r0, r3
 8025384:	f002 fa1d 	bl	80277c2 <USB_GetDevSpeed>
 8025388:	4603      	mov	r3, r0
 802538a:	461a      	mov	r2, r3
 802538c:	687b      	ldr	r3, [r7, #4]
 802538e:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8025390:	687b      	ldr	r3, [r7, #4]
 8025392:	681c      	ldr	r4, [r3, #0]
 8025394:	f001 fa82 	bl	802689c <HAL_RCC_GetHCLKFreq>
 8025398:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 802539a:	687b      	ldr	r3, [r7, #4]
 802539c:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 802539e:	b2db      	uxtb	r3, r3
 80253a0:	461a      	mov	r2, r3
 80253a2:	4620      	mov	r0, r4
 80253a4:	f001 ff12 	bl	80271cc <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80253a8:	6878      	ldr	r0, [r7, #4]
 80253aa:	f005 ff54 	bl	802b256 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80253ae:	687b      	ldr	r3, [r7, #4]
 80253b0:	681b      	ldr	r3, [r3, #0]
 80253b2:	695a      	ldr	r2, [r3, #20]
 80253b4:	687b      	ldr	r3, [r7, #4]
 80253b6:	681b      	ldr	r3, [r3, #0]
 80253b8:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80253bc:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80253be:	687b      	ldr	r3, [r7, #4]
 80253c0:	681b      	ldr	r3, [r3, #0]
 80253c2:	4618      	mov	r0, r3
 80253c4:	f003 f9fd 	bl	80287c2 <USB_ReadInterrupts>
 80253c8:	4603      	mov	r3, r0
 80253ca:	f003 0308 	and.w	r3, r3, #8
 80253ce:	2b08      	cmp	r3, #8
 80253d0:	d10a      	bne.n	80253e8 <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80253d2:	6878      	ldr	r0, [r7, #4]
 80253d4:	f005 ff31 	bl	802b23a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80253d8:	687b      	ldr	r3, [r7, #4]
 80253da:	681b      	ldr	r3, [r3, #0]
 80253dc:	695a      	ldr	r2, [r3, #20]
 80253de:	687b      	ldr	r3, [r7, #4]
 80253e0:	681b      	ldr	r3, [r3, #0]
 80253e2:	f002 0208 	and.w	r2, r2, #8
 80253e6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80253e8:	687b      	ldr	r3, [r7, #4]
 80253ea:	681b      	ldr	r3, [r3, #0]
 80253ec:	4618      	mov	r0, r3
 80253ee:	f003 f9e8 	bl	80287c2 <USB_ReadInterrupts>
 80253f2:	4603      	mov	r3, r0
 80253f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80253f8:	2b80      	cmp	r3, #128	; 0x80
 80253fa:	d122      	bne.n	8025442 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80253fc:	6a3b      	ldr	r3, [r7, #32]
 80253fe:	699b      	ldr	r3, [r3, #24]
 8025400:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8025404:	6a3b      	ldr	r3, [r7, #32]
 8025406:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8025408:	2301      	movs	r3, #1
 802540a:	627b      	str	r3, [r7, #36]	; 0x24
 802540c:	e014      	b.n	8025438 <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 802540e:	6879      	ldr	r1, [r7, #4]
 8025410:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8025412:	4613      	mov	r3, r2
 8025414:	00db      	lsls	r3, r3, #3
 8025416:	4413      	add	r3, r2
 8025418:	009b      	lsls	r3, r3, #2
 802541a:	440b      	add	r3, r1
 802541c:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8025420:	781b      	ldrb	r3, [r3, #0]
 8025422:	2b01      	cmp	r3, #1
 8025424:	d105      	bne.n	8025432 <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8025426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8025428:	b2db      	uxtb	r3, r3
 802542a:	4619      	mov	r1, r3
 802542c:	6878      	ldr	r0, [r7, #4]
 802542e:	f000 fb27 	bl	8025a80 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8025432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8025434:	3301      	adds	r3, #1
 8025436:	627b      	str	r3, [r7, #36]	; 0x24
 8025438:	687b      	ldr	r3, [r7, #4]
 802543a:	685b      	ldr	r3, [r3, #4]
 802543c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 802543e:	429a      	cmp	r2, r3
 8025440:	d3e5      	bcc.n	802540e <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8025442:	687b      	ldr	r3, [r7, #4]
 8025444:	681b      	ldr	r3, [r3, #0]
 8025446:	4618      	mov	r0, r3
 8025448:	f003 f9bb 	bl	80287c2 <USB_ReadInterrupts>
 802544c:	4603      	mov	r3, r0
 802544e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8025452:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8025456:	d13b      	bne.n	80254d0 <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8025458:	2301      	movs	r3, #1
 802545a:	627b      	str	r3, [r7, #36]	; 0x24
 802545c:	e02b      	b.n	80254b6 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 802545e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8025460:	015a      	lsls	r2, r3, #5
 8025462:	69fb      	ldr	r3, [r7, #28]
 8025464:	4413      	add	r3, r2
 8025466:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802546a:	681b      	ldr	r3, [r3, #0]
 802546c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 802546e:	6879      	ldr	r1, [r7, #4]
 8025470:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8025472:	4613      	mov	r3, r2
 8025474:	00db      	lsls	r3, r3, #3
 8025476:	4413      	add	r3, r2
 8025478:	009b      	lsls	r3, r3, #2
 802547a:	440b      	add	r3, r1
 802547c:	3340      	adds	r3, #64	; 0x40
 802547e:	781b      	ldrb	r3, [r3, #0]
 8025480:	2b01      	cmp	r3, #1
 8025482:	d115      	bne.n	80254b0 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8025484:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8025486:	2b00      	cmp	r3, #0
 8025488:	da12      	bge.n	80254b0 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 802548a:	6879      	ldr	r1, [r7, #4]
 802548c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 802548e:	4613      	mov	r3, r2
 8025490:	00db      	lsls	r3, r3, #3
 8025492:	4413      	add	r3, r2
 8025494:	009b      	lsls	r3, r3, #2
 8025496:	440b      	add	r3, r1
 8025498:	333f      	adds	r3, #63	; 0x3f
 802549a:	2201      	movs	r2, #1
 802549c:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 802549e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80254a0:	b2db      	uxtb	r3, r3
 80254a2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80254a6:	b2db      	uxtb	r3, r3
 80254a8:	4619      	mov	r1, r3
 80254aa:	6878      	ldr	r0, [r7, #4]
 80254ac:	f000 fae8 	bl	8025a80 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80254b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80254b2:	3301      	adds	r3, #1
 80254b4:	627b      	str	r3, [r7, #36]	; 0x24
 80254b6:	687b      	ldr	r3, [r7, #4]
 80254b8:	685b      	ldr	r3, [r3, #4]
 80254ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80254bc:	429a      	cmp	r2, r3
 80254be:	d3ce      	bcc.n	802545e <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80254c0:	687b      	ldr	r3, [r7, #4]
 80254c2:	681b      	ldr	r3, [r3, #0]
 80254c4:	695a      	ldr	r2, [r3, #20]
 80254c6:	687b      	ldr	r3, [r7, #4]
 80254c8:	681b      	ldr	r3, [r3, #0]
 80254ca:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80254ce:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80254d0:	687b      	ldr	r3, [r7, #4]
 80254d2:	681b      	ldr	r3, [r3, #0]
 80254d4:	4618      	mov	r0, r3
 80254d6:	f003 f974 	bl	80287c2 <USB_ReadInterrupts>
 80254da:	4603      	mov	r3, r0
 80254dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80254e0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80254e4:	d155      	bne.n	8025592 <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80254e6:	2301      	movs	r3, #1
 80254e8:	627b      	str	r3, [r7, #36]	; 0x24
 80254ea:	e045      	b.n	8025578 <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80254ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80254ee:	015a      	lsls	r2, r3, #5
 80254f0:	69fb      	ldr	r3, [r7, #28]
 80254f2:	4413      	add	r3, r2
 80254f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80254f8:	681b      	ldr	r3, [r3, #0]
 80254fa:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80254fc:	6879      	ldr	r1, [r7, #4]
 80254fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8025500:	4613      	mov	r3, r2
 8025502:	00db      	lsls	r3, r3, #3
 8025504:	4413      	add	r3, r2
 8025506:	009b      	lsls	r3, r3, #2
 8025508:	440b      	add	r3, r1
 802550a:	f503 7320 	add.w	r3, r3, #640	; 0x280
 802550e:	781b      	ldrb	r3, [r3, #0]
 8025510:	2b01      	cmp	r3, #1
 8025512:	d12e      	bne.n	8025572 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8025514:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8025516:	2b00      	cmp	r3, #0
 8025518:	da2b      	bge.n	8025572 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 802551a:	69bb      	ldr	r3, [r7, #24]
 802551c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8025520:	687b      	ldr	r3, [r7, #4]
 8025522:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8025526:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 802552a:	429a      	cmp	r2, r3
 802552c:	d121      	bne.n	8025572 <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 802552e:	6879      	ldr	r1, [r7, #4]
 8025530:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8025532:	4613      	mov	r3, r2
 8025534:	00db      	lsls	r3, r3, #3
 8025536:	4413      	add	r3, r2
 8025538:	009b      	lsls	r3, r3, #2
 802553a:	440b      	add	r3, r1
 802553c:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8025540:	2201      	movs	r2, #1
 8025542:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8025544:	6a3b      	ldr	r3, [r7, #32]
 8025546:	699b      	ldr	r3, [r3, #24]
 8025548:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 802554c:	6a3b      	ldr	r3, [r7, #32]
 802554e:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8025550:	6a3b      	ldr	r3, [r7, #32]
 8025552:	695b      	ldr	r3, [r3, #20]
 8025554:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8025558:	2b00      	cmp	r3, #0
 802555a:	d10a      	bne.n	8025572 <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 802555c:	69fb      	ldr	r3, [r7, #28]
 802555e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8025562:	685b      	ldr	r3, [r3, #4]
 8025564:	69fa      	ldr	r2, [r7, #28]
 8025566:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 802556a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 802556e:	6053      	str	r3, [r2, #4]
            break;
 8025570:	e007      	b.n	8025582 <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8025572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8025574:	3301      	adds	r3, #1
 8025576:	627b      	str	r3, [r7, #36]	; 0x24
 8025578:	687b      	ldr	r3, [r7, #4]
 802557a:	685b      	ldr	r3, [r3, #4]
 802557c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 802557e:	429a      	cmp	r2, r3
 8025580:	d3b4      	bcc.n	80254ec <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8025582:	687b      	ldr	r3, [r7, #4]
 8025584:	681b      	ldr	r3, [r3, #0]
 8025586:	695a      	ldr	r2, [r3, #20]
 8025588:	687b      	ldr	r3, [r7, #4]
 802558a:	681b      	ldr	r3, [r3, #0]
 802558c:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8025590:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8025592:	687b      	ldr	r3, [r7, #4]
 8025594:	681b      	ldr	r3, [r3, #0]
 8025596:	4618      	mov	r0, r3
 8025598:	f003 f913 	bl	80287c2 <USB_ReadInterrupts>
 802559c:	4603      	mov	r3, r0
 802559e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80255a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80255a6:	d10a      	bne.n	80255be <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80255a8:	6878      	ldr	r0, [r7, #4]
 80255aa:	f005 fed5 	bl	802b358 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80255ae:	687b      	ldr	r3, [r7, #4]
 80255b0:	681b      	ldr	r3, [r3, #0]
 80255b2:	695a      	ldr	r2, [r3, #20]
 80255b4:	687b      	ldr	r3, [r7, #4]
 80255b6:	681b      	ldr	r3, [r3, #0]
 80255b8:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80255bc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80255be:	687b      	ldr	r3, [r7, #4]
 80255c0:	681b      	ldr	r3, [r3, #0]
 80255c2:	4618      	mov	r0, r3
 80255c4:	f003 f8fd 	bl	80287c2 <USB_ReadInterrupts>
 80255c8:	4603      	mov	r3, r0
 80255ca:	f003 0304 	and.w	r3, r3, #4
 80255ce:	2b04      	cmp	r3, #4
 80255d0:	d115      	bne.n	80255fe <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80255d2:	687b      	ldr	r3, [r7, #4]
 80255d4:	681b      	ldr	r3, [r3, #0]
 80255d6:	685b      	ldr	r3, [r3, #4]
 80255d8:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80255da:	69bb      	ldr	r3, [r7, #24]
 80255dc:	f003 0304 	and.w	r3, r3, #4
 80255e0:	2b00      	cmp	r3, #0
 80255e2:	d002      	beq.n	80255ea <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80255e4:	6878      	ldr	r0, [r7, #4]
 80255e6:	f005 fec5 	bl	802b374 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80255ea:	687b      	ldr	r3, [r7, #4]
 80255ec:	681b      	ldr	r3, [r3, #0]
 80255ee:	6859      	ldr	r1, [r3, #4]
 80255f0:	687b      	ldr	r3, [r7, #4]
 80255f2:	681b      	ldr	r3, [r3, #0]
 80255f4:	69ba      	ldr	r2, [r7, #24]
 80255f6:	430a      	orrs	r2, r1
 80255f8:	605a      	str	r2, [r3, #4]
 80255fa:	e000      	b.n	80255fe <HAL_PCD_IRQHandler+0x992>
      return;
 80255fc:	bf00      	nop
    }
  }
}
 80255fe:	3734      	adds	r7, #52	; 0x34
 8025600:	46bd      	mov	sp, r7
 8025602:	bd90      	pop	{r4, r7, pc}

08025604 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8025604:	b580      	push	{r7, lr}
 8025606:	b082      	sub	sp, #8
 8025608:	af00      	add	r7, sp, #0
 802560a:	6078      	str	r0, [r7, #4]
 802560c:	460b      	mov	r3, r1
 802560e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8025610:	687b      	ldr	r3, [r7, #4]
 8025612:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8025616:	2b01      	cmp	r3, #1
 8025618:	d101      	bne.n	802561e <HAL_PCD_SetAddress+0x1a>
 802561a:	2302      	movs	r3, #2
 802561c:	e013      	b.n	8025646 <HAL_PCD_SetAddress+0x42>
 802561e:	687b      	ldr	r3, [r7, #4]
 8025620:	2201      	movs	r2, #1
 8025622:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8025626:	687b      	ldr	r3, [r7, #4]
 8025628:	78fa      	ldrb	r2, [r7, #3]
 802562a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 802562e:	687b      	ldr	r3, [r7, #4]
 8025630:	681b      	ldr	r3, [r3, #0]
 8025632:	78fa      	ldrb	r2, [r7, #3]
 8025634:	4611      	mov	r1, r2
 8025636:	4618      	mov	r0, r3
 8025638:	f003 f85b 	bl	80286f2 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 802563c:	687b      	ldr	r3, [r7, #4]
 802563e:	2200      	movs	r2, #0
 8025640:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8025644:	2300      	movs	r3, #0
}
 8025646:	4618      	mov	r0, r3
 8025648:	3708      	adds	r7, #8
 802564a:	46bd      	mov	sp, r7
 802564c:	bd80      	pop	{r7, pc}

0802564e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 802564e:	b580      	push	{r7, lr}
 8025650:	b084      	sub	sp, #16
 8025652:	af00      	add	r7, sp, #0
 8025654:	6078      	str	r0, [r7, #4]
 8025656:	4608      	mov	r0, r1
 8025658:	4611      	mov	r1, r2
 802565a:	461a      	mov	r2, r3
 802565c:	4603      	mov	r3, r0
 802565e:	70fb      	strb	r3, [r7, #3]
 8025660:	460b      	mov	r3, r1
 8025662:	803b      	strh	r3, [r7, #0]
 8025664:	4613      	mov	r3, r2
 8025666:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8025668:	2300      	movs	r3, #0
 802566a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 802566c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8025670:	2b00      	cmp	r3, #0
 8025672:	da0f      	bge.n	8025694 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8025674:	78fb      	ldrb	r3, [r7, #3]
 8025676:	f003 020f 	and.w	r2, r3, #15
 802567a:	4613      	mov	r3, r2
 802567c:	00db      	lsls	r3, r3, #3
 802567e:	4413      	add	r3, r2
 8025680:	009b      	lsls	r3, r3, #2
 8025682:	3338      	adds	r3, #56	; 0x38
 8025684:	687a      	ldr	r2, [r7, #4]
 8025686:	4413      	add	r3, r2
 8025688:	3304      	adds	r3, #4
 802568a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 802568c:	68fb      	ldr	r3, [r7, #12]
 802568e:	2201      	movs	r2, #1
 8025690:	705a      	strb	r2, [r3, #1]
 8025692:	e00f      	b.n	80256b4 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8025694:	78fb      	ldrb	r3, [r7, #3]
 8025696:	f003 020f 	and.w	r2, r3, #15
 802569a:	4613      	mov	r3, r2
 802569c:	00db      	lsls	r3, r3, #3
 802569e:	4413      	add	r3, r2
 80256a0:	009b      	lsls	r3, r3, #2
 80256a2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80256a6:	687a      	ldr	r2, [r7, #4]
 80256a8:	4413      	add	r3, r2
 80256aa:	3304      	adds	r3, #4
 80256ac:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80256ae:	68fb      	ldr	r3, [r7, #12]
 80256b0:	2200      	movs	r2, #0
 80256b2:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80256b4:	78fb      	ldrb	r3, [r7, #3]
 80256b6:	f003 030f 	and.w	r3, r3, #15
 80256ba:	b2da      	uxtb	r2, r3
 80256bc:	68fb      	ldr	r3, [r7, #12]
 80256be:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80256c0:	883a      	ldrh	r2, [r7, #0]
 80256c2:	68fb      	ldr	r3, [r7, #12]
 80256c4:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 80256c6:	68fb      	ldr	r3, [r7, #12]
 80256c8:	78ba      	ldrb	r2, [r7, #2]
 80256ca:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80256cc:	68fb      	ldr	r3, [r7, #12]
 80256ce:	785b      	ldrb	r3, [r3, #1]
 80256d0:	2b00      	cmp	r3, #0
 80256d2:	d004      	beq.n	80256de <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80256d4:	68fb      	ldr	r3, [r7, #12]
 80256d6:	781b      	ldrb	r3, [r3, #0]
 80256d8:	b29a      	uxth	r2, r3
 80256da:	68fb      	ldr	r3, [r7, #12]
 80256dc:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80256de:	78bb      	ldrb	r3, [r7, #2]
 80256e0:	2b02      	cmp	r3, #2
 80256e2:	d102      	bne.n	80256ea <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80256e4:	68fb      	ldr	r3, [r7, #12]
 80256e6:	2200      	movs	r2, #0
 80256e8:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80256ea:	687b      	ldr	r3, [r7, #4]
 80256ec:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80256f0:	2b01      	cmp	r3, #1
 80256f2:	d101      	bne.n	80256f8 <HAL_PCD_EP_Open+0xaa>
 80256f4:	2302      	movs	r3, #2
 80256f6:	e00e      	b.n	8025716 <HAL_PCD_EP_Open+0xc8>
 80256f8:	687b      	ldr	r3, [r7, #4]
 80256fa:	2201      	movs	r2, #1
 80256fc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8025700:	687b      	ldr	r3, [r7, #4]
 8025702:	681b      	ldr	r3, [r3, #0]
 8025704:	68f9      	ldr	r1, [r7, #12]
 8025706:	4618      	mov	r0, r3
 8025708:	f002 f880 	bl	802780c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 802570c:	687b      	ldr	r3, [r7, #4]
 802570e:	2200      	movs	r2, #0
 8025710:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8025714:	7afb      	ldrb	r3, [r7, #11]
}
 8025716:	4618      	mov	r0, r3
 8025718:	3710      	adds	r7, #16
 802571a:	46bd      	mov	sp, r7
 802571c:	bd80      	pop	{r7, pc}

0802571e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 802571e:	b580      	push	{r7, lr}
 8025720:	b084      	sub	sp, #16
 8025722:	af00      	add	r7, sp, #0
 8025724:	6078      	str	r0, [r7, #4]
 8025726:	460b      	mov	r3, r1
 8025728:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 802572a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 802572e:	2b00      	cmp	r3, #0
 8025730:	da0f      	bge.n	8025752 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8025732:	78fb      	ldrb	r3, [r7, #3]
 8025734:	f003 020f 	and.w	r2, r3, #15
 8025738:	4613      	mov	r3, r2
 802573a:	00db      	lsls	r3, r3, #3
 802573c:	4413      	add	r3, r2
 802573e:	009b      	lsls	r3, r3, #2
 8025740:	3338      	adds	r3, #56	; 0x38
 8025742:	687a      	ldr	r2, [r7, #4]
 8025744:	4413      	add	r3, r2
 8025746:	3304      	adds	r3, #4
 8025748:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 802574a:	68fb      	ldr	r3, [r7, #12]
 802574c:	2201      	movs	r2, #1
 802574e:	705a      	strb	r2, [r3, #1]
 8025750:	e00f      	b.n	8025772 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8025752:	78fb      	ldrb	r3, [r7, #3]
 8025754:	f003 020f 	and.w	r2, r3, #15
 8025758:	4613      	mov	r3, r2
 802575a:	00db      	lsls	r3, r3, #3
 802575c:	4413      	add	r3, r2
 802575e:	009b      	lsls	r3, r3, #2
 8025760:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8025764:	687a      	ldr	r2, [r7, #4]
 8025766:	4413      	add	r3, r2
 8025768:	3304      	adds	r3, #4
 802576a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 802576c:	68fb      	ldr	r3, [r7, #12]
 802576e:	2200      	movs	r2, #0
 8025770:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8025772:	78fb      	ldrb	r3, [r7, #3]
 8025774:	f003 030f 	and.w	r3, r3, #15
 8025778:	b2da      	uxtb	r2, r3
 802577a:	68fb      	ldr	r3, [r7, #12]
 802577c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 802577e:	687b      	ldr	r3, [r7, #4]
 8025780:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8025784:	2b01      	cmp	r3, #1
 8025786:	d101      	bne.n	802578c <HAL_PCD_EP_Close+0x6e>
 8025788:	2302      	movs	r3, #2
 802578a:	e00e      	b.n	80257aa <HAL_PCD_EP_Close+0x8c>
 802578c:	687b      	ldr	r3, [r7, #4]
 802578e:	2201      	movs	r2, #1
 8025790:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8025794:	687b      	ldr	r3, [r7, #4]
 8025796:	681b      	ldr	r3, [r3, #0]
 8025798:	68f9      	ldr	r1, [r7, #12]
 802579a:	4618      	mov	r0, r3
 802579c:	f002 f8be 	bl	802791c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80257a0:	687b      	ldr	r3, [r7, #4]
 80257a2:	2200      	movs	r2, #0
 80257a4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 80257a8:	2300      	movs	r3, #0
}
 80257aa:	4618      	mov	r0, r3
 80257ac:	3710      	adds	r7, #16
 80257ae:	46bd      	mov	sp, r7
 80257b0:	bd80      	pop	{r7, pc}

080257b2 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80257b2:	b580      	push	{r7, lr}
 80257b4:	b086      	sub	sp, #24
 80257b6:	af00      	add	r7, sp, #0
 80257b8:	60f8      	str	r0, [r7, #12]
 80257ba:	607a      	str	r2, [r7, #4]
 80257bc:	603b      	str	r3, [r7, #0]
 80257be:	460b      	mov	r3, r1
 80257c0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80257c2:	7afb      	ldrb	r3, [r7, #11]
 80257c4:	f003 020f 	and.w	r2, r3, #15
 80257c8:	4613      	mov	r3, r2
 80257ca:	00db      	lsls	r3, r3, #3
 80257cc:	4413      	add	r3, r2
 80257ce:	009b      	lsls	r3, r3, #2
 80257d0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80257d4:	68fa      	ldr	r2, [r7, #12]
 80257d6:	4413      	add	r3, r2
 80257d8:	3304      	adds	r3, #4
 80257da:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80257dc:	697b      	ldr	r3, [r7, #20]
 80257de:	687a      	ldr	r2, [r7, #4]
 80257e0:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80257e2:	697b      	ldr	r3, [r7, #20]
 80257e4:	683a      	ldr	r2, [r7, #0]
 80257e6:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80257e8:	697b      	ldr	r3, [r7, #20]
 80257ea:	2200      	movs	r2, #0
 80257ec:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 80257ee:	697b      	ldr	r3, [r7, #20]
 80257f0:	2200      	movs	r2, #0
 80257f2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80257f4:	7afb      	ldrb	r3, [r7, #11]
 80257f6:	f003 030f 	and.w	r3, r3, #15
 80257fa:	b2da      	uxtb	r2, r3
 80257fc:	697b      	ldr	r3, [r7, #20]
 80257fe:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8025800:	68fb      	ldr	r3, [r7, #12]
 8025802:	691b      	ldr	r3, [r3, #16]
 8025804:	2b01      	cmp	r3, #1
 8025806:	d102      	bne.n	802580e <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8025808:	687a      	ldr	r2, [r7, #4]
 802580a:	697b      	ldr	r3, [r7, #20]
 802580c:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 802580e:	7afb      	ldrb	r3, [r7, #11]
 8025810:	f003 030f 	and.w	r3, r3, #15
 8025814:	2b00      	cmp	r3, #0
 8025816:	d109      	bne.n	802582c <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8025818:	68fb      	ldr	r3, [r7, #12]
 802581a:	6818      	ldr	r0, [r3, #0]
 802581c:	68fb      	ldr	r3, [r7, #12]
 802581e:	691b      	ldr	r3, [r3, #16]
 8025820:	b2db      	uxtb	r3, r3
 8025822:	461a      	mov	r2, r3
 8025824:	6979      	ldr	r1, [r7, #20]
 8025826:	f002 fba5 	bl	8027f74 <USB_EP0StartXfer>
 802582a:	e008      	b.n	802583e <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 802582c:	68fb      	ldr	r3, [r7, #12]
 802582e:	6818      	ldr	r0, [r3, #0]
 8025830:	68fb      	ldr	r3, [r7, #12]
 8025832:	691b      	ldr	r3, [r3, #16]
 8025834:	b2db      	uxtb	r3, r3
 8025836:	461a      	mov	r2, r3
 8025838:	6979      	ldr	r1, [r7, #20]
 802583a:	f002 f94b 	bl	8027ad4 <USB_EPStartXfer>
  }

  return HAL_OK;
 802583e:	2300      	movs	r3, #0
}
 8025840:	4618      	mov	r0, r3
 8025842:	3718      	adds	r7, #24
 8025844:	46bd      	mov	sp, r7
 8025846:	bd80      	pop	{r7, pc}

08025848 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8025848:	b480      	push	{r7}
 802584a:	b083      	sub	sp, #12
 802584c:	af00      	add	r7, sp, #0
 802584e:	6078      	str	r0, [r7, #4]
 8025850:	460b      	mov	r3, r1
 8025852:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8025854:	78fb      	ldrb	r3, [r7, #3]
 8025856:	f003 020f 	and.w	r2, r3, #15
 802585a:	6879      	ldr	r1, [r7, #4]
 802585c:	4613      	mov	r3, r2
 802585e:	00db      	lsls	r3, r3, #3
 8025860:	4413      	add	r3, r2
 8025862:	009b      	lsls	r3, r3, #2
 8025864:	440b      	add	r3, r1
 8025866:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 802586a:	681b      	ldr	r3, [r3, #0]
}
 802586c:	4618      	mov	r0, r3
 802586e:	370c      	adds	r7, #12
 8025870:	46bd      	mov	sp, r7
 8025872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025876:	4770      	bx	lr

08025878 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8025878:	b580      	push	{r7, lr}
 802587a:	b086      	sub	sp, #24
 802587c:	af00      	add	r7, sp, #0
 802587e:	60f8      	str	r0, [r7, #12]
 8025880:	607a      	str	r2, [r7, #4]
 8025882:	603b      	str	r3, [r7, #0]
 8025884:	460b      	mov	r3, r1
 8025886:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8025888:	7afb      	ldrb	r3, [r7, #11]
 802588a:	f003 020f 	and.w	r2, r3, #15
 802588e:	4613      	mov	r3, r2
 8025890:	00db      	lsls	r3, r3, #3
 8025892:	4413      	add	r3, r2
 8025894:	009b      	lsls	r3, r3, #2
 8025896:	3338      	adds	r3, #56	; 0x38
 8025898:	68fa      	ldr	r2, [r7, #12]
 802589a:	4413      	add	r3, r2
 802589c:	3304      	adds	r3, #4
 802589e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80258a0:	697b      	ldr	r3, [r7, #20]
 80258a2:	687a      	ldr	r2, [r7, #4]
 80258a4:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80258a6:	697b      	ldr	r3, [r7, #20]
 80258a8:	683a      	ldr	r2, [r7, #0]
 80258aa:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80258ac:	697b      	ldr	r3, [r7, #20]
 80258ae:	2200      	movs	r2, #0
 80258b0:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 80258b2:	697b      	ldr	r3, [r7, #20]
 80258b4:	2201      	movs	r2, #1
 80258b6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80258b8:	7afb      	ldrb	r3, [r7, #11]
 80258ba:	f003 030f 	and.w	r3, r3, #15
 80258be:	b2da      	uxtb	r2, r3
 80258c0:	697b      	ldr	r3, [r7, #20]
 80258c2:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80258c4:	68fb      	ldr	r3, [r7, #12]
 80258c6:	691b      	ldr	r3, [r3, #16]
 80258c8:	2b01      	cmp	r3, #1
 80258ca:	d102      	bne.n	80258d2 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80258cc:	687a      	ldr	r2, [r7, #4]
 80258ce:	697b      	ldr	r3, [r7, #20]
 80258d0:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80258d2:	7afb      	ldrb	r3, [r7, #11]
 80258d4:	f003 030f 	and.w	r3, r3, #15
 80258d8:	2b00      	cmp	r3, #0
 80258da:	d109      	bne.n	80258f0 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80258dc:	68fb      	ldr	r3, [r7, #12]
 80258de:	6818      	ldr	r0, [r3, #0]
 80258e0:	68fb      	ldr	r3, [r7, #12]
 80258e2:	691b      	ldr	r3, [r3, #16]
 80258e4:	b2db      	uxtb	r3, r3
 80258e6:	461a      	mov	r2, r3
 80258e8:	6979      	ldr	r1, [r7, #20]
 80258ea:	f002 fb43 	bl	8027f74 <USB_EP0StartXfer>
 80258ee:	e008      	b.n	8025902 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80258f0:	68fb      	ldr	r3, [r7, #12]
 80258f2:	6818      	ldr	r0, [r3, #0]
 80258f4:	68fb      	ldr	r3, [r7, #12]
 80258f6:	691b      	ldr	r3, [r3, #16]
 80258f8:	b2db      	uxtb	r3, r3
 80258fa:	461a      	mov	r2, r3
 80258fc:	6979      	ldr	r1, [r7, #20]
 80258fe:	f002 f8e9 	bl	8027ad4 <USB_EPStartXfer>
  }

  return HAL_OK;
 8025902:	2300      	movs	r3, #0
}
 8025904:	4618      	mov	r0, r3
 8025906:	3718      	adds	r7, #24
 8025908:	46bd      	mov	sp, r7
 802590a:	bd80      	pop	{r7, pc}

0802590c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 802590c:	b580      	push	{r7, lr}
 802590e:	b084      	sub	sp, #16
 8025910:	af00      	add	r7, sp, #0
 8025912:	6078      	str	r0, [r7, #4]
 8025914:	460b      	mov	r3, r1
 8025916:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8025918:	78fb      	ldrb	r3, [r7, #3]
 802591a:	f003 020f 	and.w	r2, r3, #15
 802591e:	687b      	ldr	r3, [r7, #4]
 8025920:	685b      	ldr	r3, [r3, #4]
 8025922:	429a      	cmp	r2, r3
 8025924:	d901      	bls.n	802592a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8025926:	2301      	movs	r3, #1
 8025928:	e050      	b.n	80259cc <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 802592a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 802592e:	2b00      	cmp	r3, #0
 8025930:	da0f      	bge.n	8025952 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8025932:	78fb      	ldrb	r3, [r7, #3]
 8025934:	f003 020f 	and.w	r2, r3, #15
 8025938:	4613      	mov	r3, r2
 802593a:	00db      	lsls	r3, r3, #3
 802593c:	4413      	add	r3, r2
 802593e:	009b      	lsls	r3, r3, #2
 8025940:	3338      	adds	r3, #56	; 0x38
 8025942:	687a      	ldr	r2, [r7, #4]
 8025944:	4413      	add	r3, r2
 8025946:	3304      	adds	r3, #4
 8025948:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 802594a:	68fb      	ldr	r3, [r7, #12]
 802594c:	2201      	movs	r2, #1
 802594e:	705a      	strb	r2, [r3, #1]
 8025950:	e00d      	b.n	802596e <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8025952:	78fa      	ldrb	r2, [r7, #3]
 8025954:	4613      	mov	r3, r2
 8025956:	00db      	lsls	r3, r3, #3
 8025958:	4413      	add	r3, r2
 802595a:	009b      	lsls	r3, r3, #2
 802595c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8025960:	687a      	ldr	r2, [r7, #4]
 8025962:	4413      	add	r3, r2
 8025964:	3304      	adds	r3, #4
 8025966:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8025968:	68fb      	ldr	r3, [r7, #12]
 802596a:	2200      	movs	r2, #0
 802596c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 802596e:	68fb      	ldr	r3, [r7, #12]
 8025970:	2201      	movs	r2, #1
 8025972:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8025974:	78fb      	ldrb	r3, [r7, #3]
 8025976:	f003 030f 	and.w	r3, r3, #15
 802597a:	b2da      	uxtb	r2, r3
 802597c:	68fb      	ldr	r3, [r7, #12]
 802597e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8025980:	687b      	ldr	r3, [r7, #4]
 8025982:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8025986:	2b01      	cmp	r3, #1
 8025988:	d101      	bne.n	802598e <HAL_PCD_EP_SetStall+0x82>
 802598a:	2302      	movs	r3, #2
 802598c:	e01e      	b.n	80259cc <HAL_PCD_EP_SetStall+0xc0>
 802598e:	687b      	ldr	r3, [r7, #4]
 8025990:	2201      	movs	r2, #1
 8025992:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8025996:	687b      	ldr	r3, [r7, #4]
 8025998:	681b      	ldr	r3, [r3, #0]
 802599a:	68f9      	ldr	r1, [r7, #12]
 802599c:	4618      	mov	r0, r3
 802599e:	f002 fd85 	bl	80284ac <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80259a2:	78fb      	ldrb	r3, [r7, #3]
 80259a4:	f003 030f 	and.w	r3, r3, #15
 80259a8:	2b00      	cmp	r3, #0
 80259aa:	d10a      	bne.n	80259c2 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80259ac:	687b      	ldr	r3, [r7, #4]
 80259ae:	6818      	ldr	r0, [r3, #0]
 80259b0:	687b      	ldr	r3, [r7, #4]
 80259b2:	691b      	ldr	r3, [r3, #16]
 80259b4:	b2d9      	uxtb	r1, r3
 80259b6:	687b      	ldr	r3, [r7, #4]
 80259b8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80259bc:	461a      	mov	r2, r3
 80259be:	f002 ffc5 	bl	802894c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80259c2:	687b      	ldr	r3, [r7, #4]
 80259c4:	2200      	movs	r2, #0
 80259c6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80259ca:	2300      	movs	r3, #0
}
 80259cc:	4618      	mov	r0, r3
 80259ce:	3710      	adds	r7, #16
 80259d0:	46bd      	mov	sp, r7
 80259d2:	bd80      	pop	{r7, pc}

080259d4 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80259d4:	b580      	push	{r7, lr}
 80259d6:	b084      	sub	sp, #16
 80259d8:	af00      	add	r7, sp, #0
 80259da:	6078      	str	r0, [r7, #4]
 80259dc:	460b      	mov	r3, r1
 80259de:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80259e0:	78fb      	ldrb	r3, [r7, #3]
 80259e2:	f003 020f 	and.w	r2, r3, #15
 80259e6:	687b      	ldr	r3, [r7, #4]
 80259e8:	685b      	ldr	r3, [r3, #4]
 80259ea:	429a      	cmp	r2, r3
 80259ec:	d901      	bls.n	80259f2 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80259ee:	2301      	movs	r3, #1
 80259f0:	e042      	b.n	8025a78 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80259f2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80259f6:	2b00      	cmp	r3, #0
 80259f8:	da0f      	bge.n	8025a1a <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80259fa:	78fb      	ldrb	r3, [r7, #3]
 80259fc:	f003 020f 	and.w	r2, r3, #15
 8025a00:	4613      	mov	r3, r2
 8025a02:	00db      	lsls	r3, r3, #3
 8025a04:	4413      	add	r3, r2
 8025a06:	009b      	lsls	r3, r3, #2
 8025a08:	3338      	adds	r3, #56	; 0x38
 8025a0a:	687a      	ldr	r2, [r7, #4]
 8025a0c:	4413      	add	r3, r2
 8025a0e:	3304      	adds	r3, #4
 8025a10:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8025a12:	68fb      	ldr	r3, [r7, #12]
 8025a14:	2201      	movs	r2, #1
 8025a16:	705a      	strb	r2, [r3, #1]
 8025a18:	e00f      	b.n	8025a3a <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8025a1a:	78fb      	ldrb	r3, [r7, #3]
 8025a1c:	f003 020f 	and.w	r2, r3, #15
 8025a20:	4613      	mov	r3, r2
 8025a22:	00db      	lsls	r3, r3, #3
 8025a24:	4413      	add	r3, r2
 8025a26:	009b      	lsls	r3, r3, #2
 8025a28:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8025a2c:	687a      	ldr	r2, [r7, #4]
 8025a2e:	4413      	add	r3, r2
 8025a30:	3304      	adds	r3, #4
 8025a32:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8025a34:	68fb      	ldr	r3, [r7, #12]
 8025a36:	2200      	movs	r2, #0
 8025a38:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8025a3a:	68fb      	ldr	r3, [r7, #12]
 8025a3c:	2200      	movs	r2, #0
 8025a3e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8025a40:	78fb      	ldrb	r3, [r7, #3]
 8025a42:	f003 030f 	and.w	r3, r3, #15
 8025a46:	b2da      	uxtb	r2, r3
 8025a48:	68fb      	ldr	r3, [r7, #12]
 8025a4a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8025a4c:	687b      	ldr	r3, [r7, #4]
 8025a4e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8025a52:	2b01      	cmp	r3, #1
 8025a54:	d101      	bne.n	8025a5a <HAL_PCD_EP_ClrStall+0x86>
 8025a56:	2302      	movs	r3, #2
 8025a58:	e00e      	b.n	8025a78 <HAL_PCD_EP_ClrStall+0xa4>
 8025a5a:	687b      	ldr	r3, [r7, #4]
 8025a5c:	2201      	movs	r2, #1
 8025a5e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8025a62:	687b      	ldr	r3, [r7, #4]
 8025a64:	681b      	ldr	r3, [r3, #0]
 8025a66:	68f9      	ldr	r1, [r7, #12]
 8025a68:	4618      	mov	r0, r3
 8025a6a:	f002 fd8d 	bl	8028588 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8025a6e:	687b      	ldr	r3, [r7, #4]
 8025a70:	2200      	movs	r2, #0
 8025a72:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8025a76:	2300      	movs	r3, #0
}
 8025a78:	4618      	mov	r0, r3
 8025a7a:	3710      	adds	r7, #16
 8025a7c:	46bd      	mov	sp, r7
 8025a7e:	bd80      	pop	{r7, pc}

08025a80 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8025a80:	b580      	push	{r7, lr}
 8025a82:	b084      	sub	sp, #16
 8025a84:	af00      	add	r7, sp, #0
 8025a86:	6078      	str	r0, [r7, #4]
 8025a88:	460b      	mov	r3, r1
 8025a8a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8025a8c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8025a90:	2b00      	cmp	r3, #0
 8025a92:	da0c      	bge.n	8025aae <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8025a94:	78fb      	ldrb	r3, [r7, #3]
 8025a96:	f003 020f 	and.w	r2, r3, #15
 8025a9a:	4613      	mov	r3, r2
 8025a9c:	00db      	lsls	r3, r3, #3
 8025a9e:	4413      	add	r3, r2
 8025aa0:	009b      	lsls	r3, r3, #2
 8025aa2:	3338      	adds	r3, #56	; 0x38
 8025aa4:	687a      	ldr	r2, [r7, #4]
 8025aa6:	4413      	add	r3, r2
 8025aa8:	3304      	adds	r3, #4
 8025aaa:	60fb      	str	r3, [r7, #12]
 8025aac:	e00c      	b.n	8025ac8 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8025aae:	78fb      	ldrb	r3, [r7, #3]
 8025ab0:	f003 020f 	and.w	r2, r3, #15
 8025ab4:	4613      	mov	r3, r2
 8025ab6:	00db      	lsls	r3, r3, #3
 8025ab8:	4413      	add	r3, r2
 8025aba:	009b      	lsls	r3, r3, #2
 8025abc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8025ac0:	687a      	ldr	r2, [r7, #4]
 8025ac2:	4413      	add	r3, r2
 8025ac4:	3304      	adds	r3, #4
 8025ac6:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8025ac8:	687b      	ldr	r3, [r7, #4]
 8025aca:	681b      	ldr	r3, [r3, #0]
 8025acc:	68f9      	ldr	r1, [r7, #12]
 8025ace:	4618      	mov	r0, r3
 8025ad0:	f002 fbac 	bl	802822c <USB_EPStopXfer>
 8025ad4:	4603      	mov	r3, r0
 8025ad6:	72fb      	strb	r3, [r7, #11]

  return ret;
 8025ad8:	7afb      	ldrb	r3, [r7, #11]
}
 8025ada:	4618      	mov	r0, r3
 8025adc:	3710      	adds	r7, #16
 8025ade:	46bd      	mov	sp, r7
 8025ae0:	bd80      	pop	{r7, pc}

08025ae2 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8025ae2:	b580      	push	{r7, lr}
 8025ae4:	b08a      	sub	sp, #40	; 0x28
 8025ae6:	af02      	add	r7, sp, #8
 8025ae8:	6078      	str	r0, [r7, #4]
 8025aea:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8025aec:	687b      	ldr	r3, [r7, #4]
 8025aee:	681b      	ldr	r3, [r3, #0]
 8025af0:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8025af2:	697b      	ldr	r3, [r7, #20]
 8025af4:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8025af6:	683a      	ldr	r2, [r7, #0]
 8025af8:	4613      	mov	r3, r2
 8025afa:	00db      	lsls	r3, r3, #3
 8025afc:	4413      	add	r3, r2
 8025afe:	009b      	lsls	r3, r3, #2
 8025b00:	3338      	adds	r3, #56	; 0x38
 8025b02:	687a      	ldr	r2, [r7, #4]
 8025b04:	4413      	add	r3, r2
 8025b06:	3304      	adds	r3, #4
 8025b08:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8025b0a:	68fb      	ldr	r3, [r7, #12]
 8025b0c:	6a1a      	ldr	r2, [r3, #32]
 8025b0e:	68fb      	ldr	r3, [r7, #12]
 8025b10:	699b      	ldr	r3, [r3, #24]
 8025b12:	429a      	cmp	r2, r3
 8025b14:	d901      	bls.n	8025b1a <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8025b16:	2301      	movs	r3, #1
 8025b18:	e06c      	b.n	8025bf4 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8025b1a:	68fb      	ldr	r3, [r7, #12]
 8025b1c:	699a      	ldr	r2, [r3, #24]
 8025b1e:	68fb      	ldr	r3, [r7, #12]
 8025b20:	6a1b      	ldr	r3, [r3, #32]
 8025b22:	1ad3      	subs	r3, r2, r3
 8025b24:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8025b26:	68fb      	ldr	r3, [r7, #12]
 8025b28:	68db      	ldr	r3, [r3, #12]
 8025b2a:	69fa      	ldr	r2, [r7, #28]
 8025b2c:	429a      	cmp	r2, r3
 8025b2e:	d902      	bls.n	8025b36 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8025b30:	68fb      	ldr	r3, [r7, #12]
 8025b32:	68db      	ldr	r3, [r3, #12]
 8025b34:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8025b36:	69fb      	ldr	r3, [r7, #28]
 8025b38:	3303      	adds	r3, #3
 8025b3a:	089b      	lsrs	r3, r3, #2
 8025b3c:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8025b3e:	e02b      	b.n	8025b98 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8025b40:	68fb      	ldr	r3, [r7, #12]
 8025b42:	699a      	ldr	r2, [r3, #24]
 8025b44:	68fb      	ldr	r3, [r7, #12]
 8025b46:	6a1b      	ldr	r3, [r3, #32]
 8025b48:	1ad3      	subs	r3, r2, r3
 8025b4a:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8025b4c:	68fb      	ldr	r3, [r7, #12]
 8025b4e:	68db      	ldr	r3, [r3, #12]
 8025b50:	69fa      	ldr	r2, [r7, #28]
 8025b52:	429a      	cmp	r2, r3
 8025b54:	d902      	bls.n	8025b5c <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8025b56:	68fb      	ldr	r3, [r7, #12]
 8025b58:	68db      	ldr	r3, [r3, #12]
 8025b5a:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8025b5c:	69fb      	ldr	r3, [r7, #28]
 8025b5e:	3303      	adds	r3, #3
 8025b60:	089b      	lsrs	r3, r3, #2
 8025b62:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8025b64:	68fb      	ldr	r3, [r7, #12]
 8025b66:	6919      	ldr	r1, [r3, #16]
 8025b68:	683b      	ldr	r3, [r7, #0]
 8025b6a:	b2da      	uxtb	r2, r3
 8025b6c:	69fb      	ldr	r3, [r7, #28]
 8025b6e:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8025b70:	687b      	ldr	r3, [r7, #4]
 8025b72:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8025b74:	b2db      	uxtb	r3, r3
 8025b76:	9300      	str	r3, [sp, #0]
 8025b78:	4603      	mov	r3, r0
 8025b7a:	6978      	ldr	r0, [r7, #20]
 8025b7c:	f002 fc00 	bl	8028380 <USB_WritePacket>

    ep->xfer_buff  += len;
 8025b80:	68fb      	ldr	r3, [r7, #12]
 8025b82:	691a      	ldr	r2, [r3, #16]
 8025b84:	69fb      	ldr	r3, [r7, #28]
 8025b86:	441a      	add	r2, r3
 8025b88:	68fb      	ldr	r3, [r7, #12]
 8025b8a:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8025b8c:	68fb      	ldr	r3, [r7, #12]
 8025b8e:	6a1a      	ldr	r2, [r3, #32]
 8025b90:	69fb      	ldr	r3, [r7, #28]
 8025b92:	441a      	add	r2, r3
 8025b94:	68fb      	ldr	r3, [r7, #12]
 8025b96:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8025b98:	683b      	ldr	r3, [r7, #0]
 8025b9a:	015a      	lsls	r2, r3, #5
 8025b9c:	693b      	ldr	r3, [r7, #16]
 8025b9e:	4413      	add	r3, r2
 8025ba0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8025ba4:	699b      	ldr	r3, [r3, #24]
 8025ba6:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8025ba8:	69ba      	ldr	r2, [r7, #24]
 8025baa:	429a      	cmp	r2, r3
 8025bac:	d809      	bhi.n	8025bc2 <PCD_WriteEmptyTxFifo+0xe0>
 8025bae:	68fb      	ldr	r3, [r7, #12]
 8025bb0:	6a1a      	ldr	r2, [r3, #32]
 8025bb2:	68fb      	ldr	r3, [r7, #12]
 8025bb4:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8025bb6:	429a      	cmp	r2, r3
 8025bb8:	d203      	bcs.n	8025bc2 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8025bba:	68fb      	ldr	r3, [r7, #12]
 8025bbc:	699b      	ldr	r3, [r3, #24]
 8025bbe:	2b00      	cmp	r3, #0
 8025bc0:	d1be      	bne.n	8025b40 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8025bc2:	68fb      	ldr	r3, [r7, #12]
 8025bc4:	699a      	ldr	r2, [r3, #24]
 8025bc6:	68fb      	ldr	r3, [r7, #12]
 8025bc8:	6a1b      	ldr	r3, [r3, #32]
 8025bca:	429a      	cmp	r2, r3
 8025bcc:	d811      	bhi.n	8025bf2 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8025bce:	683b      	ldr	r3, [r7, #0]
 8025bd0:	f003 030f 	and.w	r3, r3, #15
 8025bd4:	2201      	movs	r2, #1
 8025bd6:	fa02 f303 	lsl.w	r3, r2, r3
 8025bda:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8025bdc:	693b      	ldr	r3, [r7, #16]
 8025bde:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8025be2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8025be4:	68bb      	ldr	r3, [r7, #8]
 8025be6:	43db      	mvns	r3, r3
 8025be8:	6939      	ldr	r1, [r7, #16]
 8025bea:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8025bee:	4013      	ands	r3, r2
 8025bf0:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8025bf2:	2300      	movs	r3, #0
}
 8025bf4:	4618      	mov	r0, r3
 8025bf6:	3720      	adds	r7, #32
 8025bf8:	46bd      	mov	sp, r7
 8025bfa:	bd80      	pop	{r7, pc}

08025bfc <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8025bfc:	b580      	push	{r7, lr}
 8025bfe:	b088      	sub	sp, #32
 8025c00:	af00      	add	r7, sp, #0
 8025c02:	6078      	str	r0, [r7, #4]
 8025c04:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8025c06:	687b      	ldr	r3, [r7, #4]
 8025c08:	681b      	ldr	r3, [r3, #0]
 8025c0a:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8025c0c:	69fb      	ldr	r3, [r7, #28]
 8025c0e:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8025c10:	69fb      	ldr	r3, [r7, #28]
 8025c12:	333c      	adds	r3, #60	; 0x3c
 8025c14:	3304      	adds	r3, #4
 8025c16:	681b      	ldr	r3, [r3, #0]
 8025c18:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8025c1a:	683b      	ldr	r3, [r7, #0]
 8025c1c:	015a      	lsls	r2, r3, #5
 8025c1e:	69bb      	ldr	r3, [r7, #24]
 8025c20:	4413      	add	r3, r2
 8025c22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8025c26:	689b      	ldr	r3, [r3, #8]
 8025c28:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8025c2a:	687b      	ldr	r3, [r7, #4]
 8025c2c:	691b      	ldr	r3, [r3, #16]
 8025c2e:	2b01      	cmp	r3, #1
 8025c30:	d17b      	bne.n	8025d2a <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8025c32:	693b      	ldr	r3, [r7, #16]
 8025c34:	f003 0308 	and.w	r3, r3, #8
 8025c38:	2b00      	cmp	r3, #0
 8025c3a:	d015      	beq.n	8025c68 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8025c3c:	697b      	ldr	r3, [r7, #20]
 8025c3e:	4a61      	ldr	r2, [pc, #388]	; (8025dc4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8025c40:	4293      	cmp	r3, r2
 8025c42:	f240 80b9 	bls.w	8025db8 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8025c46:	693b      	ldr	r3, [r7, #16]
 8025c48:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8025c4c:	2b00      	cmp	r3, #0
 8025c4e:	f000 80b3 	beq.w	8025db8 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8025c52:	683b      	ldr	r3, [r7, #0]
 8025c54:	015a      	lsls	r2, r3, #5
 8025c56:	69bb      	ldr	r3, [r7, #24]
 8025c58:	4413      	add	r3, r2
 8025c5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8025c5e:	461a      	mov	r2, r3
 8025c60:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8025c64:	6093      	str	r3, [r2, #8]
 8025c66:	e0a7      	b.n	8025db8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8025c68:	693b      	ldr	r3, [r7, #16]
 8025c6a:	f003 0320 	and.w	r3, r3, #32
 8025c6e:	2b00      	cmp	r3, #0
 8025c70:	d009      	beq.n	8025c86 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8025c72:	683b      	ldr	r3, [r7, #0]
 8025c74:	015a      	lsls	r2, r3, #5
 8025c76:	69bb      	ldr	r3, [r7, #24]
 8025c78:	4413      	add	r3, r2
 8025c7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8025c7e:	461a      	mov	r2, r3
 8025c80:	2320      	movs	r3, #32
 8025c82:	6093      	str	r3, [r2, #8]
 8025c84:	e098      	b.n	8025db8 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8025c86:	693b      	ldr	r3, [r7, #16]
 8025c88:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8025c8c:	2b00      	cmp	r3, #0
 8025c8e:	f040 8093 	bne.w	8025db8 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8025c92:	697b      	ldr	r3, [r7, #20]
 8025c94:	4a4b      	ldr	r2, [pc, #300]	; (8025dc4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8025c96:	4293      	cmp	r3, r2
 8025c98:	d90f      	bls.n	8025cba <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8025c9a:	693b      	ldr	r3, [r7, #16]
 8025c9c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8025ca0:	2b00      	cmp	r3, #0
 8025ca2:	d00a      	beq.n	8025cba <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8025ca4:	683b      	ldr	r3, [r7, #0]
 8025ca6:	015a      	lsls	r2, r3, #5
 8025ca8:	69bb      	ldr	r3, [r7, #24]
 8025caa:	4413      	add	r3, r2
 8025cac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8025cb0:	461a      	mov	r2, r3
 8025cb2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8025cb6:	6093      	str	r3, [r2, #8]
 8025cb8:	e07e      	b.n	8025db8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8025cba:	683a      	ldr	r2, [r7, #0]
 8025cbc:	4613      	mov	r3, r2
 8025cbe:	00db      	lsls	r3, r3, #3
 8025cc0:	4413      	add	r3, r2
 8025cc2:	009b      	lsls	r3, r3, #2
 8025cc4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8025cc8:	687a      	ldr	r2, [r7, #4]
 8025cca:	4413      	add	r3, r2
 8025ccc:	3304      	adds	r3, #4
 8025cce:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8025cd0:	68fb      	ldr	r3, [r7, #12]
 8025cd2:	69da      	ldr	r2, [r3, #28]
 8025cd4:	683b      	ldr	r3, [r7, #0]
 8025cd6:	0159      	lsls	r1, r3, #5
 8025cd8:	69bb      	ldr	r3, [r7, #24]
 8025cda:	440b      	add	r3, r1
 8025cdc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8025ce0:	691b      	ldr	r3, [r3, #16]
 8025ce2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8025ce6:	1ad2      	subs	r2, r2, r3
 8025ce8:	68fb      	ldr	r3, [r7, #12]
 8025cea:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8025cec:	683b      	ldr	r3, [r7, #0]
 8025cee:	2b00      	cmp	r3, #0
 8025cf0:	d114      	bne.n	8025d1c <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8025cf2:	68fb      	ldr	r3, [r7, #12]
 8025cf4:	699b      	ldr	r3, [r3, #24]
 8025cf6:	2b00      	cmp	r3, #0
 8025cf8:	d109      	bne.n	8025d0e <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8025cfa:	687b      	ldr	r3, [r7, #4]
 8025cfc:	6818      	ldr	r0, [r3, #0]
 8025cfe:	687b      	ldr	r3, [r7, #4]
 8025d00:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8025d04:	461a      	mov	r2, r3
 8025d06:	2101      	movs	r1, #1
 8025d08:	f002 fe20 	bl	802894c <USB_EP0_OutStart>
 8025d0c:	e006      	b.n	8025d1c <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8025d0e:	68fb      	ldr	r3, [r7, #12]
 8025d10:	691a      	ldr	r2, [r3, #16]
 8025d12:	68fb      	ldr	r3, [r7, #12]
 8025d14:	6a1b      	ldr	r3, [r3, #32]
 8025d16:	441a      	add	r2, r3
 8025d18:	68fb      	ldr	r3, [r7, #12]
 8025d1a:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8025d1c:	683b      	ldr	r3, [r7, #0]
 8025d1e:	b2db      	uxtb	r3, r3
 8025d20:	4619      	mov	r1, r3
 8025d22:	6878      	ldr	r0, [r7, #4]
 8025d24:	f005 fa54 	bl	802b1d0 <HAL_PCD_DataOutStageCallback>
 8025d28:	e046      	b.n	8025db8 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8025d2a:	697b      	ldr	r3, [r7, #20]
 8025d2c:	4a26      	ldr	r2, [pc, #152]	; (8025dc8 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8025d2e:	4293      	cmp	r3, r2
 8025d30:	d124      	bne.n	8025d7c <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8025d32:	693b      	ldr	r3, [r7, #16]
 8025d34:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8025d38:	2b00      	cmp	r3, #0
 8025d3a:	d00a      	beq.n	8025d52 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8025d3c:	683b      	ldr	r3, [r7, #0]
 8025d3e:	015a      	lsls	r2, r3, #5
 8025d40:	69bb      	ldr	r3, [r7, #24]
 8025d42:	4413      	add	r3, r2
 8025d44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8025d48:	461a      	mov	r2, r3
 8025d4a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8025d4e:	6093      	str	r3, [r2, #8]
 8025d50:	e032      	b.n	8025db8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8025d52:	693b      	ldr	r3, [r7, #16]
 8025d54:	f003 0320 	and.w	r3, r3, #32
 8025d58:	2b00      	cmp	r3, #0
 8025d5a:	d008      	beq.n	8025d6e <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8025d5c:	683b      	ldr	r3, [r7, #0]
 8025d5e:	015a      	lsls	r2, r3, #5
 8025d60:	69bb      	ldr	r3, [r7, #24]
 8025d62:	4413      	add	r3, r2
 8025d64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8025d68:	461a      	mov	r2, r3
 8025d6a:	2320      	movs	r3, #32
 8025d6c:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8025d6e:	683b      	ldr	r3, [r7, #0]
 8025d70:	b2db      	uxtb	r3, r3
 8025d72:	4619      	mov	r1, r3
 8025d74:	6878      	ldr	r0, [r7, #4]
 8025d76:	f005 fa2b 	bl	802b1d0 <HAL_PCD_DataOutStageCallback>
 8025d7a:	e01d      	b.n	8025db8 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8025d7c:	683b      	ldr	r3, [r7, #0]
 8025d7e:	2b00      	cmp	r3, #0
 8025d80:	d114      	bne.n	8025dac <PCD_EP_OutXfrComplete_int+0x1b0>
 8025d82:	6879      	ldr	r1, [r7, #4]
 8025d84:	683a      	ldr	r2, [r7, #0]
 8025d86:	4613      	mov	r3, r2
 8025d88:	00db      	lsls	r3, r3, #3
 8025d8a:	4413      	add	r3, r2
 8025d8c:	009b      	lsls	r3, r3, #2
 8025d8e:	440b      	add	r3, r1
 8025d90:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8025d94:	681b      	ldr	r3, [r3, #0]
 8025d96:	2b00      	cmp	r3, #0
 8025d98:	d108      	bne.n	8025dac <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8025d9a:	687b      	ldr	r3, [r7, #4]
 8025d9c:	6818      	ldr	r0, [r3, #0]
 8025d9e:	687b      	ldr	r3, [r7, #4]
 8025da0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8025da4:	461a      	mov	r2, r3
 8025da6:	2100      	movs	r1, #0
 8025da8:	f002 fdd0 	bl	802894c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8025dac:	683b      	ldr	r3, [r7, #0]
 8025dae:	b2db      	uxtb	r3, r3
 8025db0:	4619      	mov	r1, r3
 8025db2:	6878      	ldr	r0, [r7, #4]
 8025db4:	f005 fa0c 	bl	802b1d0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8025db8:	2300      	movs	r3, #0
}
 8025dba:	4618      	mov	r0, r3
 8025dbc:	3720      	adds	r7, #32
 8025dbe:	46bd      	mov	sp, r7
 8025dc0:	bd80      	pop	{r7, pc}
 8025dc2:	bf00      	nop
 8025dc4:	4f54300a 	.word	0x4f54300a
 8025dc8:	4f54310a 	.word	0x4f54310a

08025dcc <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8025dcc:	b580      	push	{r7, lr}
 8025dce:	b086      	sub	sp, #24
 8025dd0:	af00      	add	r7, sp, #0
 8025dd2:	6078      	str	r0, [r7, #4]
 8025dd4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8025dd6:	687b      	ldr	r3, [r7, #4]
 8025dd8:	681b      	ldr	r3, [r3, #0]
 8025dda:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8025ddc:	697b      	ldr	r3, [r7, #20]
 8025dde:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8025de0:	697b      	ldr	r3, [r7, #20]
 8025de2:	333c      	adds	r3, #60	; 0x3c
 8025de4:	3304      	adds	r3, #4
 8025de6:	681b      	ldr	r3, [r3, #0]
 8025de8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8025dea:	683b      	ldr	r3, [r7, #0]
 8025dec:	015a      	lsls	r2, r3, #5
 8025dee:	693b      	ldr	r3, [r7, #16]
 8025df0:	4413      	add	r3, r2
 8025df2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8025df6:	689b      	ldr	r3, [r3, #8]
 8025df8:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8025dfa:	68fb      	ldr	r3, [r7, #12]
 8025dfc:	4a15      	ldr	r2, [pc, #84]	; (8025e54 <PCD_EP_OutSetupPacket_int+0x88>)
 8025dfe:	4293      	cmp	r3, r2
 8025e00:	d90e      	bls.n	8025e20 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8025e02:	68bb      	ldr	r3, [r7, #8]
 8025e04:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8025e08:	2b00      	cmp	r3, #0
 8025e0a:	d009      	beq.n	8025e20 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8025e0c:	683b      	ldr	r3, [r7, #0]
 8025e0e:	015a      	lsls	r2, r3, #5
 8025e10:	693b      	ldr	r3, [r7, #16]
 8025e12:	4413      	add	r3, r2
 8025e14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8025e18:	461a      	mov	r2, r3
 8025e1a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8025e1e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8025e20:	6878      	ldr	r0, [r7, #4]
 8025e22:	f005 f9c3 	bl	802b1ac <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8025e26:	68fb      	ldr	r3, [r7, #12]
 8025e28:	4a0a      	ldr	r2, [pc, #40]	; (8025e54 <PCD_EP_OutSetupPacket_int+0x88>)
 8025e2a:	4293      	cmp	r3, r2
 8025e2c:	d90c      	bls.n	8025e48 <PCD_EP_OutSetupPacket_int+0x7c>
 8025e2e:	687b      	ldr	r3, [r7, #4]
 8025e30:	691b      	ldr	r3, [r3, #16]
 8025e32:	2b01      	cmp	r3, #1
 8025e34:	d108      	bne.n	8025e48 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8025e36:	687b      	ldr	r3, [r7, #4]
 8025e38:	6818      	ldr	r0, [r3, #0]
 8025e3a:	687b      	ldr	r3, [r7, #4]
 8025e3c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8025e40:	461a      	mov	r2, r3
 8025e42:	2101      	movs	r1, #1
 8025e44:	f002 fd82 	bl	802894c <USB_EP0_OutStart>
  }

  return HAL_OK;
 8025e48:	2300      	movs	r3, #0
}
 8025e4a:	4618      	mov	r0, r3
 8025e4c:	3718      	adds	r7, #24
 8025e4e:	46bd      	mov	sp, r7
 8025e50:	bd80      	pop	{r7, pc}
 8025e52:	bf00      	nop
 8025e54:	4f54300a 	.word	0x4f54300a

08025e58 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8025e58:	b480      	push	{r7}
 8025e5a:	b085      	sub	sp, #20
 8025e5c:	af00      	add	r7, sp, #0
 8025e5e:	6078      	str	r0, [r7, #4]
 8025e60:	460b      	mov	r3, r1
 8025e62:	70fb      	strb	r3, [r7, #3]
 8025e64:	4613      	mov	r3, r2
 8025e66:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8025e68:	687b      	ldr	r3, [r7, #4]
 8025e6a:	681b      	ldr	r3, [r3, #0]
 8025e6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8025e6e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8025e70:	78fb      	ldrb	r3, [r7, #3]
 8025e72:	2b00      	cmp	r3, #0
 8025e74:	d107      	bne.n	8025e86 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8025e76:	883b      	ldrh	r3, [r7, #0]
 8025e78:	0419      	lsls	r1, r3, #16
 8025e7a:	687b      	ldr	r3, [r7, #4]
 8025e7c:	681b      	ldr	r3, [r3, #0]
 8025e7e:	68ba      	ldr	r2, [r7, #8]
 8025e80:	430a      	orrs	r2, r1
 8025e82:	629a      	str	r2, [r3, #40]	; 0x28
 8025e84:	e028      	b.n	8025ed8 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8025e86:	687b      	ldr	r3, [r7, #4]
 8025e88:	681b      	ldr	r3, [r3, #0]
 8025e8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8025e8c:	0c1b      	lsrs	r3, r3, #16
 8025e8e:	68ba      	ldr	r2, [r7, #8]
 8025e90:	4413      	add	r3, r2
 8025e92:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8025e94:	2300      	movs	r3, #0
 8025e96:	73fb      	strb	r3, [r7, #15]
 8025e98:	e00d      	b.n	8025eb6 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8025e9a:	687b      	ldr	r3, [r7, #4]
 8025e9c:	681a      	ldr	r2, [r3, #0]
 8025e9e:	7bfb      	ldrb	r3, [r7, #15]
 8025ea0:	3340      	adds	r3, #64	; 0x40
 8025ea2:	009b      	lsls	r3, r3, #2
 8025ea4:	4413      	add	r3, r2
 8025ea6:	685b      	ldr	r3, [r3, #4]
 8025ea8:	0c1b      	lsrs	r3, r3, #16
 8025eaa:	68ba      	ldr	r2, [r7, #8]
 8025eac:	4413      	add	r3, r2
 8025eae:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8025eb0:	7bfb      	ldrb	r3, [r7, #15]
 8025eb2:	3301      	adds	r3, #1
 8025eb4:	73fb      	strb	r3, [r7, #15]
 8025eb6:	7bfa      	ldrb	r2, [r7, #15]
 8025eb8:	78fb      	ldrb	r3, [r7, #3]
 8025eba:	3b01      	subs	r3, #1
 8025ebc:	429a      	cmp	r2, r3
 8025ebe:	d3ec      	bcc.n	8025e9a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8025ec0:	883b      	ldrh	r3, [r7, #0]
 8025ec2:	0418      	lsls	r0, r3, #16
 8025ec4:	687b      	ldr	r3, [r7, #4]
 8025ec6:	6819      	ldr	r1, [r3, #0]
 8025ec8:	78fb      	ldrb	r3, [r7, #3]
 8025eca:	3b01      	subs	r3, #1
 8025ecc:	68ba      	ldr	r2, [r7, #8]
 8025ece:	4302      	orrs	r2, r0
 8025ed0:	3340      	adds	r3, #64	; 0x40
 8025ed2:	009b      	lsls	r3, r3, #2
 8025ed4:	440b      	add	r3, r1
 8025ed6:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8025ed8:	2300      	movs	r3, #0
}
 8025eda:	4618      	mov	r0, r3
 8025edc:	3714      	adds	r7, #20
 8025ede:	46bd      	mov	sp, r7
 8025ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025ee4:	4770      	bx	lr

08025ee6 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8025ee6:	b480      	push	{r7}
 8025ee8:	b083      	sub	sp, #12
 8025eea:	af00      	add	r7, sp, #0
 8025eec:	6078      	str	r0, [r7, #4]
 8025eee:	460b      	mov	r3, r1
 8025ef0:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8025ef2:	687b      	ldr	r3, [r7, #4]
 8025ef4:	681b      	ldr	r3, [r3, #0]
 8025ef6:	887a      	ldrh	r2, [r7, #2]
 8025ef8:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8025efa:	2300      	movs	r3, #0
}
 8025efc:	4618      	mov	r0, r3
 8025efe:	370c      	adds	r7, #12
 8025f00:	46bd      	mov	sp, r7
 8025f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025f06:	4770      	bx	lr

08025f08 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8025f08:	b480      	push	{r7}
 8025f0a:	b085      	sub	sp, #20
 8025f0c:	af00      	add	r7, sp, #0
 8025f0e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8025f10:	687b      	ldr	r3, [r7, #4]
 8025f12:	681b      	ldr	r3, [r3, #0]
 8025f14:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8025f16:	687b      	ldr	r3, [r7, #4]
 8025f18:	2201      	movs	r2, #1
 8025f1a:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8025f1e:	687b      	ldr	r3, [r7, #4]
 8025f20:	2200      	movs	r2, #0
 8025f22:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8025f26:	68fb      	ldr	r3, [r7, #12]
 8025f28:	699b      	ldr	r3, [r3, #24]
 8025f2a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8025f2e:	68fb      	ldr	r3, [r7, #12]
 8025f30:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8025f32:	68fb      	ldr	r3, [r7, #12]
 8025f34:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8025f36:	4b05      	ldr	r3, [pc, #20]	; (8025f4c <HAL_PCDEx_ActivateLPM+0x44>)
 8025f38:	4313      	orrs	r3, r2
 8025f3a:	68fa      	ldr	r2, [r7, #12]
 8025f3c:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8025f3e:	2300      	movs	r3, #0
}
 8025f40:	4618      	mov	r0, r3
 8025f42:	3714      	adds	r7, #20
 8025f44:	46bd      	mov	sp, r7
 8025f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025f4a:	4770      	bx	lr
 8025f4c:	10000003 	.word	0x10000003

08025f50 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8025f50:	b580      	push	{r7, lr}
 8025f52:	b082      	sub	sp, #8
 8025f54:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8025f56:	2300      	movs	r3, #0
 8025f58:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8025f5a:	4b23      	ldr	r3, [pc, #140]	; (8025fe8 <HAL_PWREx_EnableOverDrive+0x98>)
 8025f5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8025f5e:	4a22      	ldr	r2, [pc, #136]	; (8025fe8 <HAL_PWREx_EnableOverDrive+0x98>)
 8025f60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8025f64:	6413      	str	r3, [r2, #64]	; 0x40
 8025f66:	4b20      	ldr	r3, [pc, #128]	; (8025fe8 <HAL_PWREx_EnableOverDrive+0x98>)
 8025f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8025f6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8025f6e:	603b      	str	r3, [r7, #0]
 8025f70:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8025f72:	4b1e      	ldr	r3, [pc, #120]	; (8025fec <HAL_PWREx_EnableOverDrive+0x9c>)
 8025f74:	681b      	ldr	r3, [r3, #0]
 8025f76:	4a1d      	ldr	r2, [pc, #116]	; (8025fec <HAL_PWREx_EnableOverDrive+0x9c>)
 8025f78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8025f7c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8025f7e:	f7fb ffbf 	bl	8021f00 <HAL_GetTick>
 8025f82:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8025f84:	e009      	b.n	8025f9a <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8025f86:	f7fb ffbb 	bl	8021f00 <HAL_GetTick>
 8025f8a:	4602      	mov	r2, r0
 8025f8c:	687b      	ldr	r3, [r7, #4]
 8025f8e:	1ad3      	subs	r3, r2, r3
 8025f90:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8025f94:	d901      	bls.n	8025f9a <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8025f96:	2303      	movs	r3, #3
 8025f98:	e022      	b.n	8025fe0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8025f9a:	4b14      	ldr	r3, [pc, #80]	; (8025fec <HAL_PWREx_EnableOverDrive+0x9c>)
 8025f9c:	685b      	ldr	r3, [r3, #4]
 8025f9e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8025fa2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8025fa6:	d1ee      	bne.n	8025f86 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8025fa8:	4b10      	ldr	r3, [pc, #64]	; (8025fec <HAL_PWREx_EnableOverDrive+0x9c>)
 8025faa:	681b      	ldr	r3, [r3, #0]
 8025fac:	4a0f      	ldr	r2, [pc, #60]	; (8025fec <HAL_PWREx_EnableOverDrive+0x9c>)
 8025fae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8025fb2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8025fb4:	f7fb ffa4 	bl	8021f00 <HAL_GetTick>
 8025fb8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8025fba:	e009      	b.n	8025fd0 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8025fbc:	f7fb ffa0 	bl	8021f00 <HAL_GetTick>
 8025fc0:	4602      	mov	r2, r0
 8025fc2:	687b      	ldr	r3, [r7, #4]
 8025fc4:	1ad3      	subs	r3, r2, r3
 8025fc6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8025fca:	d901      	bls.n	8025fd0 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8025fcc:	2303      	movs	r3, #3
 8025fce:	e007      	b.n	8025fe0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8025fd0:	4b06      	ldr	r3, [pc, #24]	; (8025fec <HAL_PWREx_EnableOverDrive+0x9c>)
 8025fd2:	685b      	ldr	r3, [r3, #4]
 8025fd4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8025fd8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8025fdc:	d1ee      	bne.n	8025fbc <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8025fde:	2300      	movs	r3, #0
}
 8025fe0:	4618      	mov	r0, r3
 8025fe2:	3708      	adds	r7, #8
 8025fe4:	46bd      	mov	sp, r7
 8025fe6:	bd80      	pop	{r7, pc}
 8025fe8:	40023800 	.word	0x40023800
 8025fec:	40007000 	.word	0x40007000

08025ff0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8025ff0:	b580      	push	{r7, lr}
 8025ff2:	b086      	sub	sp, #24
 8025ff4:	af00      	add	r7, sp, #0
 8025ff6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8025ff8:	2300      	movs	r3, #0
 8025ffa:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8025ffc:	687b      	ldr	r3, [r7, #4]
 8025ffe:	2b00      	cmp	r3, #0
 8026000:	d101      	bne.n	8026006 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8026002:	2301      	movs	r3, #1
 8026004:	e291      	b.n	802652a <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8026006:	687b      	ldr	r3, [r7, #4]
 8026008:	681b      	ldr	r3, [r3, #0]
 802600a:	f003 0301 	and.w	r3, r3, #1
 802600e:	2b00      	cmp	r3, #0
 8026010:	f000 8087 	beq.w	8026122 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8026014:	4b96      	ldr	r3, [pc, #600]	; (8026270 <HAL_RCC_OscConfig+0x280>)
 8026016:	689b      	ldr	r3, [r3, #8]
 8026018:	f003 030c 	and.w	r3, r3, #12
 802601c:	2b04      	cmp	r3, #4
 802601e:	d00c      	beq.n	802603a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8026020:	4b93      	ldr	r3, [pc, #588]	; (8026270 <HAL_RCC_OscConfig+0x280>)
 8026022:	689b      	ldr	r3, [r3, #8]
 8026024:	f003 030c 	and.w	r3, r3, #12
 8026028:	2b08      	cmp	r3, #8
 802602a:	d112      	bne.n	8026052 <HAL_RCC_OscConfig+0x62>
 802602c:	4b90      	ldr	r3, [pc, #576]	; (8026270 <HAL_RCC_OscConfig+0x280>)
 802602e:	685b      	ldr	r3, [r3, #4]
 8026030:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8026034:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8026038:	d10b      	bne.n	8026052 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 802603a:	4b8d      	ldr	r3, [pc, #564]	; (8026270 <HAL_RCC_OscConfig+0x280>)
 802603c:	681b      	ldr	r3, [r3, #0]
 802603e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8026042:	2b00      	cmp	r3, #0
 8026044:	d06c      	beq.n	8026120 <HAL_RCC_OscConfig+0x130>
 8026046:	687b      	ldr	r3, [r7, #4]
 8026048:	685b      	ldr	r3, [r3, #4]
 802604a:	2b00      	cmp	r3, #0
 802604c:	d168      	bne.n	8026120 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 802604e:	2301      	movs	r3, #1
 8026050:	e26b      	b.n	802652a <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8026052:	687b      	ldr	r3, [r7, #4]
 8026054:	685b      	ldr	r3, [r3, #4]
 8026056:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 802605a:	d106      	bne.n	802606a <HAL_RCC_OscConfig+0x7a>
 802605c:	4b84      	ldr	r3, [pc, #528]	; (8026270 <HAL_RCC_OscConfig+0x280>)
 802605e:	681b      	ldr	r3, [r3, #0]
 8026060:	4a83      	ldr	r2, [pc, #524]	; (8026270 <HAL_RCC_OscConfig+0x280>)
 8026062:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8026066:	6013      	str	r3, [r2, #0]
 8026068:	e02e      	b.n	80260c8 <HAL_RCC_OscConfig+0xd8>
 802606a:	687b      	ldr	r3, [r7, #4]
 802606c:	685b      	ldr	r3, [r3, #4]
 802606e:	2b00      	cmp	r3, #0
 8026070:	d10c      	bne.n	802608c <HAL_RCC_OscConfig+0x9c>
 8026072:	4b7f      	ldr	r3, [pc, #508]	; (8026270 <HAL_RCC_OscConfig+0x280>)
 8026074:	681b      	ldr	r3, [r3, #0]
 8026076:	4a7e      	ldr	r2, [pc, #504]	; (8026270 <HAL_RCC_OscConfig+0x280>)
 8026078:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 802607c:	6013      	str	r3, [r2, #0]
 802607e:	4b7c      	ldr	r3, [pc, #496]	; (8026270 <HAL_RCC_OscConfig+0x280>)
 8026080:	681b      	ldr	r3, [r3, #0]
 8026082:	4a7b      	ldr	r2, [pc, #492]	; (8026270 <HAL_RCC_OscConfig+0x280>)
 8026084:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8026088:	6013      	str	r3, [r2, #0]
 802608a:	e01d      	b.n	80260c8 <HAL_RCC_OscConfig+0xd8>
 802608c:	687b      	ldr	r3, [r7, #4]
 802608e:	685b      	ldr	r3, [r3, #4]
 8026090:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8026094:	d10c      	bne.n	80260b0 <HAL_RCC_OscConfig+0xc0>
 8026096:	4b76      	ldr	r3, [pc, #472]	; (8026270 <HAL_RCC_OscConfig+0x280>)
 8026098:	681b      	ldr	r3, [r3, #0]
 802609a:	4a75      	ldr	r2, [pc, #468]	; (8026270 <HAL_RCC_OscConfig+0x280>)
 802609c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80260a0:	6013      	str	r3, [r2, #0]
 80260a2:	4b73      	ldr	r3, [pc, #460]	; (8026270 <HAL_RCC_OscConfig+0x280>)
 80260a4:	681b      	ldr	r3, [r3, #0]
 80260a6:	4a72      	ldr	r2, [pc, #456]	; (8026270 <HAL_RCC_OscConfig+0x280>)
 80260a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80260ac:	6013      	str	r3, [r2, #0]
 80260ae:	e00b      	b.n	80260c8 <HAL_RCC_OscConfig+0xd8>
 80260b0:	4b6f      	ldr	r3, [pc, #444]	; (8026270 <HAL_RCC_OscConfig+0x280>)
 80260b2:	681b      	ldr	r3, [r3, #0]
 80260b4:	4a6e      	ldr	r2, [pc, #440]	; (8026270 <HAL_RCC_OscConfig+0x280>)
 80260b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80260ba:	6013      	str	r3, [r2, #0]
 80260bc:	4b6c      	ldr	r3, [pc, #432]	; (8026270 <HAL_RCC_OscConfig+0x280>)
 80260be:	681b      	ldr	r3, [r3, #0]
 80260c0:	4a6b      	ldr	r2, [pc, #428]	; (8026270 <HAL_RCC_OscConfig+0x280>)
 80260c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80260c6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80260c8:	687b      	ldr	r3, [r7, #4]
 80260ca:	685b      	ldr	r3, [r3, #4]
 80260cc:	2b00      	cmp	r3, #0
 80260ce:	d013      	beq.n	80260f8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80260d0:	f7fb ff16 	bl	8021f00 <HAL_GetTick>
 80260d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80260d6:	e008      	b.n	80260ea <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80260d8:	f7fb ff12 	bl	8021f00 <HAL_GetTick>
 80260dc:	4602      	mov	r2, r0
 80260de:	693b      	ldr	r3, [r7, #16]
 80260e0:	1ad3      	subs	r3, r2, r3
 80260e2:	2b64      	cmp	r3, #100	; 0x64
 80260e4:	d901      	bls.n	80260ea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80260e6:	2303      	movs	r3, #3
 80260e8:	e21f      	b.n	802652a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80260ea:	4b61      	ldr	r3, [pc, #388]	; (8026270 <HAL_RCC_OscConfig+0x280>)
 80260ec:	681b      	ldr	r3, [r3, #0]
 80260ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80260f2:	2b00      	cmp	r3, #0
 80260f4:	d0f0      	beq.n	80260d8 <HAL_RCC_OscConfig+0xe8>
 80260f6:	e014      	b.n	8026122 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80260f8:	f7fb ff02 	bl	8021f00 <HAL_GetTick>
 80260fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80260fe:	e008      	b.n	8026112 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8026100:	f7fb fefe 	bl	8021f00 <HAL_GetTick>
 8026104:	4602      	mov	r2, r0
 8026106:	693b      	ldr	r3, [r7, #16]
 8026108:	1ad3      	subs	r3, r2, r3
 802610a:	2b64      	cmp	r3, #100	; 0x64
 802610c:	d901      	bls.n	8026112 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 802610e:	2303      	movs	r3, #3
 8026110:	e20b      	b.n	802652a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8026112:	4b57      	ldr	r3, [pc, #348]	; (8026270 <HAL_RCC_OscConfig+0x280>)
 8026114:	681b      	ldr	r3, [r3, #0]
 8026116:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 802611a:	2b00      	cmp	r3, #0
 802611c:	d1f0      	bne.n	8026100 <HAL_RCC_OscConfig+0x110>
 802611e:	e000      	b.n	8026122 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8026120:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8026122:	687b      	ldr	r3, [r7, #4]
 8026124:	681b      	ldr	r3, [r3, #0]
 8026126:	f003 0302 	and.w	r3, r3, #2
 802612a:	2b00      	cmp	r3, #0
 802612c:	d069      	beq.n	8026202 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 802612e:	4b50      	ldr	r3, [pc, #320]	; (8026270 <HAL_RCC_OscConfig+0x280>)
 8026130:	689b      	ldr	r3, [r3, #8]
 8026132:	f003 030c 	and.w	r3, r3, #12
 8026136:	2b00      	cmp	r3, #0
 8026138:	d00b      	beq.n	8026152 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 802613a:	4b4d      	ldr	r3, [pc, #308]	; (8026270 <HAL_RCC_OscConfig+0x280>)
 802613c:	689b      	ldr	r3, [r3, #8]
 802613e:	f003 030c 	and.w	r3, r3, #12
 8026142:	2b08      	cmp	r3, #8
 8026144:	d11c      	bne.n	8026180 <HAL_RCC_OscConfig+0x190>
 8026146:	4b4a      	ldr	r3, [pc, #296]	; (8026270 <HAL_RCC_OscConfig+0x280>)
 8026148:	685b      	ldr	r3, [r3, #4]
 802614a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 802614e:	2b00      	cmp	r3, #0
 8026150:	d116      	bne.n	8026180 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8026152:	4b47      	ldr	r3, [pc, #284]	; (8026270 <HAL_RCC_OscConfig+0x280>)
 8026154:	681b      	ldr	r3, [r3, #0]
 8026156:	f003 0302 	and.w	r3, r3, #2
 802615a:	2b00      	cmp	r3, #0
 802615c:	d005      	beq.n	802616a <HAL_RCC_OscConfig+0x17a>
 802615e:	687b      	ldr	r3, [r7, #4]
 8026160:	68db      	ldr	r3, [r3, #12]
 8026162:	2b01      	cmp	r3, #1
 8026164:	d001      	beq.n	802616a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8026166:	2301      	movs	r3, #1
 8026168:	e1df      	b.n	802652a <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 802616a:	4b41      	ldr	r3, [pc, #260]	; (8026270 <HAL_RCC_OscConfig+0x280>)
 802616c:	681b      	ldr	r3, [r3, #0]
 802616e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8026172:	687b      	ldr	r3, [r7, #4]
 8026174:	691b      	ldr	r3, [r3, #16]
 8026176:	00db      	lsls	r3, r3, #3
 8026178:	493d      	ldr	r1, [pc, #244]	; (8026270 <HAL_RCC_OscConfig+0x280>)
 802617a:	4313      	orrs	r3, r2
 802617c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 802617e:	e040      	b.n	8026202 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8026180:	687b      	ldr	r3, [r7, #4]
 8026182:	68db      	ldr	r3, [r3, #12]
 8026184:	2b00      	cmp	r3, #0
 8026186:	d023      	beq.n	80261d0 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8026188:	4b39      	ldr	r3, [pc, #228]	; (8026270 <HAL_RCC_OscConfig+0x280>)
 802618a:	681b      	ldr	r3, [r3, #0]
 802618c:	4a38      	ldr	r2, [pc, #224]	; (8026270 <HAL_RCC_OscConfig+0x280>)
 802618e:	f043 0301 	orr.w	r3, r3, #1
 8026192:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8026194:	f7fb feb4 	bl	8021f00 <HAL_GetTick>
 8026198:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 802619a:	e008      	b.n	80261ae <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 802619c:	f7fb feb0 	bl	8021f00 <HAL_GetTick>
 80261a0:	4602      	mov	r2, r0
 80261a2:	693b      	ldr	r3, [r7, #16]
 80261a4:	1ad3      	subs	r3, r2, r3
 80261a6:	2b02      	cmp	r3, #2
 80261a8:	d901      	bls.n	80261ae <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80261aa:	2303      	movs	r3, #3
 80261ac:	e1bd      	b.n	802652a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80261ae:	4b30      	ldr	r3, [pc, #192]	; (8026270 <HAL_RCC_OscConfig+0x280>)
 80261b0:	681b      	ldr	r3, [r3, #0]
 80261b2:	f003 0302 	and.w	r3, r3, #2
 80261b6:	2b00      	cmp	r3, #0
 80261b8:	d0f0      	beq.n	802619c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80261ba:	4b2d      	ldr	r3, [pc, #180]	; (8026270 <HAL_RCC_OscConfig+0x280>)
 80261bc:	681b      	ldr	r3, [r3, #0]
 80261be:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80261c2:	687b      	ldr	r3, [r7, #4]
 80261c4:	691b      	ldr	r3, [r3, #16]
 80261c6:	00db      	lsls	r3, r3, #3
 80261c8:	4929      	ldr	r1, [pc, #164]	; (8026270 <HAL_RCC_OscConfig+0x280>)
 80261ca:	4313      	orrs	r3, r2
 80261cc:	600b      	str	r3, [r1, #0]
 80261ce:	e018      	b.n	8026202 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80261d0:	4b27      	ldr	r3, [pc, #156]	; (8026270 <HAL_RCC_OscConfig+0x280>)
 80261d2:	681b      	ldr	r3, [r3, #0]
 80261d4:	4a26      	ldr	r2, [pc, #152]	; (8026270 <HAL_RCC_OscConfig+0x280>)
 80261d6:	f023 0301 	bic.w	r3, r3, #1
 80261da:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80261dc:	f7fb fe90 	bl	8021f00 <HAL_GetTick>
 80261e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80261e2:	e008      	b.n	80261f6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80261e4:	f7fb fe8c 	bl	8021f00 <HAL_GetTick>
 80261e8:	4602      	mov	r2, r0
 80261ea:	693b      	ldr	r3, [r7, #16]
 80261ec:	1ad3      	subs	r3, r2, r3
 80261ee:	2b02      	cmp	r3, #2
 80261f0:	d901      	bls.n	80261f6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80261f2:	2303      	movs	r3, #3
 80261f4:	e199      	b.n	802652a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80261f6:	4b1e      	ldr	r3, [pc, #120]	; (8026270 <HAL_RCC_OscConfig+0x280>)
 80261f8:	681b      	ldr	r3, [r3, #0]
 80261fa:	f003 0302 	and.w	r3, r3, #2
 80261fe:	2b00      	cmp	r3, #0
 8026200:	d1f0      	bne.n	80261e4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8026202:	687b      	ldr	r3, [r7, #4]
 8026204:	681b      	ldr	r3, [r3, #0]
 8026206:	f003 0308 	and.w	r3, r3, #8
 802620a:	2b00      	cmp	r3, #0
 802620c:	d038      	beq.n	8026280 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 802620e:	687b      	ldr	r3, [r7, #4]
 8026210:	695b      	ldr	r3, [r3, #20]
 8026212:	2b00      	cmp	r3, #0
 8026214:	d019      	beq.n	802624a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8026216:	4b16      	ldr	r3, [pc, #88]	; (8026270 <HAL_RCC_OscConfig+0x280>)
 8026218:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 802621a:	4a15      	ldr	r2, [pc, #84]	; (8026270 <HAL_RCC_OscConfig+0x280>)
 802621c:	f043 0301 	orr.w	r3, r3, #1
 8026220:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8026222:	f7fb fe6d 	bl	8021f00 <HAL_GetTick>
 8026226:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8026228:	e008      	b.n	802623c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 802622a:	f7fb fe69 	bl	8021f00 <HAL_GetTick>
 802622e:	4602      	mov	r2, r0
 8026230:	693b      	ldr	r3, [r7, #16]
 8026232:	1ad3      	subs	r3, r2, r3
 8026234:	2b02      	cmp	r3, #2
 8026236:	d901      	bls.n	802623c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8026238:	2303      	movs	r3, #3
 802623a:	e176      	b.n	802652a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 802623c:	4b0c      	ldr	r3, [pc, #48]	; (8026270 <HAL_RCC_OscConfig+0x280>)
 802623e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8026240:	f003 0302 	and.w	r3, r3, #2
 8026244:	2b00      	cmp	r3, #0
 8026246:	d0f0      	beq.n	802622a <HAL_RCC_OscConfig+0x23a>
 8026248:	e01a      	b.n	8026280 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 802624a:	4b09      	ldr	r3, [pc, #36]	; (8026270 <HAL_RCC_OscConfig+0x280>)
 802624c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 802624e:	4a08      	ldr	r2, [pc, #32]	; (8026270 <HAL_RCC_OscConfig+0x280>)
 8026250:	f023 0301 	bic.w	r3, r3, #1
 8026254:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8026256:	f7fb fe53 	bl	8021f00 <HAL_GetTick>
 802625a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 802625c:	e00a      	b.n	8026274 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 802625e:	f7fb fe4f 	bl	8021f00 <HAL_GetTick>
 8026262:	4602      	mov	r2, r0
 8026264:	693b      	ldr	r3, [r7, #16]
 8026266:	1ad3      	subs	r3, r2, r3
 8026268:	2b02      	cmp	r3, #2
 802626a:	d903      	bls.n	8026274 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 802626c:	2303      	movs	r3, #3
 802626e:	e15c      	b.n	802652a <HAL_RCC_OscConfig+0x53a>
 8026270:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8026274:	4b91      	ldr	r3, [pc, #580]	; (80264bc <HAL_RCC_OscConfig+0x4cc>)
 8026276:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8026278:	f003 0302 	and.w	r3, r3, #2
 802627c:	2b00      	cmp	r3, #0
 802627e:	d1ee      	bne.n	802625e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8026280:	687b      	ldr	r3, [r7, #4]
 8026282:	681b      	ldr	r3, [r3, #0]
 8026284:	f003 0304 	and.w	r3, r3, #4
 8026288:	2b00      	cmp	r3, #0
 802628a:	f000 80a4 	beq.w	80263d6 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 802628e:	4b8b      	ldr	r3, [pc, #556]	; (80264bc <HAL_RCC_OscConfig+0x4cc>)
 8026290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8026292:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8026296:	2b00      	cmp	r3, #0
 8026298:	d10d      	bne.n	80262b6 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 802629a:	4b88      	ldr	r3, [pc, #544]	; (80264bc <HAL_RCC_OscConfig+0x4cc>)
 802629c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802629e:	4a87      	ldr	r2, [pc, #540]	; (80264bc <HAL_RCC_OscConfig+0x4cc>)
 80262a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80262a4:	6413      	str	r3, [r2, #64]	; 0x40
 80262a6:	4b85      	ldr	r3, [pc, #532]	; (80264bc <HAL_RCC_OscConfig+0x4cc>)
 80262a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80262aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80262ae:	60bb      	str	r3, [r7, #8]
 80262b0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80262b2:	2301      	movs	r3, #1
 80262b4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80262b6:	4b82      	ldr	r3, [pc, #520]	; (80264c0 <HAL_RCC_OscConfig+0x4d0>)
 80262b8:	681b      	ldr	r3, [r3, #0]
 80262ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80262be:	2b00      	cmp	r3, #0
 80262c0:	d118      	bne.n	80262f4 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80262c2:	4b7f      	ldr	r3, [pc, #508]	; (80264c0 <HAL_RCC_OscConfig+0x4d0>)
 80262c4:	681b      	ldr	r3, [r3, #0]
 80262c6:	4a7e      	ldr	r2, [pc, #504]	; (80264c0 <HAL_RCC_OscConfig+0x4d0>)
 80262c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80262cc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80262ce:	f7fb fe17 	bl	8021f00 <HAL_GetTick>
 80262d2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80262d4:	e008      	b.n	80262e8 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80262d6:	f7fb fe13 	bl	8021f00 <HAL_GetTick>
 80262da:	4602      	mov	r2, r0
 80262dc:	693b      	ldr	r3, [r7, #16]
 80262de:	1ad3      	subs	r3, r2, r3
 80262e0:	2b64      	cmp	r3, #100	; 0x64
 80262e2:	d901      	bls.n	80262e8 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80262e4:	2303      	movs	r3, #3
 80262e6:	e120      	b.n	802652a <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80262e8:	4b75      	ldr	r3, [pc, #468]	; (80264c0 <HAL_RCC_OscConfig+0x4d0>)
 80262ea:	681b      	ldr	r3, [r3, #0]
 80262ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80262f0:	2b00      	cmp	r3, #0
 80262f2:	d0f0      	beq.n	80262d6 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80262f4:	687b      	ldr	r3, [r7, #4]
 80262f6:	689b      	ldr	r3, [r3, #8]
 80262f8:	2b01      	cmp	r3, #1
 80262fa:	d106      	bne.n	802630a <HAL_RCC_OscConfig+0x31a>
 80262fc:	4b6f      	ldr	r3, [pc, #444]	; (80264bc <HAL_RCC_OscConfig+0x4cc>)
 80262fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8026300:	4a6e      	ldr	r2, [pc, #440]	; (80264bc <HAL_RCC_OscConfig+0x4cc>)
 8026302:	f043 0301 	orr.w	r3, r3, #1
 8026306:	6713      	str	r3, [r2, #112]	; 0x70
 8026308:	e02d      	b.n	8026366 <HAL_RCC_OscConfig+0x376>
 802630a:	687b      	ldr	r3, [r7, #4]
 802630c:	689b      	ldr	r3, [r3, #8]
 802630e:	2b00      	cmp	r3, #0
 8026310:	d10c      	bne.n	802632c <HAL_RCC_OscConfig+0x33c>
 8026312:	4b6a      	ldr	r3, [pc, #424]	; (80264bc <HAL_RCC_OscConfig+0x4cc>)
 8026314:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8026316:	4a69      	ldr	r2, [pc, #420]	; (80264bc <HAL_RCC_OscConfig+0x4cc>)
 8026318:	f023 0301 	bic.w	r3, r3, #1
 802631c:	6713      	str	r3, [r2, #112]	; 0x70
 802631e:	4b67      	ldr	r3, [pc, #412]	; (80264bc <HAL_RCC_OscConfig+0x4cc>)
 8026320:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8026322:	4a66      	ldr	r2, [pc, #408]	; (80264bc <HAL_RCC_OscConfig+0x4cc>)
 8026324:	f023 0304 	bic.w	r3, r3, #4
 8026328:	6713      	str	r3, [r2, #112]	; 0x70
 802632a:	e01c      	b.n	8026366 <HAL_RCC_OscConfig+0x376>
 802632c:	687b      	ldr	r3, [r7, #4]
 802632e:	689b      	ldr	r3, [r3, #8]
 8026330:	2b05      	cmp	r3, #5
 8026332:	d10c      	bne.n	802634e <HAL_RCC_OscConfig+0x35e>
 8026334:	4b61      	ldr	r3, [pc, #388]	; (80264bc <HAL_RCC_OscConfig+0x4cc>)
 8026336:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8026338:	4a60      	ldr	r2, [pc, #384]	; (80264bc <HAL_RCC_OscConfig+0x4cc>)
 802633a:	f043 0304 	orr.w	r3, r3, #4
 802633e:	6713      	str	r3, [r2, #112]	; 0x70
 8026340:	4b5e      	ldr	r3, [pc, #376]	; (80264bc <HAL_RCC_OscConfig+0x4cc>)
 8026342:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8026344:	4a5d      	ldr	r2, [pc, #372]	; (80264bc <HAL_RCC_OscConfig+0x4cc>)
 8026346:	f043 0301 	orr.w	r3, r3, #1
 802634a:	6713      	str	r3, [r2, #112]	; 0x70
 802634c:	e00b      	b.n	8026366 <HAL_RCC_OscConfig+0x376>
 802634e:	4b5b      	ldr	r3, [pc, #364]	; (80264bc <HAL_RCC_OscConfig+0x4cc>)
 8026350:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8026352:	4a5a      	ldr	r2, [pc, #360]	; (80264bc <HAL_RCC_OscConfig+0x4cc>)
 8026354:	f023 0301 	bic.w	r3, r3, #1
 8026358:	6713      	str	r3, [r2, #112]	; 0x70
 802635a:	4b58      	ldr	r3, [pc, #352]	; (80264bc <HAL_RCC_OscConfig+0x4cc>)
 802635c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 802635e:	4a57      	ldr	r2, [pc, #348]	; (80264bc <HAL_RCC_OscConfig+0x4cc>)
 8026360:	f023 0304 	bic.w	r3, r3, #4
 8026364:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8026366:	687b      	ldr	r3, [r7, #4]
 8026368:	689b      	ldr	r3, [r3, #8]
 802636a:	2b00      	cmp	r3, #0
 802636c:	d015      	beq.n	802639a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 802636e:	f7fb fdc7 	bl	8021f00 <HAL_GetTick>
 8026372:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8026374:	e00a      	b.n	802638c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8026376:	f7fb fdc3 	bl	8021f00 <HAL_GetTick>
 802637a:	4602      	mov	r2, r0
 802637c:	693b      	ldr	r3, [r7, #16]
 802637e:	1ad3      	subs	r3, r2, r3
 8026380:	f241 3288 	movw	r2, #5000	; 0x1388
 8026384:	4293      	cmp	r3, r2
 8026386:	d901      	bls.n	802638c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8026388:	2303      	movs	r3, #3
 802638a:	e0ce      	b.n	802652a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 802638c:	4b4b      	ldr	r3, [pc, #300]	; (80264bc <HAL_RCC_OscConfig+0x4cc>)
 802638e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8026390:	f003 0302 	and.w	r3, r3, #2
 8026394:	2b00      	cmp	r3, #0
 8026396:	d0ee      	beq.n	8026376 <HAL_RCC_OscConfig+0x386>
 8026398:	e014      	b.n	80263c4 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 802639a:	f7fb fdb1 	bl	8021f00 <HAL_GetTick>
 802639e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80263a0:	e00a      	b.n	80263b8 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80263a2:	f7fb fdad 	bl	8021f00 <HAL_GetTick>
 80263a6:	4602      	mov	r2, r0
 80263a8:	693b      	ldr	r3, [r7, #16]
 80263aa:	1ad3      	subs	r3, r2, r3
 80263ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80263b0:	4293      	cmp	r3, r2
 80263b2:	d901      	bls.n	80263b8 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80263b4:	2303      	movs	r3, #3
 80263b6:	e0b8      	b.n	802652a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80263b8:	4b40      	ldr	r3, [pc, #256]	; (80264bc <HAL_RCC_OscConfig+0x4cc>)
 80263ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80263bc:	f003 0302 	and.w	r3, r3, #2
 80263c0:	2b00      	cmp	r3, #0
 80263c2:	d1ee      	bne.n	80263a2 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80263c4:	7dfb      	ldrb	r3, [r7, #23]
 80263c6:	2b01      	cmp	r3, #1
 80263c8:	d105      	bne.n	80263d6 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80263ca:	4b3c      	ldr	r3, [pc, #240]	; (80264bc <HAL_RCC_OscConfig+0x4cc>)
 80263cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80263ce:	4a3b      	ldr	r2, [pc, #236]	; (80264bc <HAL_RCC_OscConfig+0x4cc>)
 80263d0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80263d4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80263d6:	687b      	ldr	r3, [r7, #4]
 80263d8:	699b      	ldr	r3, [r3, #24]
 80263da:	2b00      	cmp	r3, #0
 80263dc:	f000 80a4 	beq.w	8026528 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80263e0:	4b36      	ldr	r3, [pc, #216]	; (80264bc <HAL_RCC_OscConfig+0x4cc>)
 80263e2:	689b      	ldr	r3, [r3, #8]
 80263e4:	f003 030c 	and.w	r3, r3, #12
 80263e8:	2b08      	cmp	r3, #8
 80263ea:	d06b      	beq.n	80264c4 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80263ec:	687b      	ldr	r3, [r7, #4]
 80263ee:	699b      	ldr	r3, [r3, #24]
 80263f0:	2b02      	cmp	r3, #2
 80263f2:	d149      	bne.n	8026488 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80263f4:	4b31      	ldr	r3, [pc, #196]	; (80264bc <HAL_RCC_OscConfig+0x4cc>)
 80263f6:	681b      	ldr	r3, [r3, #0]
 80263f8:	4a30      	ldr	r2, [pc, #192]	; (80264bc <HAL_RCC_OscConfig+0x4cc>)
 80263fa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80263fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8026400:	f7fb fd7e 	bl	8021f00 <HAL_GetTick>
 8026404:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8026406:	e008      	b.n	802641a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8026408:	f7fb fd7a 	bl	8021f00 <HAL_GetTick>
 802640c:	4602      	mov	r2, r0
 802640e:	693b      	ldr	r3, [r7, #16]
 8026410:	1ad3      	subs	r3, r2, r3
 8026412:	2b02      	cmp	r3, #2
 8026414:	d901      	bls.n	802641a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8026416:	2303      	movs	r3, #3
 8026418:	e087      	b.n	802652a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 802641a:	4b28      	ldr	r3, [pc, #160]	; (80264bc <HAL_RCC_OscConfig+0x4cc>)
 802641c:	681b      	ldr	r3, [r3, #0]
 802641e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8026422:	2b00      	cmp	r3, #0
 8026424:	d1f0      	bne.n	8026408 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8026426:	687b      	ldr	r3, [r7, #4]
 8026428:	69da      	ldr	r2, [r3, #28]
 802642a:	687b      	ldr	r3, [r7, #4]
 802642c:	6a1b      	ldr	r3, [r3, #32]
 802642e:	431a      	orrs	r2, r3
 8026430:	687b      	ldr	r3, [r7, #4]
 8026432:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8026434:	019b      	lsls	r3, r3, #6
 8026436:	431a      	orrs	r2, r3
 8026438:	687b      	ldr	r3, [r7, #4]
 802643a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802643c:	085b      	lsrs	r3, r3, #1
 802643e:	3b01      	subs	r3, #1
 8026440:	041b      	lsls	r3, r3, #16
 8026442:	431a      	orrs	r2, r3
 8026444:	687b      	ldr	r3, [r7, #4]
 8026446:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8026448:	061b      	lsls	r3, r3, #24
 802644a:	4313      	orrs	r3, r2
 802644c:	4a1b      	ldr	r2, [pc, #108]	; (80264bc <HAL_RCC_OscConfig+0x4cc>)
 802644e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8026452:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8026454:	4b19      	ldr	r3, [pc, #100]	; (80264bc <HAL_RCC_OscConfig+0x4cc>)
 8026456:	681b      	ldr	r3, [r3, #0]
 8026458:	4a18      	ldr	r2, [pc, #96]	; (80264bc <HAL_RCC_OscConfig+0x4cc>)
 802645a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 802645e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8026460:	f7fb fd4e 	bl	8021f00 <HAL_GetTick>
 8026464:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8026466:	e008      	b.n	802647a <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8026468:	f7fb fd4a 	bl	8021f00 <HAL_GetTick>
 802646c:	4602      	mov	r2, r0
 802646e:	693b      	ldr	r3, [r7, #16]
 8026470:	1ad3      	subs	r3, r2, r3
 8026472:	2b02      	cmp	r3, #2
 8026474:	d901      	bls.n	802647a <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8026476:	2303      	movs	r3, #3
 8026478:	e057      	b.n	802652a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 802647a:	4b10      	ldr	r3, [pc, #64]	; (80264bc <HAL_RCC_OscConfig+0x4cc>)
 802647c:	681b      	ldr	r3, [r3, #0]
 802647e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8026482:	2b00      	cmp	r3, #0
 8026484:	d0f0      	beq.n	8026468 <HAL_RCC_OscConfig+0x478>
 8026486:	e04f      	b.n	8026528 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8026488:	4b0c      	ldr	r3, [pc, #48]	; (80264bc <HAL_RCC_OscConfig+0x4cc>)
 802648a:	681b      	ldr	r3, [r3, #0]
 802648c:	4a0b      	ldr	r2, [pc, #44]	; (80264bc <HAL_RCC_OscConfig+0x4cc>)
 802648e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8026492:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8026494:	f7fb fd34 	bl	8021f00 <HAL_GetTick>
 8026498:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 802649a:	e008      	b.n	80264ae <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 802649c:	f7fb fd30 	bl	8021f00 <HAL_GetTick>
 80264a0:	4602      	mov	r2, r0
 80264a2:	693b      	ldr	r3, [r7, #16]
 80264a4:	1ad3      	subs	r3, r2, r3
 80264a6:	2b02      	cmp	r3, #2
 80264a8:	d901      	bls.n	80264ae <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 80264aa:	2303      	movs	r3, #3
 80264ac:	e03d      	b.n	802652a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80264ae:	4b03      	ldr	r3, [pc, #12]	; (80264bc <HAL_RCC_OscConfig+0x4cc>)
 80264b0:	681b      	ldr	r3, [r3, #0]
 80264b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80264b6:	2b00      	cmp	r3, #0
 80264b8:	d1f0      	bne.n	802649c <HAL_RCC_OscConfig+0x4ac>
 80264ba:	e035      	b.n	8026528 <HAL_RCC_OscConfig+0x538>
 80264bc:	40023800 	.word	0x40023800
 80264c0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80264c4:	4b1b      	ldr	r3, [pc, #108]	; (8026534 <HAL_RCC_OscConfig+0x544>)
 80264c6:	685b      	ldr	r3, [r3, #4]
 80264c8:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80264ca:	687b      	ldr	r3, [r7, #4]
 80264cc:	699b      	ldr	r3, [r3, #24]
 80264ce:	2b01      	cmp	r3, #1
 80264d0:	d028      	beq.n	8026524 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80264d2:	68fb      	ldr	r3, [r7, #12]
 80264d4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80264d8:	687b      	ldr	r3, [r7, #4]
 80264da:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80264dc:	429a      	cmp	r2, r3
 80264de:	d121      	bne.n	8026524 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80264e0:	68fb      	ldr	r3, [r7, #12]
 80264e2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80264e6:	687b      	ldr	r3, [r7, #4]
 80264e8:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80264ea:	429a      	cmp	r2, r3
 80264ec:	d11a      	bne.n	8026524 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80264ee:	68fa      	ldr	r2, [r7, #12]
 80264f0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80264f4:	4013      	ands	r3, r2
 80264f6:	687a      	ldr	r2, [r7, #4]
 80264f8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80264fa:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80264fc:	4293      	cmp	r3, r2
 80264fe:	d111      	bne.n	8026524 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8026500:	68fb      	ldr	r3, [r7, #12]
 8026502:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8026506:	687b      	ldr	r3, [r7, #4]
 8026508:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802650a:	085b      	lsrs	r3, r3, #1
 802650c:	3b01      	subs	r3, #1
 802650e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8026510:	429a      	cmp	r2, r3
 8026512:	d107      	bne.n	8026524 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8026514:	68fb      	ldr	r3, [r7, #12]
 8026516:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 802651a:	687b      	ldr	r3, [r7, #4]
 802651c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802651e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8026520:	429a      	cmp	r2, r3
 8026522:	d001      	beq.n	8026528 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8026524:	2301      	movs	r3, #1
 8026526:	e000      	b.n	802652a <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8026528:	2300      	movs	r3, #0
}
 802652a:	4618      	mov	r0, r3
 802652c:	3718      	adds	r7, #24
 802652e:	46bd      	mov	sp, r7
 8026530:	bd80      	pop	{r7, pc}
 8026532:	bf00      	nop
 8026534:	40023800 	.word	0x40023800

08026538 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8026538:	b580      	push	{r7, lr}
 802653a:	b084      	sub	sp, #16
 802653c:	af00      	add	r7, sp, #0
 802653e:	6078      	str	r0, [r7, #4]
 8026540:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8026542:	2300      	movs	r3, #0
 8026544:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8026546:	687b      	ldr	r3, [r7, #4]
 8026548:	2b00      	cmp	r3, #0
 802654a:	d101      	bne.n	8026550 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 802654c:	2301      	movs	r3, #1
 802654e:	e0d0      	b.n	80266f2 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8026550:	4b6a      	ldr	r3, [pc, #424]	; (80266fc <HAL_RCC_ClockConfig+0x1c4>)
 8026552:	681b      	ldr	r3, [r3, #0]
 8026554:	f003 030f 	and.w	r3, r3, #15
 8026558:	683a      	ldr	r2, [r7, #0]
 802655a:	429a      	cmp	r2, r3
 802655c:	d910      	bls.n	8026580 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 802655e:	4b67      	ldr	r3, [pc, #412]	; (80266fc <HAL_RCC_ClockConfig+0x1c4>)
 8026560:	681b      	ldr	r3, [r3, #0]
 8026562:	f023 020f 	bic.w	r2, r3, #15
 8026566:	4965      	ldr	r1, [pc, #404]	; (80266fc <HAL_RCC_ClockConfig+0x1c4>)
 8026568:	683b      	ldr	r3, [r7, #0]
 802656a:	4313      	orrs	r3, r2
 802656c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 802656e:	4b63      	ldr	r3, [pc, #396]	; (80266fc <HAL_RCC_ClockConfig+0x1c4>)
 8026570:	681b      	ldr	r3, [r3, #0]
 8026572:	f003 030f 	and.w	r3, r3, #15
 8026576:	683a      	ldr	r2, [r7, #0]
 8026578:	429a      	cmp	r2, r3
 802657a:	d001      	beq.n	8026580 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 802657c:	2301      	movs	r3, #1
 802657e:	e0b8      	b.n	80266f2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8026580:	687b      	ldr	r3, [r7, #4]
 8026582:	681b      	ldr	r3, [r3, #0]
 8026584:	f003 0302 	and.w	r3, r3, #2
 8026588:	2b00      	cmp	r3, #0
 802658a:	d020      	beq.n	80265ce <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 802658c:	687b      	ldr	r3, [r7, #4]
 802658e:	681b      	ldr	r3, [r3, #0]
 8026590:	f003 0304 	and.w	r3, r3, #4
 8026594:	2b00      	cmp	r3, #0
 8026596:	d005      	beq.n	80265a4 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8026598:	4b59      	ldr	r3, [pc, #356]	; (8026700 <HAL_RCC_ClockConfig+0x1c8>)
 802659a:	689b      	ldr	r3, [r3, #8]
 802659c:	4a58      	ldr	r2, [pc, #352]	; (8026700 <HAL_RCC_ClockConfig+0x1c8>)
 802659e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80265a2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80265a4:	687b      	ldr	r3, [r7, #4]
 80265a6:	681b      	ldr	r3, [r3, #0]
 80265a8:	f003 0308 	and.w	r3, r3, #8
 80265ac:	2b00      	cmp	r3, #0
 80265ae:	d005      	beq.n	80265bc <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80265b0:	4b53      	ldr	r3, [pc, #332]	; (8026700 <HAL_RCC_ClockConfig+0x1c8>)
 80265b2:	689b      	ldr	r3, [r3, #8]
 80265b4:	4a52      	ldr	r2, [pc, #328]	; (8026700 <HAL_RCC_ClockConfig+0x1c8>)
 80265b6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80265ba:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80265bc:	4b50      	ldr	r3, [pc, #320]	; (8026700 <HAL_RCC_ClockConfig+0x1c8>)
 80265be:	689b      	ldr	r3, [r3, #8]
 80265c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80265c4:	687b      	ldr	r3, [r7, #4]
 80265c6:	689b      	ldr	r3, [r3, #8]
 80265c8:	494d      	ldr	r1, [pc, #308]	; (8026700 <HAL_RCC_ClockConfig+0x1c8>)
 80265ca:	4313      	orrs	r3, r2
 80265cc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80265ce:	687b      	ldr	r3, [r7, #4]
 80265d0:	681b      	ldr	r3, [r3, #0]
 80265d2:	f003 0301 	and.w	r3, r3, #1
 80265d6:	2b00      	cmp	r3, #0
 80265d8:	d040      	beq.n	802665c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80265da:	687b      	ldr	r3, [r7, #4]
 80265dc:	685b      	ldr	r3, [r3, #4]
 80265de:	2b01      	cmp	r3, #1
 80265e0:	d107      	bne.n	80265f2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80265e2:	4b47      	ldr	r3, [pc, #284]	; (8026700 <HAL_RCC_ClockConfig+0x1c8>)
 80265e4:	681b      	ldr	r3, [r3, #0]
 80265e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80265ea:	2b00      	cmp	r3, #0
 80265ec:	d115      	bne.n	802661a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80265ee:	2301      	movs	r3, #1
 80265f0:	e07f      	b.n	80266f2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80265f2:	687b      	ldr	r3, [r7, #4]
 80265f4:	685b      	ldr	r3, [r3, #4]
 80265f6:	2b02      	cmp	r3, #2
 80265f8:	d107      	bne.n	802660a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80265fa:	4b41      	ldr	r3, [pc, #260]	; (8026700 <HAL_RCC_ClockConfig+0x1c8>)
 80265fc:	681b      	ldr	r3, [r3, #0]
 80265fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8026602:	2b00      	cmp	r3, #0
 8026604:	d109      	bne.n	802661a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8026606:	2301      	movs	r3, #1
 8026608:	e073      	b.n	80266f2 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 802660a:	4b3d      	ldr	r3, [pc, #244]	; (8026700 <HAL_RCC_ClockConfig+0x1c8>)
 802660c:	681b      	ldr	r3, [r3, #0]
 802660e:	f003 0302 	and.w	r3, r3, #2
 8026612:	2b00      	cmp	r3, #0
 8026614:	d101      	bne.n	802661a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8026616:	2301      	movs	r3, #1
 8026618:	e06b      	b.n	80266f2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 802661a:	4b39      	ldr	r3, [pc, #228]	; (8026700 <HAL_RCC_ClockConfig+0x1c8>)
 802661c:	689b      	ldr	r3, [r3, #8]
 802661e:	f023 0203 	bic.w	r2, r3, #3
 8026622:	687b      	ldr	r3, [r7, #4]
 8026624:	685b      	ldr	r3, [r3, #4]
 8026626:	4936      	ldr	r1, [pc, #216]	; (8026700 <HAL_RCC_ClockConfig+0x1c8>)
 8026628:	4313      	orrs	r3, r2
 802662a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 802662c:	f7fb fc68 	bl	8021f00 <HAL_GetTick>
 8026630:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8026632:	e00a      	b.n	802664a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8026634:	f7fb fc64 	bl	8021f00 <HAL_GetTick>
 8026638:	4602      	mov	r2, r0
 802663a:	68fb      	ldr	r3, [r7, #12]
 802663c:	1ad3      	subs	r3, r2, r3
 802663e:	f241 3288 	movw	r2, #5000	; 0x1388
 8026642:	4293      	cmp	r3, r2
 8026644:	d901      	bls.n	802664a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8026646:	2303      	movs	r3, #3
 8026648:	e053      	b.n	80266f2 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 802664a:	4b2d      	ldr	r3, [pc, #180]	; (8026700 <HAL_RCC_ClockConfig+0x1c8>)
 802664c:	689b      	ldr	r3, [r3, #8]
 802664e:	f003 020c 	and.w	r2, r3, #12
 8026652:	687b      	ldr	r3, [r7, #4]
 8026654:	685b      	ldr	r3, [r3, #4]
 8026656:	009b      	lsls	r3, r3, #2
 8026658:	429a      	cmp	r2, r3
 802665a:	d1eb      	bne.n	8026634 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 802665c:	4b27      	ldr	r3, [pc, #156]	; (80266fc <HAL_RCC_ClockConfig+0x1c4>)
 802665e:	681b      	ldr	r3, [r3, #0]
 8026660:	f003 030f 	and.w	r3, r3, #15
 8026664:	683a      	ldr	r2, [r7, #0]
 8026666:	429a      	cmp	r2, r3
 8026668:	d210      	bcs.n	802668c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 802666a:	4b24      	ldr	r3, [pc, #144]	; (80266fc <HAL_RCC_ClockConfig+0x1c4>)
 802666c:	681b      	ldr	r3, [r3, #0]
 802666e:	f023 020f 	bic.w	r2, r3, #15
 8026672:	4922      	ldr	r1, [pc, #136]	; (80266fc <HAL_RCC_ClockConfig+0x1c4>)
 8026674:	683b      	ldr	r3, [r7, #0]
 8026676:	4313      	orrs	r3, r2
 8026678:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 802667a:	4b20      	ldr	r3, [pc, #128]	; (80266fc <HAL_RCC_ClockConfig+0x1c4>)
 802667c:	681b      	ldr	r3, [r3, #0]
 802667e:	f003 030f 	and.w	r3, r3, #15
 8026682:	683a      	ldr	r2, [r7, #0]
 8026684:	429a      	cmp	r2, r3
 8026686:	d001      	beq.n	802668c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8026688:	2301      	movs	r3, #1
 802668a:	e032      	b.n	80266f2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 802668c:	687b      	ldr	r3, [r7, #4]
 802668e:	681b      	ldr	r3, [r3, #0]
 8026690:	f003 0304 	and.w	r3, r3, #4
 8026694:	2b00      	cmp	r3, #0
 8026696:	d008      	beq.n	80266aa <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8026698:	4b19      	ldr	r3, [pc, #100]	; (8026700 <HAL_RCC_ClockConfig+0x1c8>)
 802669a:	689b      	ldr	r3, [r3, #8]
 802669c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80266a0:	687b      	ldr	r3, [r7, #4]
 80266a2:	68db      	ldr	r3, [r3, #12]
 80266a4:	4916      	ldr	r1, [pc, #88]	; (8026700 <HAL_RCC_ClockConfig+0x1c8>)
 80266a6:	4313      	orrs	r3, r2
 80266a8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80266aa:	687b      	ldr	r3, [r7, #4]
 80266ac:	681b      	ldr	r3, [r3, #0]
 80266ae:	f003 0308 	and.w	r3, r3, #8
 80266b2:	2b00      	cmp	r3, #0
 80266b4:	d009      	beq.n	80266ca <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80266b6:	4b12      	ldr	r3, [pc, #72]	; (8026700 <HAL_RCC_ClockConfig+0x1c8>)
 80266b8:	689b      	ldr	r3, [r3, #8]
 80266ba:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80266be:	687b      	ldr	r3, [r7, #4]
 80266c0:	691b      	ldr	r3, [r3, #16]
 80266c2:	00db      	lsls	r3, r3, #3
 80266c4:	490e      	ldr	r1, [pc, #56]	; (8026700 <HAL_RCC_ClockConfig+0x1c8>)
 80266c6:	4313      	orrs	r3, r2
 80266c8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80266ca:	f000 f821 	bl	8026710 <HAL_RCC_GetSysClockFreq>
 80266ce:	4602      	mov	r2, r0
 80266d0:	4b0b      	ldr	r3, [pc, #44]	; (8026700 <HAL_RCC_ClockConfig+0x1c8>)
 80266d2:	689b      	ldr	r3, [r3, #8]
 80266d4:	091b      	lsrs	r3, r3, #4
 80266d6:	f003 030f 	and.w	r3, r3, #15
 80266da:	490a      	ldr	r1, [pc, #40]	; (8026704 <HAL_RCC_ClockConfig+0x1cc>)
 80266dc:	5ccb      	ldrb	r3, [r1, r3]
 80266de:	fa22 f303 	lsr.w	r3, r2, r3
 80266e2:	4a09      	ldr	r2, [pc, #36]	; (8026708 <HAL_RCC_ClockConfig+0x1d0>)
 80266e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80266e6:	4b09      	ldr	r3, [pc, #36]	; (802670c <HAL_RCC_ClockConfig+0x1d4>)
 80266e8:	681b      	ldr	r3, [r3, #0]
 80266ea:	4618      	mov	r0, r3
 80266ec:	f7fb fbc4 	bl	8021e78 <HAL_InitTick>

  return HAL_OK;
 80266f0:	2300      	movs	r3, #0
}
 80266f2:	4618      	mov	r0, r3
 80266f4:	3710      	adds	r7, #16
 80266f6:	46bd      	mov	sp, r7
 80266f8:	bd80      	pop	{r7, pc}
 80266fa:	bf00      	nop
 80266fc:	40023c00 	.word	0x40023c00
 8026700:	40023800 	.word	0x40023800
 8026704:	080379d8 	.word	0x080379d8
 8026708:	20000000 	.word	0x20000000
 802670c:	20000004 	.word	0x20000004

08026710 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8026710:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8026714:	b090      	sub	sp, #64	; 0x40
 8026716:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8026718:	2300      	movs	r3, #0
 802671a:	637b      	str	r3, [r7, #52]	; 0x34
 802671c:	2300      	movs	r3, #0
 802671e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8026720:	2300      	movs	r3, #0
 8026722:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 8026724:	2300      	movs	r3, #0
 8026726:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8026728:	4b59      	ldr	r3, [pc, #356]	; (8026890 <HAL_RCC_GetSysClockFreq+0x180>)
 802672a:	689b      	ldr	r3, [r3, #8]
 802672c:	f003 030c 	and.w	r3, r3, #12
 8026730:	2b08      	cmp	r3, #8
 8026732:	d00d      	beq.n	8026750 <HAL_RCC_GetSysClockFreq+0x40>
 8026734:	2b08      	cmp	r3, #8
 8026736:	f200 80a1 	bhi.w	802687c <HAL_RCC_GetSysClockFreq+0x16c>
 802673a:	2b00      	cmp	r3, #0
 802673c:	d002      	beq.n	8026744 <HAL_RCC_GetSysClockFreq+0x34>
 802673e:	2b04      	cmp	r3, #4
 8026740:	d003      	beq.n	802674a <HAL_RCC_GetSysClockFreq+0x3a>
 8026742:	e09b      	b.n	802687c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8026744:	4b53      	ldr	r3, [pc, #332]	; (8026894 <HAL_RCC_GetSysClockFreq+0x184>)
 8026746:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8026748:	e09b      	b.n	8026882 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 802674a:	4b53      	ldr	r3, [pc, #332]	; (8026898 <HAL_RCC_GetSysClockFreq+0x188>)
 802674c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 802674e:	e098      	b.n	8026882 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8026750:	4b4f      	ldr	r3, [pc, #316]	; (8026890 <HAL_RCC_GetSysClockFreq+0x180>)
 8026752:	685b      	ldr	r3, [r3, #4]
 8026754:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8026758:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 802675a:	4b4d      	ldr	r3, [pc, #308]	; (8026890 <HAL_RCC_GetSysClockFreq+0x180>)
 802675c:	685b      	ldr	r3, [r3, #4]
 802675e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8026762:	2b00      	cmp	r3, #0
 8026764:	d028      	beq.n	80267b8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8026766:	4b4a      	ldr	r3, [pc, #296]	; (8026890 <HAL_RCC_GetSysClockFreq+0x180>)
 8026768:	685b      	ldr	r3, [r3, #4]
 802676a:	099b      	lsrs	r3, r3, #6
 802676c:	2200      	movs	r2, #0
 802676e:	623b      	str	r3, [r7, #32]
 8026770:	627a      	str	r2, [r7, #36]	; 0x24
 8026772:	6a3b      	ldr	r3, [r7, #32]
 8026774:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8026778:	2100      	movs	r1, #0
 802677a:	4b47      	ldr	r3, [pc, #284]	; (8026898 <HAL_RCC_GetSysClockFreq+0x188>)
 802677c:	fb03 f201 	mul.w	r2, r3, r1
 8026780:	2300      	movs	r3, #0
 8026782:	fb00 f303 	mul.w	r3, r0, r3
 8026786:	4413      	add	r3, r2
 8026788:	4a43      	ldr	r2, [pc, #268]	; (8026898 <HAL_RCC_GetSysClockFreq+0x188>)
 802678a:	fba0 1202 	umull	r1, r2, r0, r2
 802678e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8026790:	460a      	mov	r2, r1
 8026792:	62ba      	str	r2, [r7, #40]	; 0x28
 8026794:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8026796:	4413      	add	r3, r2
 8026798:	62fb      	str	r3, [r7, #44]	; 0x2c
 802679a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802679c:	2200      	movs	r2, #0
 802679e:	61bb      	str	r3, [r7, #24]
 80267a0:	61fa      	str	r2, [r7, #28]
 80267a2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80267a6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80267aa:	f7f9 fd89 	bl	80202c0 <__aeabi_uldivmod>
 80267ae:	4602      	mov	r2, r0
 80267b0:	460b      	mov	r3, r1
 80267b2:	4613      	mov	r3, r2
 80267b4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80267b6:	e053      	b.n	8026860 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80267b8:	4b35      	ldr	r3, [pc, #212]	; (8026890 <HAL_RCC_GetSysClockFreq+0x180>)
 80267ba:	685b      	ldr	r3, [r3, #4]
 80267bc:	099b      	lsrs	r3, r3, #6
 80267be:	2200      	movs	r2, #0
 80267c0:	613b      	str	r3, [r7, #16]
 80267c2:	617a      	str	r2, [r7, #20]
 80267c4:	693b      	ldr	r3, [r7, #16]
 80267c6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80267ca:	f04f 0b00 	mov.w	fp, #0
 80267ce:	4652      	mov	r2, sl
 80267d0:	465b      	mov	r3, fp
 80267d2:	f04f 0000 	mov.w	r0, #0
 80267d6:	f04f 0100 	mov.w	r1, #0
 80267da:	0159      	lsls	r1, r3, #5
 80267dc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80267e0:	0150      	lsls	r0, r2, #5
 80267e2:	4602      	mov	r2, r0
 80267e4:	460b      	mov	r3, r1
 80267e6:	ebb2 080a 	subs.w	r8, r2, sl
 80267ea:	eb63 090b 	sbc.w	r9, r3, fp
 80267ee:	f04f 0200 	mov.w	r2, #0
 80267f2:	f04f 0300 	mov.w	r3, #0
 80267f6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80267fa:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80267fe:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8026802:	ebb2 0408 	subs.w	r4, r2, r8
 8026806:	eb63 0509 	sbc.w	r5, r3, r9
 802680a:	f04f 0200 	mov.w	r2, #0
 802680e:	f04f 0300 	mov.w	r3, #0
 8026812:	00eb      	lsls	r3, r5, #3
 8026814:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8026818:	00e2      	lsls	r2, r4, #3
 802681a:	4614      	mov	r4, r2
 802681c:	461d      	mov	r5, r3
 802681e:	eb14 030a 	adds.w	r3, r4, sl
 8026822:	603b      	str	r3, [r7, #0]
 8026824:	eb45 030b 	adc.w	r3, r5, fp
 8026828:	607b      	str	r3, [r7, #4]
 802682a:	f04f 0200 	mov.w	r2, #0
 802682e:	f04f 0300 	mov.w	r3, #0
 8026832:	e9d7 4500 	ldrd	r4, r5, [r7]
 8026836:	4629      	mov	r1, r5
 8026838:	028b      	lsls	r3, r1, #10
 802683a:	4621      	mov	r1, r4
 802683c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8026840:	4621      	mov	r1, r4
 8026842:	028a      	lsls	r2, r1, #10
 8026844:	4610      	mov	r0, r2
 8026846:	4619      	mov	r1, r3
 8026848:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802684a:	2200      	movs	r2, #0
 802684c:	60bb      	str	r3, [r7, #8]
 802684e:	60fa      	str	r2, [r7, #12]
 8026850:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8026854:	f7f9 fd34 	bl	80202c0 <__aeabi_uldivmod>
 8026858:	4602      	mov	r2, r0
 802685a:	460b      	mov	r3, r1
 802685c:	4613      	mov	r3, r2
 802685e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8026860:	4b0b      	ldr	r3, [pc, #44]	; (8026890 <HAL_RCC_GetSysClockFreq+0x180>)
 8026862:	685b      	ldr	r3, [r3, #4]
 8026864:	0c1b      	lsrs	r3, r3, #16
 8026866:	f003 0303 	and.w	r3, r3, #3
 802686a:	3301      	adds	r3, #1
 802686c:	005b      	lsls	r3, r3, #1
 802686e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 8026870:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8026872:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8026874:	fbb2 f3f3 	udiv	r3, r2, r3
 8026878:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 802687a:	e002      	b.n	8026882 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 802687c:	4b05      	ldr	r3, [pc, #20]	; (8026894 <HAL_RCC_GetSysClockFreq+0x184>)
 802687e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8026880:	bf00      	nop
    }
  }
  return sysclockfreq;
 8026882:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8026884:	4618      	mov	r0, r3
 8026886:	3740      	adds	r7, #64	; 0x40
 8026888:	46bd      	mov	sp, r7
 802688a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 802688e:	bf00      	nop
 8026890:	40023800 	.word	0x40023800
 8026894:	00f42400 	.word	0x00f42400
 8026898:	016e3600 	.word	0x016e3600

0802689c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 802689c:	b480      	push	{r7}
 802689e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80268a0:	4b03      	ldr	r3, [pc, #12]	; (80268b0 <HAL_RCC_GetHCLKFreq+0x14>)
 80268a2:	681b      	ldr	r3, [r3, #0]
}
 80268a4:	4618      	mov	r0, r3
 80268a6:	46bd      	mov	sp, r7
 80268a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80268ac:	4770      	bx	lr
 80268ae:	bf00      	nop
 80268b0:	20000000 	.word	0x20000000

080268b4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80268b4:	b580      	push	{r7, lr}
 80268b6:	b088      	sub	sp, #32
 80268b8:	af00      	add	r7, sp, #0
 80268ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80268bc:	2300      	movs	r3, #0
 80268be:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80268c0:	2300      	movs	r3, #0
 80268c2:	613b      	str	r3, [r7, #16]
  uint32_t plli2sused = 0;
 80268c4:	2300      	movs	r3, #0
 80268c6:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80268c8:	2300      	movs	r3, #0
 80268ca:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80268cc:	687b      	ldr	r3, [r7, #4]
 80268ce:	681b      	ldr	r3, [r3, #0]
 80268d0:	f003 0301 	and.w	r3, r3, #1
 80268d4:	2b00      	cmp	r3, #0
 80268d6:	d012      	beq.n	80268fe <HAL_RCCEx_PeriphCLKConfig+0x4a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80268d8:	4b65      	ldr	r3, [pc, #404]	; (8026a70 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80268da:	689b      	ldr	r3, [r3, #8]
 80268dc:	4a64      	ldr	r2, [pc, #400]	; (8026a70 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80268de:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80268e2:	6093      	str	r3, [r2, #8]
 80268e4:	4b62      	ldr	r3, [pc, #392]	; (8026a70 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80268e6:	689a      	ldr	r2, [r3, #8]
 80268e8:	687b      	ldr	r3, [r7, #4]
 80268ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80268ec:	4960      	ldr	r1, [pc, #384]	; (8026a70 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80268ee:	4313      	orrs	r3, r2
 80268f0:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80268f2:	687b      	ldr	r3, [r7, #4]
 80268f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80268f6:	2b00      	cmp	r3, #0
 80268f8:	d101      	bne.n	80268fe <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      plli2sused = 1;
 80268fa:	2301      	movs	r3, #1
 80268fc:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80268fe:	687b      	ldr	r3, [r7, #4]
 8026900:	681b      	ldr	r3, [r3, #0]
 8026902:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8026906:	2b00      	cmp	r3, #0
 8026908:	d017      	beq.n	802693a <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 802690a:	4b59      	ldr	r3, [pc, #356]	; (8026a70 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 802690c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8026910:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8026914:	687b      	ldr	r3, [r7, #4]
 8026916:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8026918:	4955      	ldr	r1, [pc, #340]	; (8026a70 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 802691a:	4313      	orrs	r3, r2
 802691c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8026920:	687b      	ldr	r3, [r7, #4]
 8026922:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8026924:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8026928:	d101      	bne.n	802692e <HAL_RCCEx_PeriphCLKConfig+0x7a>
    {
      plli2sused = 1;
 802692a:	2301      	movs	r3, #1
 802692c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 802692e:	687b      	ldr	r3, [r7, #4]
 8026930:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8026932:	2b00      	cmp	r3, #0
 8026934:	d101      	bne.n	802693a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      pllsaiused = 1;
 8026936:	2301      	movs	r3, #1
 8026938:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 802693a:	687b      	ldr	r3, [r7, #4]
 802693c:	681b      	ldr	r3, [r3, #0]
 802693e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8026942:	2b00      	cmp	r3, #0
 8026944:	d017      	beq.n	8026976 <HAL_RCCEx_PeriphCLKConfig+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8026946:	4b4a      	ldr	r3, [pc, #296]	; (8026a70 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8026948:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 802694c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8026950:	687b      	ldr	r3, [r7, #4]
 8026952:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8026954:	4946      	ldr	r1, [pc, #280]	; (8026a70 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8026956:	4313      	orrs	r3, r2
 8026958:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 802695c:	687b      	ldr	r3, [r7, #4]
 802695e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8026960:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8026964:	d101      	bne.n	802696a <HAL_RCCEx_PeriphCLKConfig+0xb6>
    {
      plli2sused = 1;
 8026966:	2301      	movs	r3, #1
 8026968:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 802696a:	687b      	ldr	r3, [r7, #4]
 802696c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802696e:	2b00      	cmp	r3, #0
 8026970:	d101      	bne.n	8026976 <HAL_RCCEx_PeriphCLKConfig+0xc2>
    {
      pllsaiused = 1;
 8026972:	2301      	movs	r3, #1
 8026974:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8026976:	687b      	ldr	r3, [r7, #4]
 8026978:	681b      	ldr	r3, [r3, #0]
 802697a:	f003 0320 	and.w	r3, r3, #32
 802697e:	2b00      	cmp	r3, #0
 8026980:	f000 808b 	beq.w	8026a9a <HAL_RCCEx_PeriphCLKConfig+0x1e6>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8026984:	4b3a      	ldr	r3, [pc, #232]	; (8026a70 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8026986:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8026988:	4a39      	ldr	r2, [pc, #228]	; (8026a70 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 802698a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 802698e:	6413      	str	r3, [r2, #64]	; 0x40
 8026990:	4b37      	ldr	r3, [pc, #220]	; (8026a70 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8026992:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8026994:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8026998:	60fb      	str	r3, [r7, #12]
 802699a:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 802699c:	4b35      	ldr	r3, [pc, #212]	; (8026a74 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 802699e:	681b      	ldr	r3, [r3, #0]
 80269a0:	4a34      	ldr	r2, [pc, #208]	; (8026a74 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80269a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80269a6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80269a8:	f7fb faaa 	bl	8021f00 <HAL_GetTick>
 80269ac:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80269ae:	e008      	b.n	80269c2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80269b0:	f7fb faa6 	bl	8021f00 <HAL_GetTick>
 80269b4:	4602      	mov	r2, r0
 80269b6:	697b      	ldr	r3, [r7, #20]
 80269b8:	1ad3      	subs	r3, r2, r3
 80269ba:	2b64      	cmp	r3, #100	; 0x64
 80269bc:	d901      	bls.n	80269c2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80269be:	2303      	movs	r3, #3
 80269c0:	e2bc      	b.n	8026f3c <HAL_RCCEx_PeriphCLKConfig+0x688>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80269c2:	4b2c      	ldr	r3, [pc, #176]	; (8026a74 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80269c4:	681b      	ldr	r3, [r3, #0]
 80269c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80269ca:	2b00      	cmp	r3, #0
 80269cc:	d0f0      	beq.n	80269b0 <HAL_RCCEx_PeriphCLKConfig+0xfc>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80269ce:	4b28      	ldr	r3, [pc, #160]	; (8026a70 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80269d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80269d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80269d6:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80269d8:	693b      	ldr	r3, [r7, #16]
 80269da:	2b00      	cmp	r3, #0
 80269dc:	d035      	beq.n	8026a4a <HAL_RCCEx_PeriphCLKConfig+0x196>
 80269de:	687b      	ldr	r3, [r7, #4]
 80269e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80269e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80269e6:	693a      	ldr	r2, [r7, #16]
 80269e8:	429a      	cmp	r2, r3
 80269ea:	d02e      	beq.n	8026a4a <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80269ec:	4b20      	ldr	r3, [pc, #128]	; (8026a70 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80269ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80269f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80269f4:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80269f6:	4b1e      	ldr	r3, [pc, #120]	; (8026a70 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80269f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80269fa:	4a1d      	ldr	r2, [pc, #116]	; (8026a70 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80269fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8026a00:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8026a02:	4b1b      	ldr	r3, [pc, #108]	; (8026a70 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8026a04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8026a06:	4a1a      	ldr	r2, [pc, #104]	; (8026a70 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8026a08:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8026a0c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8026a0e:	4a18      	ldr	r2, [pc, #96]	; (8026a70 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8026a10:	693b      	ldr	r3, [r7, #16]
 8026a12:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8026a14:	4b16      	ldr	r3, [pc, #88]	; (8026a70 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8026a16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8026a18:	f003 0301 	and.w	r3, r3, #1
 8026a1c:	2b01      	cmp	r3, #1
 8026a1e:	d114      	bne.n	8026a4a <HAL_RCCEx_PeriphCLKConfig+0x196>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8026a20:	f7fb fa6e 	bl	8021f00 <HAL_GetTick>
 8026a24:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8026a26:	e00a      	b.n	8026a3e <HAL_RCCEx_PeriphCLKConfig+0x18a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8026a28:	f7fb fa6a 	bl	8021f00 <HAL_GetTick>
 8026a2c:	4602      	mov	r2, r0
 8026a2e:	697b      	ldr	r3, [r7, #20]
 8026a30:	1ad3      	subs	r3, r2, r3
 8026a32:	f241 3288 	movw	r2, #5000	; 0x1388
 8026a36:	4293      	cmp	r3, r2
 8026a38:	d901      	bls.n	8026a3e <HAL_RCCEx_PeriphCLKConfig+0x18a>
          {
            return HAL_TIMEOUT;
 8026a3a:	2303      	movs	r3, #3
 8026a3c:	e27e      	b.n	8026f3c <HAL_RCCEx_PeriphCLKConfig+0x688>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8026a3e:	4b0c      	ldr	r3, [pc, #48]	; (8026a70 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8026a40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8026a42:	f003 0302 	and.w	r3, r3, #2
 8026a46:	2b00      	cmp	r3, #0
 8026a48:	d0ee      	beq.n	8026a28 <HAL_RCCEx_PeriphCLKConfig+0x174>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8026a4a:	687b      	ldr	r3, [r7, #4]
 8026a4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8026a4e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8026a52:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8026a56:	d111      	bne.n	8026a7c <HAL_RCCEx_PeriphCLKConfig+0x1c8>
 8026a58:	4b05      	ldr	r3, [pc, #20]	; (8026a70 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8026a5a:	689b      	ldr	r3, [r3, #8]
 8026a5c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8026a60:	687b      	ldr	r3, [r7, #4]
 8026a62:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8026a64:	4b04      	ldr	r3, [pc, #16]	; (8026a78 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8026a66:	400b      	ands	r3, r1
 8026a68:	4901      	ldr	r1, [pc, #4]	; (8026a70 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8026a6a:	4313      	orrs	r3, r2
 8026a6c:	608b      	str	r3, [r1, #8]
 8026a6e:	e00b      	b.n	8026a88 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8026a70:	40023800 	.word	0x40023800
 8026a74:	40007000 	.word	0x40007000
 8026a78:	0ffffcff 	.word	0x0ffffcff
 8026a7c:	4ba4      	ldr	r3, [pc, #656]	; (8026d10 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8026a7e:	689b      	ldr	r3, [r3, #8]
 8026a80:	4aa3      	ldr	r2, [pc, #652]	; (8026d10 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8026a82:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8026a86:	6093      	str	r3, [r2, #8]
 8026a88:	4ba1      	ldr	r3, [pc, #644]	; (8026d10 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8026a8a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8026a8c:	687b      	ldr	r3, [r7, #4]
 8026a8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8026a90:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8026a94:	499e      	ldr	r1, [pc, #632]	; (8026d10 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8026a96:	4313      	orrs	r3, r2
 8026a98:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8026a9a:	687b      	ldr	r3, [r7, #4]
 8026a9c:	681b      	ldr	r3, [r3, #0]
 8026a9e:	f003 0310 	and.w	r3, r3, #16
 8026aa2:	2b00      	cmp	r3, #0
 8026aa4:	d010      	beq.n	8026ac8 <HAL_RCCEx_PeriphCLKConfig+0x214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8026aa6:	4b9a      	ldr	r3, [pc, #616]	; (8026d10 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8026aa8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8026aac:	4a98      	ldr	r2, [pc, #608]	; (8026d10 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8026aae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8026ab2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8026ab6:	4b96      	ldr	r3, [pc, #600]	; (8026d10 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8026ab8:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8026abc:	687b      	ldr	r3, [r7, #4]
 8026abe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8026ac0:	4993      	ldr	r1, [pc, #588]	; (8026d10 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8026ac2:	4313      	orrs	r3, r2
 8026ac4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8026ac8:	687b      	ldr	r3, [r7, #4]
 8026aca:	681b      	ldr	r3, [r3, #0]
 8026acc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8026ad0:	2b00      	cmp	r3, #0
 8026ad2:	d00a      	beq.n	8026aea <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8026ad4:	4b8e      	ldr	r3, [pc, #568]	; (8026d10 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8026ad6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8026ada:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8026ade:	687b      	ldr	r3, [r7, #4]
 8026ae0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8026ae2:	498b      	ldr	r1, [pc, #556]	; (8026d10 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8026ae4:	4313      	orrs	r3, r2
 8026ae6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8026aea:	687b      	ldr	r3, [r7, #4]
 8026aec:	681b      	ldr	r3, [r3, #0]
 8026aee:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8026af2:	2b00      	cmp	r3, #0
 8026af4:	d00a      	beq.n	8026b0c <HAL_RCCEx_PeriphCLKConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8026af6:	4b86      	ldr	r3, [pc, #536]	; (8026d10 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8026af8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8026afc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8026b00:	687b      	ldr	r3, [r7, #4]
 8026b02:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8026b04:	4982      	ldr	r1, [pc, #520]	; (8026d10 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8026b06:	4313      	orrs	r3, r2
 8026b08:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8026b0c:	687b      	ldr	r3, [r7, #4]
 8026b0e:	681b      	ldr	r3, [r3, #0]
 8026b10:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8026b14:	2b00      	cmp	r3, #0
 8026b16:	d00a      	beq.n	8026b2e <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8026b18:	4b7d      	ldr	r3, [pc, #500]	; (8026d10 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8026b1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8026b1e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8026b22:	687b      	ldr	r3, [r7, #4]
 8026b24:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8026b26:	497a      	ldr	r1, [pc, #488]	; (8026d10 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8026b28:	4313      	orrs	r3, r2
 8026b2a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8026b2e:	687b      	ldr	r3, [r7, #4]
 8026b30:	681b      	ldr	r3, [r3, #0]
 8026b32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8026b36:	2b00      	cmp	r3, #0
 8026b38:	d00a      	beq.n	8026b50 <HAL_RCCEx_PeriphCLKConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8026b3a:	4b75      	ldr	r3, [pc, #468]	; (8026d10 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8026b3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8026b40:	f023 0203 	bic.w	r2, r3, #3
 8026b44:	687b      	ldr	r3, [r7, #4]
 8026b46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8026b48:	4971      	ldr	r1, [pc, #452]	; (8026d10 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8026b4a:	4313      	orrs	r3, r2
 8026b4c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8026b50:	687b      	ldr	r3, [r7, #4]
 8026b52:	681b      	ldr	r3, [r3, #0]
 8026b54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8026b58:	2b00      	cmp	r3, #0
 8026b5a:	d00a      	beq.n	8026b72 <HAL_RCCEx_PeriphCLKConfig+0x2be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8026b5c:	4b6c      	ldr	r3, [pc, #432]	; (8026d10 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8026b5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8026b62:	f023 020c 	bic.w	r2, r3, #12
 8026b66:	687b      	ldr	r3, [r7, #4]
 8026b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8026b6a:	4969      	ldr	r1, [pc, #420]	; (8026d10 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8026b6c:	4313      	orrs	r3, r2
 8026b6e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8026b72:	687b      	ldr	r3, [r7, #4]
 8026b74:	681b      	ldr	r3, [r3, #0]
 8026b76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8026b7a:	2b00      	cmp	r3, #0
 8026b7c:	d00a      	beq.n	8026b94 <HAL_RCCEx_PeriphCLKConfig+0x2e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8026b7e:	4b64      	ldr	r3, [pc, #400]	; (8026d10 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8026b80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8026b84:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8026b88:	687b      	ldr	r3, [r7, #4]
 8026b8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8026b8c:	4960      	ldr	r1, [pc, #384]	; (8026d10 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8026b8e:	4313      	orrs	r3, r2
 8026b90:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8026b94:	687b      	ldr	r3, [r7, #4]
 8026b96:	681b      	ldr	r3, [r3, #0]
 8026b98:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8026b9c:	2b00      	cmp	r3, #0
 8026b9e:	d00a      	beq.n	8026bb6 <HAL_RCCEx_PeriphCLKConfig+0x302>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8026ba0:	4b5b      	ldr	r3, [pc, #364]	; (8026d10 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8026ba2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8026ba6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8026baa:	687b      	ldr	r3, [r7, #4]
 8026bac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8026bae:	4958      	ldr	r1, [pc, #352]	; (8026d10 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8026bb0:	4313      	orrs	r3, r2
 8026bb2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8026bb6:	687b      	ldr	r3, [r7, #4]
 8026bb8:	681b      	ldr	r3, [r3, #0]
 8026bba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8026bbe:	2b00      	cmp	r3, #0
 8026bc0:	d00a      	beq.n	8026bd8 <HAL_RCCEx_PeriphCLKConfig+0x324>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8026bc2:	4b53      	ldr	r3, [pc, #332]	; (8026d10 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8026bc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8026bc8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8026bcc:	687b      	ldr	r3, [r7, #4]
 8026bce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8026bd0:	494f      	ldr	r1, [pc, #316]	; (8026d10 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8026bd2:	4313      	orrs	r3, r2
 8026bd4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8026bd8:	687b      	ldr	r3, [r7, #4]
 8026bda:	681b      	ldr	r3, [r3, #0]
 8026bdc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8026be0:	2b00      	cmp	r3, #0
 8026be2:	d00a      	beq.n	8026bfa <HAL_RCCEx_PeriphCLKConfig+0x346>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8026be4:	4b4a      	ldr	r3, [pc, #296]	; (8026d10 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8026be6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8026bea:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8026bee:	687b      	ldr	r3, [r7, #4]
 8026bf0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8026bf2:	4947      	ldr	r1, [pc, #284]	; (8026d10 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8026bf4:	4313      	orrs	r3, r2
 8026bf6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8026bfa:	687b      	ldr	r3, [r7, #4]
 8026bfc:	681b      	ldr	r3, [r3, #0]
 8026bfe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8026c02:	2b00      	cmp	r3, #0
 8026c04:	d00a      	beq.n	8026c1c <HAL_RCCEx_PeriphCLKConfig+0x368>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8026c06:	4b42      	ldr	r3, [pc, #264]	; (8026d10 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8026c08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8026c0c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8026c10:	687b      	ldr	r3, [r7, #4]
 8026c12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8026c14:	493e      	ldr	r1, [pc, #248]	; (8026d10 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8026c16:	4313      	orrs	r3, r2
 8026c18:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8026c1c:	687b      	ldr	r3, [r7, #4]
 8026c1e:	681b      	ldr	r3, [r3, #0]
 8026c20:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8026c24:	2b00      	cmp	r3, #0
 8026c26:	d00a      	beq.n	8026c3e <HAL_RCCEx_PeriphCLKConfig+0x38a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8026c28:	4b39      	ldr	r3, [pc, #228]	; (8026d10 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8026c2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8026c2e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8026c32:	687b      	ldr	r3, [r7, #4]
 8026c34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8026c36:	4936      	ldr	r1, [pc, #216]	; (8026d10 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8026c38:	4313      	orrs	r3, r2
 8026c3a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8026c3e:	687b      	ldr	r3, [r7, #4]
 8026c40:	681b      	ldr	r3, [r3, #0]
 8026c42:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8026c46:	2b00      	cmp	r3, #0
 8026c48:	d011      	beq.n	8026c6e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8026c4a:	4b31      	ldr	r3, [pc, #196]	; (8026d10 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8026c4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8026c50:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8026c54:	687b      	ldr	r3, [r7, #4]
 8026c56:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8026c58:	492d      	ldr	r1, [pc, #180]	; (8026d10 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8026c5a:	4313      	orrs	r3, r2
 8026c5c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8026c60:	687b      	ldr	r3, [r7, #4]
 8026c62:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8026c64:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8026c68:	d101      	bne.n	8026c6e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      pllsaiused = 1;
 8026c6a:	2301      	movs	r3, #1
 8026c6c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8026c6e:	687b      	ldr	r3, [r7, #4]
 8026c70:	681b      	ldr	r3, [r3, #0]
 8026c72:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8026c76:	2b00      	cmp	r3, #0
 8026c78:	d00a      	beq.n	8026c90 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8026c7a:	4b25      	ldr	r3, [pc, #148]	; (8026d10 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8026c7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8026c80:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8026c84:	687b      	ldr	r3, [r7, #4]
 8026c86:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8026c88:	4921      	ldr	r1, [pc, #132]	; (8026d10 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8026c8a:	4313      	orrs	r3, r2
 8026c8c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8026c90:	687b      	ldr	r3, [r7, #4]
 8026c92:	681b      	ldr	r3, [r3, #0]
 8026c94:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8026c98:	2b00      	cmp	r3, #0
 8026c9a:	d00a      	beq.n	8026cb2 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8026c9c:	4b1c      	ldr	r3, [pc, #112]	; (8026d10 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8026c9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8026ca2:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8026ca6:	687b      	ldr	r3, [r7, #4]
 8026ca8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8026caa:	4919      	ldr	r1, [pc, #100]	; (8026d10 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8026cac:	4313      	orrs	r3, r2
 8026cae:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8026cb2:	687b      	ldr	r3, [r7, #4]
 8026cb4:	681b      	ldr	r3, [r3, #0]
 8026cb6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8026cba:	2b00      	cmp	r3, #0
 8026cbc:	d00a      	beq.n	8026cd4 <HAL_RCCEx_PeriphCLKConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8026cbe:	4b14      	ldr	r3, [pc, #80]	; (8026d10 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8026cc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8026cc4:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8026cc8:	687b      	ldr	r3, [r7, #4]
 8026cca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8026ccc:	4910      	ldr	r1, [pc, #64]	; (8026d10 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8026cce:	4313      	orrs	r3, r2
 8026cd0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2 or I2S */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8026cd4:	69fb      	ldr	r3, [r7, #28]
 8026cd6:	2b01      	cmp	r3, #1
 8026cd8:	d006      	beq.n	8026ce8 <HAL_RCCEx_PeriphCLKConfig+0x434>
 8026cda:	687b      	ldr	r3, [r7, #4]
 8026cdc:	681b      	ldr	r3, [r3, #0]
 8026cde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8026ce2:	2b00      	cmp	r3, #0
 8026ce4:	f000 809d 	beq.w	8026e22 <HAL_RCCEx_PeriphCLKConfig+0x56e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8026ce8:	4b09      	ldr	r3, [pc, #36]	; (8026d10 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8026cea:	681b      	ldr	r3, [r3, #0]
 8026cec:	4a08      	ldr	r2, [pc, #32]	; (8026d10 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8026cee:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8026cf2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8026cf4:	f7fb f904 	bl	8021f00 <HAL_GetTick>
 8026cf8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8026cfa:	e00b      	b.n	8026d14 <HAL_RCCEx_PeriphCLKConfig+0x460>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8026cfc:	f7fb f900 	bl	8021f00 <HAL_GetTick>
 8026d00:	4602      	mov	r2, r0
 8026d02:	697b      	ldr	r3, [r7, #20]
 8026d04:	1ad3      	subs	r3, r2, r3
 8026d06:	2b64      	cmp	r3, #100	; 0x64
 8026d08:	d904      	bls.n	8026d14 <HAL_RCCEx_PeriphCLKConfig+0x460>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8026d0a:	2303      	movs	r3, #3
 8026d0c:	e116      	b.n	8026f3c <HAL_RCCEx_PeriphCLKConfig+0x688>
 8026d0e:	bf00      	nop
 8026d10:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8026d14:	4b8b      	ldr	r3, [pc, #556]	; (8026f44 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8026d16:	681b      	ldr	r3, [r3, #0]
 8026d18:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8026d1c:	2b00      	cmp	r3, #0
 8026d1e:	d1ed      	bne.n	8026cfc <HAL_RCCEx_PeriphCLKConfig+0x448>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8026d20:	687b      	ldr	r3, [r7, #4]
 8026d22:	681b      	ldr	r3, [r3, #0]
 8026d24:	f003 0301 	and.w	r3, r3, #1
 8026d28:	2b00      	cmp	r3, #0
 8026d2a:	d017      	beq.n	8026d5c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8026d2c:	687b      	ldr	r3, [r7, #4]
 8026d2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8026d30:	2b00      	cmp	r3, #0
 8026d32:	d113      	bne.n	8026d5c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8026d34:	4b83      	ldr	r3, [pc, #524]	; (8026f44 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8026d36:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8026d3a:	0e1b      	lsrs	r3, r3, #24
 8026d3c:	f003 030f 	and.w	r3, r3, #15
 8026d40:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, PeriphClkInit->PLLI2S.PLLI2SR);
 8026d42:	687b      	ldr	r3, [r7, #4]
 8026d44:	685b      	ldr	r3, [r3, #4]
 8026d46:	019a      	lsls	r2, r3, #6
 8026d48:	693b      	ldr	r3, [r7, #16]
 8026d4a:	061b      	lsls	r3, r3, #24
 8026d4c:	431a      	orrs	r2, r3
 8026d4e:	687b      	ldr	r3, [r7, #4]
 8026d50:	689b      	ldr	r3, [r3, #8]
 8026d52:	071b      	lsls	r3, r3, #28
 8026d54:	497b      	ldr	r1, [pc, #492]	; (8026f44 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8026d56:	4313      	orrs	r3, r2
 8026d58:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8026d5c:	687b      	ldr	r3, [r7, #4]
 8026d5e:	681b      	ldr	r3, [r3, #0]
 8026d60:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8026d64:	2b00      	cmp	r3, #0
 8026d66:	d004      	beq.n	8026d72 <HAL_RCCEx_PeriphCLKConfig+0x4be>
 8026d68:	687b      	ldr	r3, [r7, #4]
 8026d6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8026d6c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8026d70:	d00a      	beq.n	8026d88 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8026d72:	687b      	ldr	r3, [r7, #4]
 8026d74:	681b      	ldr	r3, [r3, #0]
 8026d76:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8026d7a:	2b00      	cmp	r3, #0
 8026d7c:	d024      	beq.n	8026dc8 <HAL_RCCEx_PeriphCLKConfig+0x514>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8026d7e:	687b      	ldr	r3, [r7, #4]
 8026d80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8026d82:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8026d86:	d11f      	bne.n	8026dc8 <HAL_RCCEx_PeriphCLKConfig+0x514>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8026d88:	4b6e      	ldr	r3, [pc, #440]	; (8026f44 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8026d8a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8026d8e:	0f1b      	lsrs	r3, r3, #28
 8026d90:	f003 0307 	and.w	r3, r3, #7
 8026d94:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg0);
 8026d96:	687b      	ldr	r3, [r7, #4]
 8026d98:	685b      	ldr	r3, [r3, #4]
 8026d9a:	019a      	lsls	r2, r3, #6
 8026d9c:	687b      	ldr	r3, [r7, #4]
 8026d9e:	68db      	ldr	r3, [r3, #12]
 8026da0:	061b      	lsls	r3, r3, #24
 8026da2:	431a      	orrs	r2, r3
 8026da4:	693b      	ldr	r3, [r7, #16]
 8026da6:	071b      	lsls	r3, r3, #28
 8026da8:	4966      	ldr	r1, [pc, #408]	; (8026f44 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8026daa:	4313      	orrs	r3, r2
 8026dac:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8026db0:	4b64      	ldr	r3, [pc, #400]	; (8026f44 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8026db2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8026db6:	f023 021f 	bic.w	r2, r3, #31
 8026dba:	687b      	ldr	r3, [r7, #4]
 8026dbc:	69db      	ldr	r3, [r3, #28]
 8026dbe:	3b01      	subs	r3, #1
 8026dc0:	4960      	ldr	r1, [pc, #384]	; (8026f44 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8026dc2:	4313      	orrs	r3, r2
 8026dc4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8026dc8:	687b      	ldr	r3, [r7, #4]
 8026dca:	681b      	ldr	r3, [r3, #0]
 8026dcc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8026dd0:	2b00      	cmp	r3, #0
 8026dd2:	d00d      	beq.n	8026df0 <HAL_RCCEx_PeriphCLKConfig+0x53c>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8026dd4:	687b      	ldr	r3, [r7, #4]
 8026dd6:	685b      	ldr	r3, [r3, #4]
 8026dd8:	019a      	lsls	r2, r3, #6
 8026dda:	687b      	ldr	r3, [r7, #4]
 8026ddc:	68db      	ldr	r3, [r3, #12]
 8026dde:	061b      	lsls	r3, r3, #24
 8026de0:	431a      	orrs	r2, r3
 8026de2:	687b      	ldr	r3, [r7, #4]
 8026de4:	689b      	ldr	r3, [r3, #8]
 8026de6:	071b      	lsls	r3, r3, #28
 8026de8:	4956      	ldr	r1, [pc, #344]	; (8026f44 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8026dea:	4313      	orrs	r3, r2
 8026dec:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8026df0:	4b54      	ldr	r3, [pc, #336]	; (8026f44 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8026df2:	681b      	ldr	r3, [r3, #0]
 8026df4:	4a53      	ldr	r2, [pc, #332]	; (8026f44 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8026df6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8026dfa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8026dfc:	f7fb f880 	bl	8021f00 <HAL_GetTick>
 8026e00:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8026e02:	e008      	b.n	8026e16 <HAL_RCCEx_PeriphCLKConfig+0x562>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8026e04:	f7fb f87c 	bl	8021f00 <HAL_GetTick>
 8026e08:	4602      	mov	r2, r0
 8026e0a:	697b      	ldr	r3, [r7, #20]
 8026e0c:	1ad3      	subs	r3, r2, r3
 8026e0e:	2b64      	cmp	r3, #100	; 0x64
 8026e10:	d901      	bls.n	8026e16 <HAL_RCCEx_PeriphCLKConfig+0x562>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8026e12:	2303      	movs	r3, #3
 8026e14:	e092      	b.n	8026f3c <HAL_RCCEx_PeriphCLKConfig+0x688>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8026e16:	4b4b      	ldr	r3, [pc, #300]	; (8026f44 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8026e18:	681b      	ldr	r3, [r3, #0]
 8026e1a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8026e1e:	2b00      	cmp	r3, #0
 8026e20:	d0f0      	beq.n	8026e04 <HAL_RCCEx_PeriphCLKConfig+0x550>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8026e22:	69bb      	ldr	r3, [r7, #24]
 8026e24:	2b01      	cmp	r3, #1
 8026e26:	f040 8088 	bne.w	8026f3a <HAL_RCCEx_PeriphCLKConfig+0x686>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8026e2a:	4b46      	ldr	r3, [pc, #280]	; (8026f44 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8026e2c:	681b      	ldr	r3, [r3, #0]
 8026e2e:	4a45      	ldr	r2, [pc, #276]	; (8026f44 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8026e30:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8026e34:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8026e36:	f7fb f863 	bl	8021f00 <HAL_GetTick>
 8026e3a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8026e3c:	e008      	b.n	8026e50 <HAL_RCCEx_PeriphCLKConfig+0x59c>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8026e3e:	f7fb f85f 	bl	8021f00 <HAL_GetTick>
 8026e42:	4602      	mov	r2, r0
 8026e44:	697b      	ldr	r3, [r7, #20]
 8026e46:	1ad3      	subs	r3, r2, r3
 8026e48:	2b64      	cmp	r3, #100	; 0x64
 8026e4a:	d901      	bls.n	8026e50 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8026e4c:	2303      	movs	r3, #3
 8026e4e:	e075      	b.n	8026f3c <HAL_RCCEx_PeriphCLKConfig+0x688>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8026e50:	4b3c      	ldr	r3, [pc, #240]	; (8026f44 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8026e52:	681b      	ldr	r3, [r3, #0]
 8026e54:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8026e58:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8026e5c:	d0ef      	beq.n	8026e3e <HAL_RCCEx_PeriphCLKConfig+0x58a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8026e5e:	687b      	ldr	r3, [r7, #4]
 8026e60:	681b      	ldr	r3, [r3, #0]
 8026e62:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8026e66:	2b00      	cmp	r3, #0
 8026e68:	d003      	beq.n	8026e72 <HAL_RCCEx_PeriphCLKConfig+0x5be>
 8026e6a:	687b      	ldr	r3, [r7, #4]
 8026e6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8026e6e:	2b00      	cmp	r3, #0
 8026e70:	d009      	beq.n	8026e86 <HAL_RCCEx_PeriphCLKConfig+0x5d2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8026e72:	687b      	ldr	r3, [r7, #4]
 8026e74:	681b      	ldr	r3, [r3, #0]
 8026e76:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8026e7a:	2b00      	cmp	r3, #0
 8026e7c:	d024      	beq.n	8026ec8 <HAL_RCCEx_PeriphCLKConfig+0x614>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8026e7e:	687b      	ldr	r3, [r7, #4]
 8026e80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8026e82:	2b00      	cmp	r3, #0
 8026e84:	d120      	bne.n	8026ec8 <HAL_RCCEx_PeriphCLKConfig+0x614>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8026e86:	4b2f      	ldr	r3, [pc, #188]	; (8026f44 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8026e88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8026e8c:	0c1b      	lsrs	r3, r3, #16
 8026e8e:	f003 0303 	and.w	r3, r3, #3
 8026e92:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ);
 8026e94:	687b      	ldr	r3, [r7, #4]
 8026e96:	691b      	ldr	r3, [r3, #16]
 8026e98:	019a      	lsls	r2, r3, #6
 8026e9a:	693b      	ldr	r3, [r7, #16]
 8026e9c:	041b      	lsls	r3, r3, #16
 8026e9e:	431a      	orrs	r2, r3
 8026ea0:	687b      	ldr	r3, [r7, #4]
 8026ea2:	695b      	ldr	r3, [r3, #20]
 8026ea4:	061b      	lsls	r3, r3, #24
 8026ea6:	4927      	ldr	r1, [pc, #156]	; (8026f44 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8026ea8:	4313      	orrs	r3, r2
 8026eaa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8026eae:	4b25      	ldr	r3, [pc, #148]	; (8026f44 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8026eb0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8026eb4:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8026eb8:	687b      	ldr	r3, [r7, #4]
 8026eba:	6a1b      	ldr	r3, [r3, #32]
 8026ebc:	3b01      	subs	r3, #1
 8026ebe:	021b      	lsls	r3, r3, #8
 8026ec0:	4920      	ldr	r1, [pc, #128]	; (8026f44 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8026ec2:	4313      	orrs	r3, r2
 8026ec4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8026ec8:	687b      	ldr	r3, [r7, #4]
 8026eca:	681b      	ldr	r3, [r3, #0]
 8026ecc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8026ed0:	2b00      	cmp	r3, #0
 8026ed2:	d018      	beq.n	8026f06 <HAL_RCCEx_PeriphCLKConfig+0x652>
 8026ed4:	687b      	ldr	r3, [r7, #4]
 8026ed6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8026ed8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8026edc:	d113      	bne.n	8026f06 <HAL_RCCEx_PeriphCLKConfig+0x652>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8026ede:	4b19      	ldr	r3, [pc, #100]	; (8026f44 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8026ee0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8026ee4:	0e1b      	lsrs	r3, r3, #24
 8026ee6:	f003 030f 	and.w	r3, r3, #15
 8026eea:	613b      	str	r3, [r7, #16]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0);
 8026eec:	687b      	ldr	r3, [r7, #4]
 8026eee:	691b      	ldr	r3, [r3, #16]
 8026ef0:	019a      	lsls	r2, r3, #6
 8026ef2:	687b      	ldr	r3, [r7, #4]
 8026ef4:	699b      	ldr	r3, [r3, #24]
 8026ef6:	041b      	lsls	r3, r3, #16
 8026ef8:	431a      	orrs	r2, r3
 8026efa:	693b      	ldr	r3, [r7, #16]
 8026efc:	061b      	lsls	r3, r3, #24
 8026efe:	4911      	ldr	r1, [pc, #68]	; (8026f44 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8026f00:	4313      	orrs	r3, r2
 8026f02:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8026f06:	4b0f      	ldr	r3, [pc, #60]	; (8026f44 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8026f08:	681b      	ldr	r3, [r3, #0]
 8026f0a:	4a0e      	ldr	r2, [pc, #56]	; (8026f44 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8026f0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8026f10:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8026f12:	f7fa fff5 	bl	8021f00 <HAL_GetTick>
 8026f16:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8026f18:	e008      	b.n	8026f2c <HAL_RCCEx_PeriphCLKConfig+0x678>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8026f1a:	f7fa fff1 	bl	8021f00 <HAL_GetTick>
 8026f1e:	4602      	mov	r2, r0
 8026f20:	697b      	ldr	r3, [r7, #20]
 8026f22:	1ad3      	subs	r3, r2, r3
 8026f24:	2b64      	cmp	r3, #100	; 0x64
 8026f26:	d901      	bls.n	8026f2c <HAL_RCCEx_PeriphCLKConfig+0x678>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8026f28:	2303      	movs	r3, #3
 8026f2a:	e007      	b.n	8026f3c <HAL_RCCEx_PeriphCLKConfig+0x688>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8026f2c:	4b05      	ldr	r3, [pc, #20]	; (8026f44 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8026f2e:	681b      	ldr	r3, [r3, #0]
 8026f30:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8026f34:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8026f38:	d1ef      	bne.n	8026f1a <HAL_RCCEx_PeriphCLKConfig+0x666>
      }
    }
  }
  return HAL_OK;
 8026f3a:	2300      	movs	r3, #0
}
 8026f3c:	4618      	mov	r0, r3
 8026f3e:	3720      	adds	r7, #32
 8026f40:	46bd      	mov	sp, r7
 8026f42:	bd80      	pop	{r7, pc}
 8026f44:	40023800 	.word	0x40023800

08026f48 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8026f48:	b580      	push	{r7, lr}
 8026f4a:	b084      	sub	sp, #16
 8026f4c:	af00      	add	r7, sp, #0
 8026f4e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8026f50:	687b      	ldr	r3, [r7, #4]
 8026f52:	2b00      	cmp	r3, #0
 8026f54:	d101      	bne.n	8026f5a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8026f56:	2301      	movs	r3, #1
 8026f58:	e09d      	b.n	8027096 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8026f5a:	687b      	ldr	r3, [r7, #4]
 8026f5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8026f5e:	2b00      	cmp	r3, #0
 8026f60:	d108      	bne.n	8026f74 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8026f62:	687b      	ldr	r3, [r7, #4]
 8026f64:	685b      	ldr	r3, [r3, #4]
 8026f66:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8026f6a:	d009      	beq.n	8026f80 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8026f6c:	687b      	ldr	r3, [r7, #4]
 8026f6e:	2200      	movs	r2, #0
 8026f70:	61da      	str	r2, [r3, #28]
 8026f72:	e005      	b.n	8026f80 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8026f74:	687b      	ldr	r3, [r7, #4]
 8026f76:	2200      	movs	r2, #0
 8026f78:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8026f7a:	687b      	ldr	r3, [r7, #4]
 8026f7c:	2200      	movs	r2, #0
 8026f7e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8026f80:	687b      	ldr	r3, [r7, #4]
 8026f82:	2200      	movs	r2, #0
 8026f84:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8026f86:	687b      	ldr	r3, [r7, #4]
 8026f88:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8026f8c:	b2db      	uxtb	r3, r3
 8026f8e:	2b00      	cmp	r3, #0
 8026f90:	d106      	bne.n	8026fa0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8026f92:	687b      	ldr	r3, [r7, #4]
 8026f94:	2200      	movs	r2, #0
 8026f96:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8026f9a:	6878      	ldr	r0, [r7, #4]
 8026f9c:	f7fa fdb2 	bl	8021b04 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8026fa0:	687b      	ldr	r3, [r7, #4]
 8026fa2:	2202      	movs	r2, #2
 8026fa4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8026fa8:	687b      	ldr	r3, [r7, #4]
 8026faa:	681b      	ldr	r3, [r3, #0]
 8026fac:	681a      	ldr	r2, [r3, #0]
 8026fae:	687b      	ldr	r3, [r7, #4]
 8026fb0:	681b      	ldr	r3, [r3, #0]
 8026fb2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8026fb6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8026fb8:	687b      	ldr	r3, [r7, #4]
 8026fba:	68db      	ldr	r3, [r3, #12]
 8026fbc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8026fc0:	d902      	bls.n	8026fc8 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8026fc2:	2300      	movs	r3, #0
 8026fc4:	60fb      	str	r3, [r7, #12]
 8026fc6:	e002      	b.n	8026fce <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8026fc8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8026fcc:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8026fce:	687b      	ldr	r3, [r7, #4]
 8026fd0:	68db      	ldr	r3, [r3, #12]
 8026fd2:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8026fd6:	d007      	beq.n	8026fe8 <HAL_SPI_Init+0xa0>
 8026fd8:	687b      	ldr	r3, [r7, #4]
 8026fda:	68db      	ldr	r3, [r3, #12]
 8026fdc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8026fe0:	d002      	beq.n	8026fe8 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8026fe2:	687b      	ldr	r3, [r7, #4]
 8026fe4:	2200      	movs	r2, #0
 8026fe6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8026fe8:	687b      	ldr	r3, [r7, #4]
 8026fea:	685b      	ldr	r3, [r3, #4]
 8026fec:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8026ff0:	687b      	ldr	r3, [r7, #4]
 8026ff2:	689b      	ldr	r3, [r3, #8]
 8026ff4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8026ff8:	431a      	orrs	r2, r3
 8026ffa:	687b      	ldr	r3, [r7, #4]
 8026ffc:	691b      	ldr	r3, [r3, #16]
 8026ffe:	f003 0302 	and.w	r3, r3, #2
 8027002:	431a      	orrs	r2, r3
 8027004:	687b      	ldr	r3, [r7, #4]
 8027006:	695b      	ldr	r3, [r3, #20]
 8027008:	f003 0301 	and.w	r3, r3, #1
 802700c:	431a      	orrs	r2, r3
 802700e:	687b      	ldr	r3, [r7, #4]
 8027010:	699b      	ldr	r3, [r3, #24]
 8027012:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8027016:	431a      	orrs	r2, r3
 8027018:	687b      	ldr	r3, [r7, #4]
 802701a:	69db      	ldr	r3, [r3, #28]
 802701c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8027020:	431a      	orrs	r2, r3
 8027022:	687b      	ldr	r3, [r7, #4]
 8027024:	6a1b      	ldr	r3, [r3, #32]
 8027026:	f003 0380 	and.w	r3, r3, #128	; 0x80
 802702a:	ea42 0103 	orr.w	r1, r2, r3
 802702e:	687b      	ldr	r3, [r7, #4]
 8027030:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8027032:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8027036:	687b      	ldr	r3, [r7, #4]
 8027038:	681b      	ldr	r3, [r3, #0]
 802703a:	430a      	orrs	r2, r1
 802703c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 802703e:	687b      	ldr	r3, [r7, #4]
 8027040:	699b      	ldr	r3, [r3, #24]
 8027042:	0c1b      	lsrs	r3, r3, #16
 8027044:	f003 0204 	and.w	r2, r3, #4
 8027048:	687b      	ldr	r3, [r7, #4]
 802704a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802704c:	f003 0310 	and.w	r3, r3, #16
 8027050:	431a      	orrs	r2, r3
 8027052:	687b      	ldr	r3, [r7, #4]
 8027054:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8027056:	f003 0308 	and.w	r3, r3, #8
 802705a:	431a      	orrs	r2, r3
 802705c:	687b      	ldr	r3, [r7, #4]
 802705e:	68db      	ldr	r3, [r3, #12]
 8027060:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8027064:	ea42 0103 	orr.w	r1, r2, r3
 8027068:	68fb      	ldr	r3, [r7, #12]
 802706a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 802706e:	687b      	ldr	r3, [r7, #4]
 8027070:	681b      	ldr	r3, [r3, #0]
 8027072:	430a      	orrs	r2, r1
 8027074:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8027076:	687b      	ldr	r3, [r7, #4]
 8027078:	681b      	ldr	r3, [r3, #0]
 802707a:	69da      	ldr	r2, [r3, #28]
 802707c:	687b      	ldr	r3, [r7, #4]
 802707e:	681b      	ldr	r3, [r3, #0]
 8027080:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8027084:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8027086:	687b      	ldr	r3, [r7, #4]
 8027088:	2200      	movs	r2, #0
 802708a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 802708c:	687b      	ldr	r3, [r7, #4]
 802708e:	2201      	movs	r2, #1
 8027090:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8027094:	2300      	movs	r3, #0
}
 8027096:	4618      	mov	r0, r3
 8027098:	3710      	adds	r7, #16
 802709a:	46bd      	mov	sp, r7
 802709c:	bd80      	pop	{r7, pc}
	...

080270a0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80270a0:	b084      	sub	sp, #16
 80270a2:	b580      	push	{r7, lr}
 80270a4:	b084      	sub	sp, #16
 80270a6:	af00      	add	r7, sp, #0
 80270a8:	6078      	str	r0, [r7, #4]
 80270aa:	f107 001c 	add.w	r0, r7, #28
 80270ae:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80270b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80270b4:	2b01      	cmp	r3, #1
 80270b6:	d126      	bne.n	8027106 <USB_CoreInit+0x66>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80270b8:	687b      	ldr	r3, [r7, #4]
 80270ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80270bc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80270c0:	687b      	ldr	r3, [r7, #4]
 80270c2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80270c4:	687b      	ldr	r3, [r7, #4]
 80270c6:	68da      	ldr	r2, [r3, #12]
 80270c8:	4b3f      	ldr	r3, [pc, #252]	; (80271c8 <USB_CoreInit+0x128>)
 80270ca:	4013      	ands	r3, r2
 80270cc:	687a      	ldr	r2, [r7, #4]
 80270ce:	60d3      	str	r3, [r2, #12]

#if defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx)
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
 80270d0:	687b      	ldr	r3, [r7, #4]
 80270d2:	68db      	ldr	r3, [r3, #12]
 80270d4:	f043 0210 	orr.w	r2, r3, #16
 80270d8:	687b      	ldr	r3, [r7, #4]
 80270da:	60da      	str	r2, [r3, #12]
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80270dc:	687b      	ldr	r3, [r7, #4]
 80270de:	68db      	ldr	r3, [r3, #12]
 80270e0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80270e4:	687b      	ldr	r3, [r7, #4]
 80270e6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80270e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80270ea:	2b01      	cmp	r3, #1
 80270ec:	d105      	bne.n	80270fa <USB_CoreInit+0x5a>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80270ee:	687b      	ldr	r3, [r7, #4]
 80270f0:	68db      	ldr	r3, [r3, #12]
 80270f2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80270f6:	687b      	ldr	r3, [r7, #4]
 80270f8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80270fa:	6878      	ldr	r0, [r7, #4]
 80270fc:	f001 fc84 	bl	8028a08 <USB_CoreReset>
 8027100:	4603      	mov	r3, r0
 8027102:	73fb      	strb	r3, [r7, #15]
 8027104:	e048      	b.n	8027198 <USB_CoreInit+0xf8>
  }
#if defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx)
  else if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 8027106:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8027108:	2b03      	cmp	r3, #3
 802710a:	d134      	bne.n	8027176 <USB_CoreInit+0xd6>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 802710c:	687b      	ldr	r3, [r7, #4]
 802710e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8027110:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8027114:	687b      	ldr	r3, [r7, #4]
 8027116:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The UTMI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8027118:	687b      	ldr	r3, [r7, #4]
 802711a:	68da      	ldr	r2, [r3, #12]
 802711c:	4b2a      	ldr	r3, [pc, #168]	; (80271c8 <USB_CoreInit+0x128>)
 802711e:	4013      	ands	r3, r2
 8027120:	687a      	ldr	r2, [r7, #4]
 8027122:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8027124:	687b      	ldr	r3, [r7, #4]
 8027126:	68db      	ldr	r3, [r3, #12]
 8027128:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 802712c:	687b      	ldr	r3, [r7, #4]
 802712e:	60da      	str	r2, [r3, #12]

    /* Select UTMI Interface */
    USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
 8027130:	687b      	ldr	r3, [r7, #4]
 8027132:	68db      	ldr	r3, [r3, #12]
 8027134:	f023 0210 	bic.w	r2, r3, #16
 8027138:	687b      	ldr	r3, [r7, #4]
 802713a:	60da      	str	r2, [r3, #12]
#ifdef USBPHYC
    /* Enable USB HS PHY */
    USBx->GCCFG |= USB_OTG_GCCFG_PHYHSEN;
 802713c:	687b      	ldr	r3, [r7, #4]
 802713e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8027140:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8027144:	687b      	ldr	r3, [r7, #4]
 8027146:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enables control of a High Speed USB PHY */
    if (USB_HS_PHYCInit(USBx) != HAL_OK)
 8027148:	6878      	ldr	r0, [r7, #4]
 802714a:	f001 fc91 	bl	8028a70 <USB_HS_PHYCInit>
 802714e:	4603      	mov	r3, r0
 8027150:	2b00      	cmp	r3, #0
 8027152:	d001      	beq.n	8027158 <USB_CoreInit+0xb8>
    {
      return HAL_ERROR;
 8027154:	2301      	movs	r3, #1
 8027156:	e02f      	b.n	80271b8 <USB_CoreInit+0x118>
    }
#endif /* USBPHYC */

    if (cfg.use_external_vbus == 1U)
 8027158:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802715a:	2b01      	cmp	r3, #1
 802715c:	d105      	bne.n	802716a <USB_CoreInit+0xca>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 802715e:	687b      	ldr	r3, [r7, #4]
 8027160:	68db      	ldr	r3, [r3, #12]
 8027162:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8027166:	687b      	ldr	r3, [r7, #4]
 8027168:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 802716a:	6878      	ldr	r0, [r7, #4]
 802716c:	f001 fc4c 	bl	8028a08 <USB_CoreReset>
 8027170:	4603      	mov	r3, r0
 8027172:	73fb      	strb	r3, [r7, #15]
 8027174:	e010      	b.n	8027198 <USB_CoreInit+0xf8>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8027176:	687b      	ldr	r3, [r7, #4]
 8027178:	68db      	ldr	r3, [r3, #12]
 802717a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 802717e:	687b      	ldr	r3, [r7, #4]
 8027180:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8027182:	6878      	ldr	r0, [r7, #4]
 8027184:	f001 fc40 	bl	8028a08 <USB_CoreReset>
 8027188:	4603      	mov	r3, r0
 802718a:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 802718c:	687b      	ldr	r3, [r7, #4]
 802718e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8027190:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8027194:	687b      	ldr	r3, [r7, #4]
 8027196:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8027198:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802719a:	2b01      	cmp	r3, #1
 802719c:	d10b      	bne.n	80271b6 <USB_CoreInit+0x116>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 802719e:	687b      	ldr	r3, [r7, #4]
 80271a0:	689b      	ldr	r3, [r3, #8]
 80271a2:	f043 0206 	orr.w	r2, r3, #6
 80271a6:	687b      	ldr	r3, [r7, #4]
 80271a8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80271aa:	687b      	ldr	r3, [r7, #4]
 80271ac:	689b      	ldr	r3, [r3, #8]
 80271ae:	f043 0220 	orr.w	r2, r3, #32
 80271b2:	687b      	ldr	r3, [r7, #4]
 80271b4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80271b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80271b8:	4618      	mov	r0, r3
 80271ba:	3710      	adds	r7, #16
 80271bc:	46bd      	mov	sp, r7
 80271be:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80271c2:	b004      	add	sp, #16
 80271c4:	4770      	bx	lr
 80271c6:	bf00      	nop
 80271c8:	ffbdffbf 	.word	0xffbdffbf

080271cc <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80271cc:	b480      	push	{r7}
 80271ce:	b087      	sub	sp, #28
 80271d0:	af00      	add	r7, sp, #0
 80271d2:	60f8      	str	r0, [r7, #12]
 80271d4:	60b9      	str	r1, [r7, #8]
 80271d6:	4613      	mov	r3, r2
 80271d8:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80271da:	79fb      	ldrb	r3, [r7, #7]
 80271dc:	2b02      	cmp	r3, #2
 80271de:	d165      	bne.n	80272ac <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80271e0:	68bb      	ldr	r3, [r7, #8]
 80271e2:	4a41      	ldr	r2, [pc, #260]	; (80272e8 <USB_SetTurnaroundTime+0x11c>)
 80271e4:	4293      	cmp	r3, r2
 80271e6:	d906      	bls.n	80271f6 <USB_SetTurnaroundTime+0x2a>
 80271e8:	68bb      	ldr	r3, [r7, #8]
 80271ea:	4a40      	ldr	r2, [pc, #256]	; (80272ec <USB_SetTurnaroundTime+0x120>)
 80271ec:	4293      	cmp	r3, r2
 80271ee:	d202      	bcs.n	80271f6 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80271f0:	230f      	movs	r3, #15
 80271f2:	617b      	str	r3, [r7, #20]
 80271f4:	e062      	b.n	80272bc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80271f6:	68bb      	ldr	r3, [r7, #8]
 80271f8:	4a3c      	ldr	r2, [pc, #240]	; (80272ec <USB_SetTurnaroundTime+0x120>)
 80271fa:	4293      	cmp	r3, r2
 80271fc:	d306      	bcc.n	802720c <USB_SetTurnaroundTime+0x40>
 80271fe:	68bb      	ldr	r3, [r7, #8]
 8027200:	4a3b      	ldr	r2, [pc, #236]	; (80272f0 <USB_SetTurnaroundTime+0x124>)
 8027202:	4293      	cmp	r3, r2
 8027204:	d202      	bcs.n	802720c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8027206:	230e      	movs	r3, #14
 8027208:	617b      	str	r3, [r7, #20]
 802720a:	e057      	b.n	80272bc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 802720c:	68bb      	ldr	r3, [r7, #8]
 802720e:	4a38      	ldr	r2, [pc, #224]	; (80272f0 <USB_SetTurnaroundTime+0x124>)
 8027210:	4293      	cmp	r3, r2
 8027212:	d306      	bcc.n	8027222 <USB_SetTurnaroundTime+0x56>
 8027214:	68bb      	ldr	r3, [r7, #8]
 8027216:	4a37      	ldr	r2, [pc, #220]	; (80272f4 <USB_SetTurnaroundTime+0x128>)
 8027218:	4293      	cmp	r3, r2
 802721a:	d202      	bcs.n	8027222 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 802721c:	230d      	movs	r3, #13
 802721e:	617b      	str	r3, [r7, #20]
 8027220:	e04c      	b.n	80272bc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8027222:	68bb      	ldr	r3, [r7, #8]
 8027224:	4a33      	ldr	r2, [pc, #204]	; (80272f4 <USB_SetTurnaroundTime+0x128>)
 8027226:	4293      	cmp	r3, r2
 8027228:	d306      	bcc.n	8027238 <USB_SetTurnaroundTime+0x6c>
 802722a:	68bb      	ldr	r3, [r7, #8]
 802722c:	4a32      	ldr	r2, [pc, #200]	; (80272f8 <USB_SetTurnaroundTime+0x12c>)
 802722e:	4293      	cmp	r3, r2
 8027230:	d802      	bhi.n	8027238 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8027232:	230c      	movs	r3, #12
 8027234:	617b      	str	r3, [r7, #20]
 8027236:	e041      	b.n	80272bc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8027238:	68bb      	ldr	r3, [r7, #8]
 802723a:	4a2f      	ldr	r2, [pc, #188]	; (80272f8 <USB_SetTurnaroundTime+0x12c>)
 802723c:	4293      	cmp	r3, r2
 802723e:	d906      	bls.n	802724e <USB_SetTurnaroundTime+0x82>
 8027240:	68bb      	ldr	r3, [r7, #8]
 8027242:	4a2e      	ldr	r2, [pc, #184]	; (80272fc <USB_SetTurnaroundTime+0x130>)
 8027244:	4293      	cmp	r3, r2
 8027246:	d802      	bhi.n	802724e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8027248:	230b      	movs	r3, #11
 802724a:	617b      	str	r3, [r7, #20]
 802724c:	e036      	b.n	80272bc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 802724e:	68bb      	ldr	r3, [r7, #8]
 8027250:	4a2a      	ldr	r2, [pc, #168]	; (80272fc <USB_SetTurnaroundTime+0x130>)
 8027252:	4293      	cmp	r3, r2
 8027254:	d906      	bls.n	8027264 <USB_SetTurnaroundTime+0x98>
 8027256:	68bb      	ldr	r3, [r7, #8]
 8027258:	4a29      	ldr	r2, [pc, #164]	; (8027300 <USB_SetTurnaroundTime+0x134>)
 802725a:	4293      	cmp	r3, r2
 802725c:	d802      	bhi.n	8027264 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 802725e:	230a      	movs	r3, #10
 8027260:	617b      	str	r3, [r7, #20]
 8027262:	e02b      	b.n	80272bc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8027264:	68bb      	ldr	r3, [r7, #8]
 8027266:	4a26      	ldr	r2, [pc, #152]	; (8027300 <USB_SetTurnaroundTime+0x134>)
 8027268:	4293      	cmp	r3, r2
 802726a:	d906      	bls.n	802727a <USB_SetTurnaroundTime+0xae>
 802726c:	68bb      	ldr	r3, [r7, #8]
 802726e:	4a25      	ldr	r2, [pc, #148]	; (8027304 <USB_SetTurnaroundTime+0x138>)
 8027270:	4293      	cmp	r3, r2
 8027272:	d202      	bcs.n	802727a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8027274:	2309      	movs	r3, #9
 8027276:	617b      	str	r3, [r7, #20]
 8027278:	e020      	b.n	80272bc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 802727a:	68bb      	ldr	r3, [r7, #8]
 802727c:	4a21      	ldr	r2, [pc, #132]	; (8027304 <USB_SetTurnaroundTime+0x138>)
 802727e:	4293      	cmp	r3, r2
 8027280:	d306      	bcc.n	8027290 <USB_SetTurnaroundTime+0xc4>
 8027282:	68bb      	ldr	r3, [r7, #8]
 8027284:	4a20      	ldr	r2, [pc, #128]	; (8027308 <USB_SetTurnaroundTime+0x13c>)
 8027286:	4293      	cmp	r3, r2
 8027288:	d802      	bhi.n	8027290 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 802728a:	2308      	movs	r3, #8
 802728c:	617b      	str	r3, [r7, #20]
 802728e:	e015      	b.n	80272bc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8027290:	68bb      	ldr	r3, [r7, #8]
 8027292:	4a1d      	ldr	r2, [pc, #116]	; (8027308 <USB_SetTurnaroundTime+0x13c>)
 8027294:	4293      	cmp	r3, r2
 8027296:	d906      	bls.n	80272a6 <USB_SetTurnaroundTime+0xda>
 8027298:	68bb      	ldr	r3, [r7, #8]
 802729a:	4a1c      	ldr	r2, [pc, #112]	; (802730c <USB_SetTurnaroundTime+0x140>)
 802729c:	4293      	cmp	r3, r2
 802729e:	d202      	bcs.n	80272a6 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80272a0:	2307      	movs	r3, #7
 80272a2:	617b      	str	r3, [r7, #20]
 80272a4:	e00a      	b.n	80272bc <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80272a6:	2306      	movs	r3, #6
 80272a8:	617b      	str	r3, [r7, #20]
 80272aa:	e007      	b.n	80272bc <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80272ac:	79fb      	ldrb	r3, [r7, #7]
 80272ae:	2b00      	cmp	r3, #0
 80272b0:	d102      	bne.n	80272b8 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80272b2:	2309      	movs	r3, #9
 80272b4:	617b      	str	r3, [r7, #20]
 80272b6:	e001      	b.n	80272bc <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80272b8:	2309      	movs	r3, #9
 80272ba:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80272bc:	68fb      	ldr	r3, [r7, #12]
 80272be:	68db      	ldr	r3, [r3, #12]
 80272c0:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80272c4:	68fb      	ldr	r3, [r7, #12]
 80272c6:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80272c8:	68fb      	ldr	r3, [r7, #12]
 80272ca:	68da      	ldr	r2, [r3, #12]
 80272cc:	697b      	ldr	r3, [r7, #20]
 80272ce:	029b      	lsls	r3, r3, #10
 80272d0:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80272d4:	431a      	orrs	r2, r3
 80272d6:	68fb      	ldr	r3, [r7, #12]
 80272d8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80272da:	2300      	movs	r3, #0
}
 80272dc:	4618      	mov	r0, r3
 80272de:	371c      	adds	r7, #28
 80272e0:	46bd      	mov	sp, r7
 80272e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80272e6:	4770      	bx	lr
 80272e8:	00d8acbf 	.word	0x00d8acbf
 80272ec:	00e4e1c0 	.word	0x00e4e1c0
 80272f0:	00f42400 	.word	0x00f42400
 80272f4:	01067380 	.word	0x01067380
 80272f8:	011a499f 	.word	0x011a499f
 80272fc:	01312cff 	.word	0x01312cff
 8027300:	014ca43f 	.word	0x014ca43f
 8027304:	016e3600 	.word	0x016e3600
 8027308:	01a6ab1f 	.word	0x01a6ab1f
 802730c:	01e84800 	.word	0x01e84800

08027310 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8027310:	b480      	push	{r7}
 8027312:	b083      	sub	sp, #12
 8027314:	af00      	add	r7, sp, #0
 8027316:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8027318:	687b      	ldr	r3, [r7, #4]
 802731a:	689b      	ldr	r3, [r3, #8]
 802731c:	f043 0201 	orr.w	r2, r3, #1
 8027320:	687b      	ldr	r3, [r7, #4]
 8027322:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8027324:	2300      	movs	r3, #0
}
 8027326:	4618      	mov	r0, r3
 8027328:	370c      	adds	r7, #12
 802732a:	46bd      	mov	sp, r7
 802732c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027330:	4770      	bx	lr

08027332 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8027332:	b480      	push	{r7}
 8027334:	b083      	sub	sp, #12
 8027336:	af00      	add	r7, sp, #0
 8027338:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 802733a:	687b      	ldr	r3, [r7, #4]
 802733c:	689b      	ldr	r3, [r3, #8]
 802733e:	f023 0201 	bic.w	r2, r3, #1
 8027342:	687b      	ldr	r3, [r7, #4]
 8027344:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8027346:	2300      	movs	r3, #0
}
 8027348:	4618      	mov	r0, r3
 802734a:	370c      	adds	r7, #12
 802734c:	46bd      	mov	sp, r7
 802734e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027352:	4770      	bx	lr

08027354 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8027354:	b580      	push	{r7, lr}
 8027356:	b084      	sub	sp, #16
 8027358:	af00      	add	r7, sp, #0
 802735a:	6078      	str	r0, [r7, #4]
 802735c:	460b      	mov	r3, r1
 802735e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8027360:	2300      	movs	r3, #0
 8027362:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8027364:	687b      	ldr	r3, [r7, #4]
 8027366:	68db      	ldr	r3, [r3, #12]
 8027368:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 802736c:	687b      	ldr	r3, [r7, #4]
 802736e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8027370:	78fb      	ldrb	r3, [r7, #3]
 8027372:	2b01      	cmp	r3, #1
 8027374:	d115      	bne.n	80273a2 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8027376:	687b      	ldr	r3, [r7, #4]
 8027378:	68db      	ldr	r3, [r3, #12]
 802737a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 802737e:	687b      	ldr	r3, [r7, #4]
 8027380:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8027382:	2001      	movs	r0, #1
 8027384:	f7fa fdc8 	bl	8021f18 <HAL_Delay>
      ms++;
 8027388:	68fb      	ldr	r3, [r7, #12]
 802738a:	3301      	adds	r3, #1
 802738c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 802738e:	6878      	ldr	r0, [r7, #4]
 8027390:	f001 faaa 	bl	80288e8 <USB_GetMode>
 8027394:	4603      	mov	r3, r0
 8027396:	2b01      	cmp	r3, #1
 8027398:	d01e      	beq.n	80273d8 <USB_SetCurrentMode+0x84>
 802739a:	68fb      	ldr	r3, [r7, #12]
 802739c:	2b31      	cmp	r3, #49	; 0x31
 802739e:	d9f0      	bls.n	8027382 <USB_SetCurrentMode+0x2e>
 80273a0:	e01a      	b.n	80273d8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80273a2:	78fb      	ldrb	r3, [r7, #3]
 80273a4:	2b00      	cmp	r3, #0
 80273a6:	d115      	bne.n	80273d4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80273a8:	687b      	ldr	r3, [r7, #4]
 80273aa:	68db      	ldr	r3, [r3, #12]
 80273ac:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80273b0:	687b      	ldr	r3, [r7, #4]
 80273b2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80273b4:	2001      	movs	r0, #1
 80273b6:	f7fa fdaf 	bl	8021f18 <HAL_Delay>
      ms++;
 80273ba:	68fb      	ldr	r3, [r7, #12]
 80273bc:	3301      	adds	r3, #1
 80273be:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80273c0:	6878      	ldr	r0, [r7, #4]
 80273c2:	f001 fa91 	bl	80288e8 <USB_GetMode>
 80273c6:	4603      	mov	r3, r0
 80273c8:	2b00      	cmp	r3, #0
 80273ca:	d005      	beq.n	80273d8 <USB_SetCurrentMode+0x84>
 80273cc:	68fb      	ldr	r3, [r7, #12]
 80273ce:	2b31      	cmp	r3, #49	; 0x31
 80273d0:	d9f0      	bls.n	80273b4 <USB_SetCurrentMode+0x60>
 80273d2:	e001      	b.n	80273d8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80273d4:	2301      	movs	r3, #1
 80273d6:	e005      	b.n	80273e4 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80273d8:	68fb      	ldr	r3, [r7, #12]
 80273da:	2b32      	cmp	r3, #50	; 0x32
 80273dc:	d101      	bne.n	80273e2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80273de:	2301      	movs	r3, #1
 80273e0:	e000      	b.n	80273e4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80273e2:	2300      	movs	r3, #0
}
 80273e4:	4618      	mov	r0, r3
 80273e6:	3710      	adds	r7, #16
 80273e8:	46bd      	mov	sp, r7
 80273ea:	bd80      	pop	{r7, pc}

080273ec <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80273ec:	b084      	sub	sp, #16
 80273ee:	b580      	push	{r7, lr}
 80273f0:	b086      	sub	sp, #24
 80273f2:	af00      	add	r7, sp, #0
 80273f4:	6078      	str	r0, [r7, #4]
 80273f6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80273fa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80273fe:	2300      	movs	r3, #0
 8027400:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8027402:	687b      	ldr	r3, [r7, #4]
 8027404:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8027406:	2300      	movs	r3, #0
 8027408:	613b      	str	r3, [r7, #16]
 802740a:	e009      	b.n	8027420 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 802740c:	687a      	ldr	r2, [r7, #4]
 802740e:	693b      	ldr	r3, [r7, #16]
 8027410:	3340      	adds	r3, #64	; 0x40
 8027412:	009b      	lsls	r3, r3, #2
 8027414:	4413      	add	r3, r2
 8027416:	2200      	movs	r2, #0
 8027418:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 802741a:	693b      	ldr	r3, [r7, #16]
 802741c:	3301      	adds	r3, #1
 802741e:	613b      	str	r3, [r7, #16]
 8027420:	693b      	ldr	r3, [r7, #16]
 8027422:	2b0e      	cmp	r3, #14
 8027424:	d9f2      	bls.n	802740c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8027426:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8027428:	2b00      	cmp	r3, #0
 802742a:	d11c      	bne.n	8027466 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 802742c:	68fb      	ldr	r3, [r7, #12]
 802742e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8027432:	685b      	ldr	r3, [r3, #4]
 8027434:	68fa      	ldr	r2, [r7, #12]
 8027436:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 802743a:	f043 0302 	orr.w	r3, r3, #2
 802743e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8027440:	687b      	ldr	r3, [r7, #4]
 8027442:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8027444:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8027448:	687b      	ldr	r3, [r7, #4]
 802744a:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 802744c:	687b      	ldr	r3, [r7, #4]
 802744e:	681b      	ldr	r3, [r3, #0]
 8027450:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8027454:	687b      	ldr	r3, [r7, #4]
 8027456:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8027458:	687b      	ldr	r3, [r7, #4]
 802745a:	681b      	ldr	r3, [r3, #0]
 802745c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8027460:	687b      	ldr	r3, [r7, #4]
 8027462:	601a      	str	r2, [r3, #0]
 8027464:	e005      	b.n	8027472 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8027466:	687b      	ldr	r3, [r7, #4]
 8027468:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802746a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 802746e:	687b      	ldr	r3, [r7, #4]
 8027470:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8027472:	68fb      	ldr	r3, [r7, #12]
 8027474:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8027478:	461a      	mov	r2, r3
 802747a:	2300      	movs	r3, #0
 802747c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 802747e:	68fb      	ldr	r3, [r7, #12]
 8027480:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8027484:	4619      	mov	r1, r3
 8027486:	68fb      	ldr	r3, [r7, #12]
 8027488:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 802748c:	461a      	mov	r2, r3
 802748e:	680b      	ldr	r3, [r1, #0]
 8027490:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8027492:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8027494:	2b01      	cmp	r3, #1
 8027496:	d10c      	bne.n	80274b2 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8027498:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802749a:	2b00      	cmp	r3, #0
 802749c:	d104      	bne.n	80274a8 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 802749e:	2100      	movs	r1, #0
 80274a0:	6878      	ldr	r0, [r7, #4]
 80274a2:	f000 f975 	bl	8027790 <USB_SetDevSpeed>
 80274a6:	e018      	b.n	80274da <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80274a8:	2101      	movs	r1, #1
 80274aa:	6878      	ldr	r0, [r7, #4]
 80274ac:	f000 f970 	bl	8027790 <USB_SetDevSpeed>
 80274b0:	e013      	b.n	80274da <USB_DevInit+0xee>
    }
  }
#if defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx)
  else if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 80274b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80274b4:	2b03      	cmp	r3, #3
 80274b6:	d10c      	bne.n	80274d2 <USB_DevInit+0xe6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80274b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80274ba:	2b00      	cmp	r3, #0
 80274bc:	d104      	bne.n	80274c8 <USB_DevInit+0xdc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80274be:	2100      	movs	r1, #0
 80274c0:	6878      	ldr	r0, [r7, #4]
 80274c2:	f000 f965 	bl	8027790 <USB_SetDevSpeed>
 80274c6:	e008      	b.n	80274da <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80274c8:	2101      	movs	r1, #1
 80274ca:	6878      	ldr	r0, [r7, #4]
 80274cc:	f000 f960 	bl	8027790 <USB_SetDevSpeed>
 80274d0:	e003      	b.n	80274da <USB_DevInit+0xee>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80274d2:	2103      	movs	r1, #3
 80274d4:	6878      	ldr	r0, [r7, #4]
 80274d6:	f000 f95b 	bl	8027790 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80274da:	2110      	movs	r1, #16
 80274dc:	6878      	ldr	r0, [r7, #4]
 80274de:	f000 f8f3 	bl	80276c8 <USB_FlushTxFifo>
 80274e2:	4603      	mov	r3, r0
 80274e4:	2b00      	cmp	r3, #0
 80274e6:	d001      	beq.n	80274ec <USB_DevInit+0x100>
  {
    ret = HAL_ERROR;
 80274e8:	2301      	movs	r3, #1
 80274ea:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80274ec:	6878      	ldr	r0, [r7, #4]
 80274ee:	f000 f91f 	bl	8027730 <USB_FlushRxFifo>
 80274f2:	4603      	mov	r3, r0
 80274f4:	2b00      	cmp	r3, #0
 80274f6:	d001      	beq.n	80274fc <USB_DevInit+0x110>
  {
    ret = HAL_ERROR;
 80274f8:	2301      	movs	r3, #1
 80274fa:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80274fc:	68fb      	ldr	r3, [r7, #12]
 80274fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8027502:	461a      	mov	r2, r3
 8027504:	2300      	movs	r3, #0
 8027506:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8027508:	68fb      	ldr	r3, [r7, #12]
 802750a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 802750e:	461a      	mov	r2, r3
 8027510:	2300      	movs	r3, #0
 8027512:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8027514:	68fb      	ldr	r3, [r7, #12]
 8027516:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 802751a:	461a      	mov	r2, r3
 802751c:	2300      	movs	r3, #0
 802751e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8027520:	2300      	movs	r3, #0
 8027522:	613b      	str	r3, [r7, #16]
 8027524:	e043      	b.n	80275ae <USB_DevInit+0x1c2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8027526:	693b      	ldr	r3, [r7, #16]
 8027528:	015a      	lsls	r2, r3, #5
 802752a:	68fb      	ldr	r3, [r7, #12]
 802752c:	4413      	add	r3, r2
 802752e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8027532:	681b      	ldr	r3, [r3, #0]
 8027534:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8027538:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 802753c:	d118      	bne.n	8027570 <USB_DevInit+0x184>
    {
      if (i == 0U)
 802753e:	693b      	ldr	r3, [r7, #16]
 8027540:	2b00      	cmp	r3, #0
 8027542:	d10a      	bne.n	802755a <USB_DevInit+0x16e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8027544:	693b      	ldr	r3, [r7, #16]
 8027546:	015a      	lsls	r2, r3, #5
 8027548:	68fb      	ldr	r3, [r7, #12]
 802754a:	4413      	add	r3, r2
 802754c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8027550:	461a      	mov	r2, r3
 8027552:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8027556:	6013      	str	r3, [r2, #0]
 8027558:	e013      	b.n	8027582 <USB_DevInit+0x196>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 802755a:	693b      	ldr	r3, [r7, #16]
 802755c:	015a      	lsls	r2, r3, #5
 802755e:	68fb      	ldr	r3, [r7, #12]
 8027560:	4413      	add	r3, r2
 8027562:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8027566:	461a      	mov	r2, r3
 8027568:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 802756c:	6013      	str	r3, [r2, #0]
 802756e:	e008      	b.n	8027582 <USB_DevInit+0x196>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8027570:	693b      	ldr	r3, [r7, #16]
 8027572:	015a      	lsls	r2, r3, #5
 8027574:	68fb      	ldr	r3, [r7, #12]
 8027576:	4413      	add	r3, r2
 8027578:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802757c:	461a      	mov	r2, r3
 802757e:	2300      	movs	r3, #0
 8027580:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8027582:	693b      	ldr	r3, [r7, #16]
 8027584:	015a      	lsls	r2, r3, #5
 8027586:	68fb      	ldr	r3, [r7, #12]
 8027588:	4413      	add	r3, r2
 802758a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802758e:	461a      	mov	r2, r3
 8027590:	2300      	movs	r3, #0
 8027592:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8027594:	693b      	ldr	r3, [r7, #16]
 8027596:	015a      	lsls	r2, r3, #5
 8027598:	68fb      	ldr	r3, [r7, #12]
 802759a:	4413      	add	r3, r2
 802759c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80275a0:	461a      	mov	r2, r3
 80275a2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80275a6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80275a8:	693b      	ldr	r3, [r7, #16]
 80275aa:	3301      	adds	r3, #1
 80275ac:	613b      	str	r3, [r7, #16]
 80275ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80275b0:	693a      	ldr	r2, [r7, #16]
 80275b2:	429a      	cmp	r2, r3
 80275b4:	d3b7      	bcc.n	8027526 <USB_DevInit+0x13a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80275b6:	2300      	movs	r3, #0
 80275b8:	613b      	str	r3, [r7, #16]
 80275ba:	e043      	b.n	8027644 <USB_DevInit+0x258>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80275bc:	693b      	ldr	r3, [r7, #16]
 80275be:	015a      	lsls	r2, r3, #5
 80275c0:	68fb      	ldr	r3, [r7, #12]
 80275c2:	4413      	add	r3, r2
 80275c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80275c8:	681b      	ldr	r3, [r3, #0]
 80275ca:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80275ce:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80275d2:	d118      	bne.n	8027606 <USB_DevInit+0x21a>
    {
      if (i == 0U)
 80275d4:	693b      	ldr	r3, [r7, #16]
 80275d6:	2b00      	cmp	r3, #0
 80275d8:	d10a      	bne.n	80275f0 <USB_DevInit+0x204>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80275da:	693b      	ldr	r3, [r7, #16]
 80275dc:	015a      	lsls	r2, r3, #5
 80275de:	68fb      	ldr	r3, [r7, #12]
 80275e0:	4413      	add	r3, r2
 80275e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80275e6:	461a      	mov	r2, r3
 80275e8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80275ec:	6013      	str	r3, [r2, #0]
 80275ee:	e013      	b.n	8027618 <USB_DevInit+0x22c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80275f0:	693b      	ldr	r3, [r7, #16]
 80275f2:	015a      	lsls	r2, r3, #5
 80275f4:	68fb      	ldr	r3, [r7, #12]
 80275f6:	4413      	add	r3, r2
 80275f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80275fc:	461a      	mov	r2, r3
 80275fe:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8027602:	6013      	str	r3, [r2, #0]
 8027604:	e008      	b.n	8027618 <USB_DevInit+0x22c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8027606:	693b      	ldr	r3, [r7, #16]
 8027608:	015a      	lsls	r2, r3, #5
 802760a:	68fb      	ldr	r3, [r7, #12]
 802760c:	4413      	add	r3, r2
 802760e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8027612:	461a      	mov	r2, r3
 8027614:	2300      	movs	r3, #0
 8027616:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8027618:	693b      	ldr	r3, [r7, #16]
 802761a:	015a      	lsls	r2, r3, #5
 802761c:	68fb      	ldr	r3, [r7, #12]
 802761e:	4413      	add	r3, r2
 8027620:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8027624:	461a      	mov	r2, r3
 8027626:	2300      	movs	r3, #0
 8027628:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 802762a:	693b      	ldr	r3, [r7, #16]
 802762c:	015a      	lsls	r2, r3, #5
 802762e:	68fb      	ldr	r3, [r7, #12]
 8027630:	4413      	add	r3, r2
 8027632:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8027636:	461a      	mov	r2, r3
 8027638:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 802763c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 802763e:	693b      	ldr	r3, [r7, #16]
 8027640:	3301      	adds	r3, #1
 8027642:	613b      	str	r3, [r7, #16]
 8027644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8027646:	693a      	ldr	r2, [r7, #16]
 8027648:	429a      	cmp	r2, r3
 802764a:	d3b7      	bcc.n	80275bc <USB_DevInit+0x1d0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 802764c:	68fb      	ldr	r3, [r7, #12]
 802764e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8027652:	691b      	ldr	r3, [r3, #16]
 8027654:	68fa      	ldr	r2, [r7, #12]
 8027656:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 802765a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 802765e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8027660:	687b      	ldr	r3, [r7, #4]
 8027662:	2200      	movs	r2, #0
 8027664:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8027666:	687b      	ldr	r3, [r7, #4]
 8027668:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 802766c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 802766e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8027670:	2b00      	cmp	r3, #0
 8027672:	d105      	bne.n	8027680 <USB_DevInit+0x294>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8027674:	687b      	ldr	r3, [r7, #4]
 8027676:	699b      	ldr	r3, [r3, #24]
 8027678:	f043 0210 	orr.w	r2, r3, #16
 802767c:	687b      	ldr	r3, [r7, #4]
 802767e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8027680:	687b      	ldr	r3, [r7, #4]
 8027682:	699a      	ldr	r2, [r3, #24]
 8027684:	4b0e      	ldr	r3, [pc, #56]	; (80276c0 <USB_DevInit+0x2d4>)
 8027686:	4313      	orrs	r3, r2
 8027688:	687a      	ldr	r2, [r7, #4]
 802768a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 802768c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 802768e:	2b00      	cmp	r3, #0
 8027690:	d005      	beq.n	802769e <USB_DevInit+0x2b2>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8027692:	687b      	ldr	r3, [r7, #4]
 8027694:	699b      	ldr	r3, [r3, #24]
 8027696:	f043 0208 	orr.w	r2, r3, #8
 802769a:	687b      	ldr	r3, [r7, #4]
 802769c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 802769e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80276a0:	2b01      	cmp	r3, #1
 80276a2:	d105      	bne.n	80276b0 <USB_DevInit+0x2c4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80276a4:	687b      	ldr	r3, [r7, #4]
 80276a6:	699a      	ldr	r2, [r3, #24]
 80276a8:	4b06      	ldr	r3, [pc, #24]	; (80276c4 <USB_DevInit+0x2d8>)
 80276aa:	4313      	orrs	r3, r2
 80276ac:	687a      	ldr	r2, [r7, #4]
 80276ae:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80276b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80276b2:	4618      	mov	r0, r3
 80276b4:	3718      	adds	r7, #24
 80276b6:	46bd      	mov	sp, r7
 80276b8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80276bc:	b004      	add	sp, #16
 80276be:	4770      	bx	lr
 80276c0:	803c3800 	.word	0x803c3800
 80276c4:	40000004 	.word	0x40000004

080276c8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80276c8:	b480      	push	{r7}
 80276ca:	b085      	sub	sp, #20
 80276cc:	af00      	add	r7, sp, #0
 80276ce:	6078      	str	r0, [r7, #4]
 80276d0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80276d2:	2300      	movs	r3, #0
 80276d4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80276d6:	68fb      	ldr	r3, [r7, #12]
 80276d8:	3301      	adds	r3, #1
 80276da:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80276dc:	68fb      	ldr	r3, [r7, #12]
 80276de:	4a13      	ldr	r2, [pc, #76]	; (802772c <USB_FlushTxFifo+0x64>)
 80276e0:	4293      	cmp	r3, r2
 80276e2:	d901      	bls.n	80276e8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80276e4:	2303      	movs	r3, #3
 80276e6:	e01b      	b.n	8027720 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80276e8:	687b      	ldr	r3, [r7, #4]
 80276ea:	691b      	ldr	r3, [r3, #16]
 80276ec:	2b00      	cmp	r3, #0
 80276ee:	daf2      	bge.n	80276d6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80276f0:	2300      	movs	r3, #0
 80276f2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80276f4:	683b      	ldr	r3, [r7, #0]
 80276f6:	019b      	lsls	r3, r3, #6
 80276f8:	f043 0220 	orr.w	r2, r3, #32
 80276fc:	687b      	ldr	r3, [r7, #4]
 80276fe:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8027700:	68fb      	ldr	r3, [r7, #12]
 8027702:	3301      	adds	r3, #1
 8027704:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8027706:	68fb      	ldr	r3, [r7, #12]
 8027708:	4a08      	ldr	r2, [pc, #32]	; (802772c <USB_FlushTxFifo+0x64>)
 802770a:	4293      	cmp	r3, r2
 802770c:	d901      	bls.n	8027712 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 802770e:	2303      	movs	r3, #3
 8027710:	e006      	b.n	8027720 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8027712:	687b      	ldr	r3, [r7, #4]
 8027714:	691b      	ldr	r3, [r3, #16]
 8027716:	f003 0320 	and.w	r3, r3, #32
 802771a:	2b20      	cmp	r3, #32
 802771c:	d0f0      	beq.n	8027700 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 802771e:	2300      	movs	r3, #0
}
 8027720:	4618      	mov	r0, r3
 8027722:	3714      	adds	r7, #20
 8027724:	46bd      	mov	sp, r7
 8027726:	f85d 7b04 	ldr.w	r7, [sp], #4
 802772a:	4770      	bx	lr
 802772c:	00030d40 	.word	0x00030d40

08027730 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8027730:	b480      	push	{r7}
 8027732:	b085      	sub	sp, #20
 8027734:	af00      	add	r7, sp, #0
 8027736:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8027738:	2300      	movs	r3, #0
 802773a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 802773c:	68fb      	ldr	r3, [r7, #12]
 802773e:	3301      	adds	r3, #1
 8027740:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8027742:	68fb      	ldr	r3, [r7, #12]
 8027744:	4a11      	ldr	r2, [pc, #68]	; (802778c <USB_FlushRxFifo+0x5c>)
 8027746:	4293      	cmp	r3, r2
 8027748:	d901      	bls.n	802774e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 802774a:	2303      	movs	r3, #3
 802774c:	e018      	b.n	8027780 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 802774e:	687b      	ldr	r3, [r7, #4]
 8027750:	691b      	ldr	r3, [r3, #16]
 8027752:	2b00      	cmp	r3, #0
 8027754:	daf2      	bge.n	802773c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8027756:	2300      	movs	r3, #0
 8027758:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 802775a:	687b      	ldr	r3, [r7, #4]
 802775c:	2210      	movs	r2, #16
 802775e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8027760:	68fb      	ldr	r3, [r7, #12]
 8027762:	3301      	adds	r3, #1
 8027764:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8027766:	68fb      	ldr	r3, [r7, #12]
 8027768:	4a08      	ldr	r2, [pc, #32]	; (802778c <USB_FlushRxFifo+0x5c>)
 802776a:	4293      	cmp	r3, r2
 802776c:	d901      	bls.n	8027772 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 802776e:	2303      	movs	r3, #3
 8027770:	e006      	b.n	8027780 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8027772:	687b      	ldr	r3, [r7, #4]
 8027774:	691b      	ldr	r3, [r3, #16]
 8027776:	f003 0310 	and.w	r3, r3, #16
 802777a:	2b10      	cmp	r3, #16
 802777c:	d0f0      	beq.n	8027760 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 802777e:	2300      	movs	r3, #0
}
 8027780:	4618      	mov	r0, r3
 8027782:	3714      	adds	r7, #20
 8027784:	46bd      	mov	sp, r7
 8027786:	f85d 7b04 	ldr.w	r7, [sp], #4
 802778a:	4770      	bx	lr
 802778c:	00030d40 	.word	0x00030d40

08027790 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8027790:	b480      	push	{r7}
 8027792:	b085      	sub	sp, #20
 8027794:	af00      	add	r7, sp, #0
 8027796:	6078      	str	r0, [r7, #4]
 8027798:	460b      	mov	r3, r1
 802779a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 802779c:	687b      	ldr	r3, [r7, #4]
 802779e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80277a0:	68fb      	ldr	r3, [r7, #12]
 80277a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80277a6:	681a      	ldr	r2, [r3, #0]
 80277a8:	78fb      	ldrb	r3, [r7, #3]
 80277aa:	68f9      	ldr	r1, [r7, #12]
 80277ac:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80277b0:	4313      	orrs	r3, r2
 80277b2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80277b4:	2300      	movs	r3, #0
}
 80277b6:	4618      	mov	r0, r3
 80277b8:	3714      	adds	r7, #20
 80277ba:	46bd      	mov	sp, r7
 80277bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80277c0:	4770      	bx	lr

080277c2 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80277c2:	b480      	push	{r7}
 80277c4:	b087      	sub	sp, #28
 80277c6:	af00      	add	r7, sp, #0
 80277c8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80277ca:	687b      	ldr	r3, [r7, #4]
 80277cc:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80277ce:	693b      	ldr	r3, [r7, #16]
 80277d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80277d4:	689b      	ldr	r3, [r3, #8]
 80277d6:	f003 0306 	and.w	r3, r3, #6
 80277da:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80277dc:	68fb      	ldr	r3, [r7, #12]
 80277de:	2b00      	cmp	r3, #0
 80277e0:	d102      	bne.n	80277e8 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80277e2:	2300      	movs	r3, #0
 80277e4:	75fb      	strb	r3, [r7, #23]
 80277e6:	e00a      	b.n	80277fe <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80277e8:	68fb      	ldr	r3, [r7, #12]
 80277ea:	2b02      	cmp	r3, #2
 80277ec:	d002      	beq.n	80277f4 <USB_GetDevSpeed+0x32>
 80277ee:	68fb      	ldr	r3, [r7, #12]
 80277f0:	2b06      	cmp	r3, #6
 80277f2:	d102      	bne.n	80277fa <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80277f4:	2302      	movs	r3, #2
 80277f6:	75fb      	strb	r3, [r7, #23]
 80277f8:	e001      	b.n	80277fe <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80277fa:	230f      	movs	r3, #15
 80277fc:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80277fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8027800:	4618      	mov	r0, r3
 8027802:	371c      	adds	r7, #28
 8027804:	46bd      	mov	sp, r7
 8027806:	f85d 7b04 	ldr.w	r7, [sp], #4
 802780a:	4770      	bx	lr

0802780c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 802780c:	b480      	push	{r7}
 802780e:	b085      	sub	sp, #20
 8027810:	af00      	add	r7, sp, #0
 8027812:	6078      	str	r0, [r7, #4]
 8027814:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8027816:	687b      	ldr	r3, [r7, #4]
 8027818:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 802781a:	683b      	ldr	r3, [r7, #0]
 802781c:	781b      	ldrb	r3, [r3, #0]
 802781e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8027820:	683b      	ldr	r3, [r7, #0]
 8027822:	785b      	ldrb	r3, [r3, #1]
 8027824:	2b01      	cmp	r3, #1
 8027826:	d139      	bne.n	802789c <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8027828:	68fb      	ldr	r3, [r7, #12]
 802782a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 802782e:	69da      	ldr	r2, [r3, #28]
 8027830:	683b      	ldr	r3, [r7, #0]
 8027832:	781b      	ldrb	r3, [r3, #0]
 8027834:	f003 030f 	and.w	r3, r3, #15
 8027838:	2101      	movs	r1, #1
 802783a:	fa01 f303 	lsl.w	r3, r1, r3
 802783e:	b29b      	uxth	r3, r3
 8027840:	68f9      	ldr	r1, [r7, #12]
 8027842:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8027846:	4313      	orrs	r3, r2
 8027848:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 802784a:	68bb      	ldr	r3, [r7, #8]
 802784c:	015a      	lsls	r2, r3, #5
 802784e:	68fb      	ldr	r3, [r7, #12]
 8027850:	4413      	add	r3, r2
 8027852:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8027856:	681b      	ldr	r3, [r3, #0]
 8027858:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 802785c:	2b00      	cmp	r3, #0
 802785e:	d153      	bne.n	8027908 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8027860:	68bb      	ldr	r3, [r7, #8]
 8027862:	015a      	lsls	r2, r3, #5
 8027864:	68fb      	ldr	r3, [r7, #12]
 8027866:	4413      	add	r3, r2
 8027868:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802786c:	681a      	ldr	r2, [r3, #0]
 802786e:	683b      	ldr	r3, [r7, #0]
 8027870:	68db      	ldr	r3, [r3, #12]
 8027872:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8027876:	683b      	ldr	r3, [r7, #0]
 8027878:	791b      	ldrb	r3, [r3, #4]
 802787a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 802787c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 802787e:	68bb      	ldr	r3, [r7, #8]
 8027880:	059b      	lsls	r3, r3, #22
 8027882:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8027884:	431a      	orrs	r2, r3
 8027886:	68bb      	ldr	r3, [r7, #8]
 8027888:	0159      	lsls	r1, r3, #5
 802788a:	68fb      	ldr	r3, [r7, #12]
 802788c:	440b      	add	r3, r1
 802788e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8027892:	4619      	mov	r1, r3
 8027894:	4b20      	ldr	r3, [pc, #128]	; (8027918 <USB_ActivateEndpoint+0x10c>)
 8027896:	4313      	orrs	r3, r2
 8027898:	600b      	str	r3, [r1, #0]
 802789a:	e035      	b.n	8027908 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 802789c:	68fb      	ldr	r3, [r7, #12]
 802789e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80278a2:	69da      	ldr	r2, [r3, #28]
 80278a4:	683b      	ldr	r3, [r7, #0]
 80278a6:	781b      	ldrb	r3, [r3, #0]
 80278a8:	f003 030f 	and.w	r3, r3, #15
 80278ac:	2101      	movs	r1, #1
 80278ae:	fa01 f303 	lsl.w	r3, r1, r3
 80278b2:	041b      	lsls	r3, r3, #16
 80278b4:	68f9      	ldr	r1, [r7, #12]
 80278b6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80278ba:	4313      	orrs	r3, r2
 80278bc:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80278be:	68bb      	ldr	r3, [r7, #8]
 80278c0:	015a      	lsls	r2, r3, #5
 80278c2:	68fb      	ldr	r3, [r7, #12]
 80278c4:	4413      	add	r3, r2
 80278c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80278ca:	681b      	ldr	r3, [r3, #0]
 80278cc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80278d0:	2b00      	cmp	r3, #0
 80278d2:	d119      	bne.n	8027908 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80278d4:	68bb      	ldr	r3, [r7, #8]
 80278d6:	015a      	lsls	r2, r3, #5
 80278d8:	68fb      	ldr	r3, [r7, #12]
 80278da:	4413      	add	r3, r2
 80278dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80278e0:	681a      	ldr	r2, [r3, #0]
 80278e2:	683b      	ldr	r3, [r7, #0]
 80278e4:	68db      	ldr	r3, [r3, #12]
 80278e6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80278ea:	683b      	ldr	r3, [r7, #0]
 80278ec:	791b      	ldrb	r3, [r3, #4]
 80278ee:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80278f0:	430b      	orrs	r3, r1
 80278f2:	431a      	orrs	r2, r3
 80278f4:	68bb      	ldr	r3, [r7, #8]
 80278f6:	0159      	lsls	r1, r3, #5
 80278f8:	68fb      	ldr	r3, [r7, #12]
 80278fa:	440b      	add	r3, r1
 80278fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8027900:	4619      	mov	r1, r3
 8027902:	4b05      	ldr	r3, [pc, #20]	; (8027918 <USB_ActivateEndpoint+0x10c>)
 8027904:	4313      	orrs	r3, r2
 8027906:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8027908:	2300      	movs	r3, #0
}
 802790a:	4618      	mov	r0, r3
 802790c:	3714      	adds	r7, #20
 802790e:	46bd      	mov	sp, r7
 8027910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027914:	4770      	bx	lr
 8027916:	bf00      	nop
 8027918:	10008000 	.word	0x10008000

0802791c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 802791c:	b480      	push	{r7}
 802791e:	b085      	sub	sp, #20
 8027920:	af00      	add	r7, sp, #0
 8027922:	6078      	str	r0, [r7, #4]
 8027924:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8027926:	687b      	ldr	r3, [r7, #4]
 8027928:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 802792a:	683b      	ldr	r3, [r7, #0]
 802792c:	781b      	ldrb	r3, [r3, #0]
 802792e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8027930:	683b      	ldr	r3, [r7, #0]
 8027932:	785b      	ldrb	r3, [r3, #1]
 8027934:	2b01      	cmp	r3, #1
 8027936:	d161      	bne.n	80279fc <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8027938:	68bb      	ldr	r3, [r7, #8]
 802793a:	015a      	lsls	r2, r3, #5
 802793c:	68fb      	ldr	r3, [r7, #12]
 802793e:	4413      	add	r3, r2
 8027940:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8027944:	681b      	ldr	r3, [r3, #0]
 8027946:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 802794a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 802794e:	d11f      	bne.n	8027990 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8027950:	68bb      	ldr	r3, [r7, #8]
 8027952:	015a      	lsls	r2, r3, #5
 8027954:	68fb      	ldr	r3, [r7, #12]
 8027956:	4413      	add	r3, r2
 8027958:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802795c:	681b      	ldr	r3, [r3, #0]
 802795e:	68ba      	ldr	r2, [r7, #8]
 8027960:	0151      	lsls	r1, r2, #5
 8027962:	68fa      	ldr	r2, [r7, #12]
 8027964:	440a      	add	r2, r1
 8027966:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 802796a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 802796e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8027970:	68bb      	ldr	r3, [r7, #8]
 8027972:	015a      	lsls	r2, r3, #5
 8027974:	68fb      	ldr	r3, [r7, #12]
 8027976:	4413      	add	r3, r2
 8027978:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802797c:	681b      	ldr	r3, [r3, #0]
 802797e:	68ba      	ldr	r2, [r7, #8]
 8027980:	0151      	lsls	r1, r2, #5
 8027982:	68fa      	ldr	r2, [r7, #12]
 8027984:	440a      	add	r2, r1
 8027986:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 802798a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 802798e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8027990:	68fb      	ldr	r3, [r7, #12]
 8027992:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8027996:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8027998:	683b      	ldr	r3, [r7, #0]
 802799a:	781b      	ldrb	r3, [r3, #0]
 802799c:	f003 030f 	and.w	r3, r3, #15
 80279a0:	2101      	movs	r1, #1
 80279a2:	fa01 f303 	lsl.w	r3, r1, r3
 80279a6:	b29b      	uxth	r3, r3
 80279a8:	43db      	mvns	r3, r3
 80279aa:	68f9      	ldr	r1, [r7, #12]
 80279ac:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80279b0:	4013      	ands	r3, r2
 80279b2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80279b4:	68fb      	ldr	r3, [r7, #12]
 80279b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80279ba:	69da      	ldr	r2, [r3, #28]
 80279bc:	683b      	ldr	r3, [r7, #0]
 80279be:	781b      	ldrb	r3, [r3, #0]
 80279c0:	f003 030f 	and.w	r3, r3, #15
 80279c4:	2101      	movs	r1, #1
 80279c6:	fa01 f303 	lsl.w	r3, r1, r3
 80279ca:	b29b      	uxth	r3, r3
 80279cc:	43db      	mvns	r3, r3
 80279ce:	68f9      	ldr	r1, [r7, #12]
 80279d0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80279d4:	4013      	ands	r3, r2
 80279d6:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80279d8:	68bb      	ldr	r3, [r7, #8]
 80279da:	015a      	lsls	r2, r3, #5
 80279dc:	68fb      	ldr	r3, [r7, #12]
 80279de:	4413      	add	r3, r2
 80279e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80279e4:	681a      	ldr	r2, [r3, #0]
 80279e6:	68bb      	ldr	r3, [r7, #8]
 80279e8:	0159      	lsls	r1, r3, #5
 80279ea:	68fb      	ldr	r3, [r7, #12]
 80279ec:	440b      	add	r3, r1
 80279ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80279f2:	4619      	mov	r1, r3
 80279f4:	4b35      	ldr	r3, [pc, #212]	; (8027acc <USB_DeactivateEndpoint+0x1b0>)
 80279f6:	4013      	ands	r3, r2
 80279f8:	600b      	str	r3, [r1, #0]
 80279fa:	e060      	b.n	8027abe <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80279fc:	68bb      	ldr	r3, [r7, #8]
 80279fe:	015a      	lsls	r2, r3, #5
 8027a00:	68fb      	ldr	r3, [r7, #12]
 8027a02:	4413      	add	r3, r2
 8027a04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8027a08:	681b      	ldr	r3, [r3, #0]
 8027a0a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8027a0e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8027a12:	d11f      	bne.n	8027a54 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8027a14:	68bb      	ldr	r3, [r7, #8]
 8027a16:	015a      	lsls	r2, r3, #5
 8027a18:	68fb      	ldr	r3, [r7, #12]
 8027a1a:	4413      	add	r3, r2
 8027a1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8027a20:	681b      	ldr	r3, [r3, #0]
 8027a22:	68ba      	ldr	r2, [r7, #8]
 8027a24:	0151      	lsls	r1, r2, #5
 8027a26:	68fa      	ldr	r2, [r7, #12]
 8027a28:	440a      	add	r2, r1
 8027a2a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8027a2e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8027a32:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8027a34:	68bb      	ldr	r3, [r7, #8]
 8027a36:	015a      	lsls	r2, r3, #5
 8027a38:	68fb      	ldr	r3, [r7, #12]
 8027a3a:	4413      	add	r3, r2
 8027a3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8027a40:	681b      	ldr	r3, [r3, #0]
 8027a42:	68ba      	ldr	r2, [r7, #8]
 8027a44:	0151      	lsls	r1, r2, #5
 8027a46:	68fa      	ldr	r2, [r7, #12]
 8027a48:	440a      	add	r2, r1
 8027a4a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8027a4e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8027a52:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8027a54:	68fb      	ldr	r3, [r7, #12]
 8027a56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8027a5a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8027a5c:	683b      	ldr	r3, [r7, #0]
 8027a5e:	781b      	ldrb	r3, [r3, #0]
 8027a60:	f003 030f 	and.w	r3, r3, #15
 8027a64:	2101      	movs	r1, #1
 8027a66:	fa01 f303 	lsl.w	r3, r1, r3
 8027a6a:	041b      	lsls	r3, r3, #16
 8027a6c:	43db      	mvns	r3, r3
 8027a6e:	68f9      	ldr	r1, [r7, #12]
 8027a70:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8027a74:	4013      	ands	r3, r2
 8027a76:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8027a78:	68fb      	ldr	r3, [r7, #12]
 8027a7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8027a7e:	69da      	ldr	r2, [r3, #28]
 8027a80:	683b      	ldr	r3, [r7, #0]
 8027a82:	781b      	ldrb	r3, [r3, #0]
 8027a84:	f003 030f 	and.w	r3, r3, #15
 8027a88:	2101      	movs	r1, #1
 8027a8a:	fa01 f303 	lsl.w	r3, r1, r3
 8027a8e:	041b      	lsls	r3, r3, #16
 8027a90:	43db      	mvns	r3, r3
 8027a92:	68f9      	ldr	r1, [r7, #12]
 8027a94:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8027a98:	4013      	ands	r3, r2
 8027a9a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8027a9c:	68bb      	ldr	r3, [r7, #8]
 8027a9e:	015a      	lsls	r2, r3, #5
 8027aa0:	68fb      	ldr	r3, [r7, #12]
 8027aa2:	4413      	add	r3, r2
 8027aa4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8027aa8:	681a      	ldr	r2, [r3, #0]
 8027aaa:	68bb      	ldr	r3, [r7, #8]
 8027aac:	0159      	lsls	r1, r3, #5
 8027aae:	68fb      	ldr	r3, [r7, #12]
 8027ab0:	440b      	add	r3, r1
 8027ab2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8027ab6:	4619      	mov	r1, r3
 8027ab8:	4b05      	ldr	r3, [pc, #20]	; (8027ad0 <USB_DeactivateEndpoint+0x1b4>)
 8027aba:	4013      	ands	r3, r2
 8027abc:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8027abe:	2300      	movs	r3, #0
}
 8027ac0:	4618      	mov	r0, r3
 8027ac2:	3714      	adds	r7, #20
 8027ac4:	46bd      	mov	sp, r7
 8027ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027aca:	4770      	bx	lr
 8027acc:	ec337800 	.word	0xec337800
 8027ad0:	eff37800 	.word	0xeff37800

08027ad4 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8027ad4:	b580      	push	{r7, lr}
 8027ad6:	b08a      	sub	sp, #40	; 0x28
 8027ad8:	af02      	add	r7, sp, #8
 8027ada:	60f8      	str	r0, [r7, #12]
 8027adc:	60b9      	str	r1, [r7, #8]
 8027ade:	4613      	mov	r3, r2
 8027ae0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8027ae2:	68fb      	ldr	r3, [r7, #12]
 8027ae4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8027ae6:	68bb      	ldr	r3, [r7, #8]
 8027ae8:	781b      	ldrb	r3, [r3, #0]
 8027aea:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8027aec:	68bb      	ldr	r3, [r7, #8]
 8027aee:	785b      	ldrb	r3, [r3, #1]
 8027af0:	2b01      	cmp	r3, #1
 8027af2:	f040 8163 	bne.w	8027dbc <USB_EPStartXfer+0x2e8>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8027af6:	68bb      	ldr	r3, [r7, #8]
 8027af8:	699b      	ldr	r3, [r3, #24]
 8027afa:	2b00      	cmp	r3, #0
 8027afc:	d132      	bne.n	8027b64 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8027afe:	69bb      	ldr	r3, [r7, #24]
 8027b00:	015a      	lsls	r2, r3, #5
 8027b02:	69fb      	ldr	r3, [r7, #28]
 8027b04:	4413      	add	r3, r2
 8027b06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8027b0a:	691a      	ldr	r2, [r3, #16]
 8027b0c:	69bb      	ldr	r3, [r7, #24]
 8027b0e:	0159      	lsls	r1, r3, #5
 8027b10:	69fb      	ldr	r3, [r7, #28]
 8027b12:	440b      	add	r3, r1
 8027b14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8027b18:	4619      	mov	r1, r3
 8027b1a:	4ba5      	ldr	r3, [pc, #660]	; (8027db0 <USB_EPStartXfer+0x2dc>)
 8027b1c:	4013      	ands	r3, r2
 8027b1e:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8027b20:	69bb      	ldr	r3, [r7, #24]
 8027b22:	015a      	lsls	r2, r3, #5
 8027b24:	69fb      	ldr	r3, [r7, #28]
 8027b26:	4413      	add	r3, r2
 8027b28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8027b2c:	691b      	ldr	r3, [r3, #16]
 8027b2e:	69ba      	ldr	r2, [r7, #24]
 8027b30:	0151      	lsls	r1, r2, #5
 8027b32:	69fa      	ldr	r2, [r7, #28]
 8027b34:	440a      	add	r2, r1
 8027b36:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8027b3a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8027b3e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8027b40:	69bb      	ldr	r3, [r7, #24]
 8027b42:	015a      	lsls	r2, r3, #5
 8027b44:	69fb      	ldr	r3, [r7, #28]
 8027b46:	4413      	add	r3, r2
 8027b48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8027b4c:	691a      	ldr	r2, [r3, #16]
 8027b4e:	69bb      	ldr	r3, [r7, #24]
 8027b50:	0159      	lsls	r1, r3, #5
 8027b52:	69fb      	ldr	r3, [r7, #28]
 8027b54:	440b      	add	r3, r1
 8027b56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8027b5a:	4619      	mov	r1, r3
 8027b5c:	4b95      	ldr	r3, [pc, #596]	; (8027db4 <USB_EPStartXfer+0x2e0>)
 8027b5e:	4013      	ands	r3, r2
 8027b60:	610b      	str	r3, [r1, #16]
 8027b62:	e074      	b.n	8027c4e <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8027b64:	69bb      	ldr	r3, [r7, #24]
 8027b66:	015a      	lsls	r2, r3, #5
 8027b68:	69fb      	ldr	r3, [r7, #28]
 8027b6a:	4413      	add	r3, r2
 8027b6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8027b70:	691a      	ldr	r2, [r3, #16]
 8027b72:	69bb      	ldr	r3, [r7, #24]
 8027b74:	0159      	lsls	r1, r3, #5
 8027b76:	69fb      	ldr	r3, [r7, #28]
 8027b78:	440b      	add	r3, r1
 8027b7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8027b7e:	4619      	mov	r1, r3
 8027b80:	4b8c      	ldr	r3, [pc, #560]	; (8027db4 <USB_EPStartXfer+0x2e0>)
 8027b82:	4013      	ands	r3, r2
 8027b84:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8027b86:	69bb      	ldr	r3, [r7, #24]
 8027b88:	015a      	lsls	r2, r3, #5
 8027b8a:	69fb      	ldr	r3, [r7, #28]
 8027b8c:	4413      	add	r3, r2
 8027b8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8027b92:	691a      	ldr	r2, [r3, #16]
 8027b94:	69bb      	ldr	r3, [r7, #24]
 8027b96:	0159      	lsls	r1, r3, #5
 8027b98:	69fb      	ldr	r3, [r7, #28]
 8027b9a:	440b      	add	r3, r1
 8027b9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8027ba0:	4619      	mov	r1, r3
 8027ba2:	4b83      	ldr	r3, [pc, #524]	; (8027db0 <USB_EPStartXfer+0x2dc>)
 8027ba4:	4013      	ands	r3, r2
 8027ba6:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8027ba8:	69bb      	ldr	r3, [r7, #24]
 8027baa:	015a      	lsls	r2, r3, #5
 8027bac:	69fb      	ldr	r3, [r7, #28]
 8027bae:	4413      	add	r3, r2
 8027bb0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8027bb4:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8027bb6:	68bb      	ldr	r3, [r7, #8]
 8027bb8:	6999      	ldr	r1, [r3, #24]
 8027bba:	68bb      	ldr	r3, [r7, #8]
 8027bbc:	68db      	ldr	r3, [r3, #12]
 8027bbe:	440b      	add	r3, r1
 8027bc0:	1e59      	subs	r1, r3, #1
 8027bc2:	68bb      	ldr	r3, [r7, #8]
 8027bc4:	68db      	ldr	r3, [r3, #12]
 8027bc6:	fbb1 f3f3 	udiv	r3, r1, r3
 8027bca:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8027bcc:	4b7a      	ldr	r3, [pc, #488]	; (8027db8 <USB_EPStartXfer+0x2e4>)
 8027bce:	400b      	ands	r3, r1
 8027bd0:	69b9      	ldr	r1, [r7, #24]
 8027bd2:	0148      	lsls	r0, r1, #5
 8027bd4:	69f9      	ldr	r1, [r7, #28]
 8027bd6:	4401      	add	r1, r0
 8027bd8:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8027bdc:	4313      	orrs	r3, r2
 8027bde:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8027be0:	69bb      	ldr	r3, [r7, #24]
 8027be2:	015a      	lsls	r2, r3, #5
 8027be4:	69fb      	ldr	r3, [r7, #28]
 8027be6:	4413      	add	r3, r2
 8027be8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8027bec:	691a      	ldr	r2, [r3, #16]
 8027bee:	68bb      	ldr	r3, [r7, #8]
 8027bf0:	699b      	ldr	r3, [r3, #24]
 8027bf2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8027bf6:	69b9      	ldr	r1, [r7, #24]
 8027bf8:	0148      	lsls	r0, r1, #5
 8027bfa:	69f9      	ldr	r1, [r7, #28]
 8027bfc:	4401      	add	r1, r0
 8027bfe:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8027c02:	4313      	orrs	r3, r2
 8027c04:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8027c06:	68bb      	ldr	r3, [r7, #8]
 8027c08:	791b      	ldrb	r3, [r3, #4]
 8027c0a:	2b01      	cmp	r3, #1
 8027c0c:	d11f      	bne.n	8027c4e <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8027c0e:	69bb      	ldr	r3, [r7, #24]
 8027c10:	015a      	lsls	r2, r3, #5
 8027c12:	69fb      	ldr	r3, [r7, #28]
 8027c14:	4413      	add	r3, r2
 8027c16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8027c1a:	691b      	ldr	r3, [r3, #16]
 8027c1c:	69ba      	ldr	r2, [r7, #24]
 8027c1e:	0151      	lsls	r1, r2, #5
 8027c20:	69fa      	ldr	r2, [r7, #28]
 8027c22:	440a      	add	r2, r1
 8027c24:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8027c28:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8027c2c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8027c2e:	69bb      	ldr	r3, [r7, #24]
 8027c30:	015a      	lsls	r2, r3, #5
 8027c32:	69fb      	ldr	r3, [r7, #28]
 8027c34:	4413      	add	r3, r2
 8027c36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8027c3a:	691b      	ldr	r3, [r3, #16]
 8027c3c:	69ba      	ldr	r2, [r7, #24]
 8027c3e:	0151      	lsls	r1, r2, #5
 8027c40:	69fa      	ldr	r2, [r7, #28]
 8027c42:	440a      	add	r2, r1
 8027c44:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8027c48:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8027c4c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8027c4e:	79fb      	ldrb	r3, [r7, #7]
 8027c50:	2b01      	cmp	r3, #1
 8027c52:	d14b      	bne.n	8027cec <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8027c54:	68bb      	ldr	r3, [r7, #8]
 8027c56:	695b      	ldr	r3, [r3, #20]
 8027c58:	2b00      	cmp	r3, #0
 8027c5a:	d009      	beq.n	8027c70 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8027c5c:	69bb      	ldr	r3, [r7, #24]
 8027c5e:	015a      	lsls	r2, r3, #5
 8027c60:	69fb      	ldr	r3, [r7, #28]
 8027c62:	4413      	add	r3, r2
 8027c64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8027c68:	461a      	mov	r2, r3
 8027c6a:	68bb      	ldr	r3, [r7, #8]
 8027c6c:	695b      	ldr	r3, [r3, #20]
 8027c6e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8027c70:	68bb      	ldr	r3, [r7, #8]
 8027c72:	791b      	ldrb	r3, [r3, #4]
 8027c74:	2b01      	cmp	r3, #1
 8027c76:	d128      	bne.n	8027cca <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8027c78:	69fb      	ldr	r3, [r7, #28]
 8027c7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8027c7e:	689b      	ldr	r3, [r3, #8]
 8027c80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8027c84:	2b00      	cmp	r3, #0
 8027c86:	d110      	bne.n	8027caa <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8027c88:	69bb      	ldr	r3, [r7, #24]
 8027c8a:	015a      	lsls	r2, r3, #5
 8027c8c:	69fb      	ldr	r3, [r7, #28]
 8027c8e:	4413      	add	r3, r2
 8027c90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8027c94:	681b      	ldr	r3, [r3, #0]
 8027c96:	69ba      	ldr	r2, [r7, #24]
 8027c98:	0151      	lsls	r1, r2, #5
 8027c9a:	69fa      	ldr	r2, [r7, #28]
 8027c9c:	440a      	add	r2, r1
 8027c9e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8027ca2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8027ca6:	6013      	str	r3, [r2, #0]
 8027ca8:	e00f      	b.n	8027cca <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8027caa:	69bb      	ldr	r3, [r7, #24]
 8027cac:	015a      	lsls	r2, r3, #5
 8027cae:	69fb      	ldr	r3, [r7, #28]
 8027cb0:	4413      	add	r3, r2
 8027cb2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8027cb6:	681b      	ldr	r3, [r3, #0]
 8027cb8:	69ba      	ldr	r2, [r7, #24]
 8027cba:	0151      	lsls	r1, r2, #5
 8027cbc:	69fa      	ldr	r2, [r7, #28]
 8027cbe:	440a      	add	r2, r1
 8027cc0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8027cc4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8027cc8:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8027cca:	69bb      	ldr	r3, [r7, #24]
 8027ccc:	015a      	lsls	r2, r3, #5
 8027cce:	69fb      	ldr	r3, [r7, #28]
 8027cd0:	4413      	add	r3, r2
 8027cd2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8027cd6:	681b      	ldr	r3, [r3, #0]
 8027cd8:	69ba      	ldr	r2, [r7, #24]
 8027cda:	0151      	lsls	r1, r2, #5
 8027cdc:	69fa      	ldr	r2, [r7, #28]
 8027cde:	440a      	add	r2, r1
 8027ce0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8027ce4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8027ce8:	6013      	str	r3, [r2, #0]
 8027cea:	e137      	b.n	8027f5c <USB_EPStartXfer+0x488>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8027cec:	69bb      	ldr	r3, [r7, #24]
 8027cee:	015a      	lsls	r2, r3, #5
 8027cf0:	69fb      	ldr	r3, [r7, #28]
 8027cf2:	4413      	add	r3, r2
 8027cf4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8027cf8:	681b      	ldr	r3, [r3, #0]
 8027cfa:	69ba      	ldr	r2, [r7, #24]
 8027cfc:	0151      	lsls	r1, r2, #5
 8027cfe:	69fa      	ldr	r2, [r7, #28]
 8027d00:	440a      	add	r2, r1
 8027d02:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8027d06:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8027d0a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8027d0c:	68bb      	ldr	r3, [r7, #8]
 8027d0e:	791b      	ldrb	r3, [r3, #4]
 8027d10:	2b01      	cmp	r3, #1
 8027d12:	d015      	beq.n	8027d40 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8027d14:	68bb      	ldr	r3, [r7, #8]
 8027d16:	699b      	ldr	r3, [r3, #24]
 8027d18:	2b00      	cmp	r3, #0
 8027d1a:	f000 811f 	beq.w	8027f5c <USB_EPStartXfer+0x488>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8027d1e:	69fb      	ldr	r3, [r7, #28]
 8027d20:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8027d24:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8027d26:	68bb      	ldr	r3, [r7, #8]
 8027d28:	781b      	ldrb	r3, [r3, #0]
 8027d2a:	f003 030f 	and.w	r3, r3, #15
 8027d2e:	2101      	movs	r1, #1
 8027d30:	fa01 f303 	lsl.w	r3, r1, r3
 8027d34:	69f9      	ldr	r1, [r7, #28]
 8027d36:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8027d3a:	4313      	orrs	r3, r2
 8027d3c:	634b      	str	r3, [r1, #52]	; 0x34
 8027d3e:	e10d      	b.n	8027f5c <USB_EPStartXfer+0x488>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8027d40:	69fb      	ldr	r3, [r7, #28]
 8027d42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8027d46:	689b      	ldr	r3, [r3, #8]
 8027d48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8027d4c:	2b00      	cmp	r3, #0
 8027d4e:	d110      	bne.n	8027d72 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8027d50:	69bb      	ldr	r3, [r7, #24]
 8027d52:	015a      	lsls	r2, r3, #5
 8027d54:	69fb      	ldr	r3, [r7, #28]
 8027d56:	4413      	add	r3, r2
 8027d58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8027d5c:	681b      	ldr	r3, [r3, #0]
 8027d5e:	69ba      	ldr	r2, [r7, #24]
 8027d60:	0151      	lsls	r1, r2, #5
 8027d62:	69fa      	ldr	r2, [r7, #28]
 8027d64:	440a      	add	r2, r1
 8027d66:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8027d6a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8027d6e:	6013      	str	r3, [r2, #0]
 8027d70:	e00f      	b.n	8027d92 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8027d72:	69bb      	ldr	r3, [r7, #24]
 8027d74:	015a      	lsls	r2, r3, #5
 8027d76:	69fb      	ldr	r3, [r7, #28]
 8027d78:	4413      	add	r3, r2
 8027d7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8027d7e:	681b      	ldr	r3, [r3, #0]
 8027d80:	69ba      	ldr	r2, [r7, #24]
 8027d82:	0151      	lsls	r1, r2, #5
 8027d84:	69fa      	ldr	r2, [r7, #28]
 8027d86:	440a      	add	r2, r1
 8027d88:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8027d8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8027d90:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8027d92:	68bb      	ldr	r3, [r7, #8]
 8027d94:	6919      	ldr	r1, [r3, #16]
 8027d96:	68bb      	ldr	r3, [r7, #8]
 8027d98:	781a      	ldrb	r2, [r3, #0]
 8027d9a:	68bb      	ldr	r3, [r7, #8]
 8027d9c:	699b      	ldr	r3, [r3, #24]
 8027d9e:	b298      	uxth	r0, r3
 8027da0:	79fb      	ldrb	r3, [r7, #7]
 8027da2:	9300      	str	r3, [sp, #0]
 8027da4:	4603      	mov	r3, r0
 8027da6:	68f8      	ldr	r0, [r7, #12]
 8027da8:	f000 faea 	bl	8028380 <USB_WritePacket>
 8027dac:	e0d6      	b.n	8027f5c <USB_EPStartXfer+0x488>
 8027dae:	bf00      	nop
 8027db0:	e007ffff 	.word	0xe007ffff
 8027db4:	fff80000 	.word	0xfff80000
 8027db8:	1ff80000 	.word	0x1ff80000
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8027dbc:	69bb      	ldr	r3, [r7, #24]
 8027dbe:	015a      	lsls	r2, r3, #5
 8027dc0:	69fb      	ldr	r3, [r7, #28]
 8027dc2:	4413      	add	r3, r2
 8027dc4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8027dc8:	691a      	ldr	r2, [r3, #16]
 8027dca:	69bb      	ldr	r3, [r7, #24]
 8027dcc:	0159      	lsls	r1, r3, #5
 8027dce:	69fb      	ldr	r3, [r7, #28]
 8027dd0:	440b      	add	r3, r1
 8027dd2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8027dd6:	4619      	mov	r1, r3
 8027dd8:	4b63      	ldr	r3, [pc, #396]	; (8027f68 <USB_EPStartXfer+0x494>)
 8027dda:	4013      	ands	r3, r2
 8027ddc:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8027dde:	69bb      	ldr	r3, [r7, #24]
 8027de0:	015a      	lsls	r2, r3, #5
 8027de2:	69fb      	ldr	r3, [r7, #28]
 8027de4:	4413      	add	r3, r2
 8027de6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8027dea:	691a      	ldr	r2, [r3, #16]
 8027dec:	69bb      	ldr	r3, [r7, #24]
 8027dee:	0159      	lsls	r1, r3, #5
 8027df0:	69fb      	ldr	r3, [r7, #28]
 8027df2:	440b      	add	r3, r1
 8027df4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8027df8:	4619      	mov	r1, r3
 8027dfa:	4b5c      	ldr	r3, [pc, #368]	; (8027f6c <USB_EPStartXfer+0x498>)
 8027dfc:	4013      	ands	r3, r2
 8027dfe:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len == 0U)
 8027e00:	68bb      	ldr	r3, [r7, #8]
 8027e02:	699b      	ldr	r3, [r3, #24]
 8027e04:	2b00      	cmp	r3, #0
 8027e06:	d123      	bne.n	8027e50 <USB_EPStartXfer+0x37c>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8027e08:	69bb      	ldr	r3, [r7, #24]
 8027e0a:	015a      	lsls	r2, r3, #5
 8027e0c:	69fb      	ldr	r3, [r7, #28]
 8027e0e:	4413      	add	r3, r2
 8027e10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8027e14:	691a      	ldr	r2, [r3, #16]
 8027e16:	68bb      	ldr	r3, [r7, #8]
 8027e18:	68db      	ldr	r3, [r3, #12]
 8027e1a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8027e1e:	69b9      	ldr	r1, [r7, #24]
 8027e20:	0148      	lsls	r0, r1, #5
 8027e22:	69f9      	ldr	r1, [r7, #28]
 8027e24:	4401      	add	r1, r0
 8027e26:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8027e2a:	4313      	orrs	r3, r2
 8027e2c:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8027e2e:	69bb      	ldr	r3, [r7, #24]
 8027e30:	015a      	lsls	r2, r3, #5
 8027e32:	69fb      	ldr	r3, [r7, #28]
 8027e34:	4413      	add	r3, r2
 8027e36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8027e3a:	691b      	ldr	r3, [r3, #16]
 8027e3c:	69ba      	ldr	r2, [r7, #24]
 8027e3e:	0151      	lsls	r1, r2, #5
 8027e40:	69fa      	ldr	r2, [r7, #28]
 8027e42:	440a      	add	r2, r1
 8027e44:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8027e48:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8027e4c:	6113      	str	r3, [r2, #16]
 8027e4e:	e037      	b.n	8027ec0 <USB_EPStartXfer+0x3ec>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8027e50:	68bb      	ldr	r3, [r7, #8]
 8027e52:	699a      	ldr	r2, [r3, #24]
 8027e54:	68bb      	ldr	r3, [r7, #8]
 8027e56:	68db      	ldr	r3, [r3, #12]
 8027e58:	4413      	add	r3, r2
 8027e5a:	1e5a      	subs	r2, r3, #1
 8027e5c:	68bb      	ldr	r3, [r7, #8]
 8027e5e:	68db      	ldr	r3, [r3, #12]
 8027e60:	fbb2 f3f3 	udiv	r3, r2, r3
 8027e64:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8027e66:	68bb      	ldr	r3, [r7, #8]
 8027e68:	68db      	ldr	r3, [r3, #12]
 8027e6a:	8afa      	ldrh	r2, [r7, #22]
 8027e6c:	fb03 f202 	mul.w	r2, r3, r2
 8027e70:	68bb      	ldr	r3, [r7, #8]
 8027e72:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8027e74:	69bb      	ldr	r3, [r7, #24]
 8027e76:	015a      	lsls	r2, r3, #5
 8027e78:	69fb      	ldr	r3, [r7, #28]
 8027e7a:	4413      	add	r3, r2
 8027e7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8027e80:	691a      	ldr	r2, [r3, #16]
 8027e82:	8afb      	ldrh	r3, [r7, #22]
 8027e84:	04d9      	lsls	r1, r3, #19
 8027e86:	4b3a      	ldr	r3, [pc, #232]	; (8027f70 <USB_EPStartXfer+0x49c>)
 8027e88:	400b      	ands	r3, r1
 8027e8a:	69b9      	ldr	r1, [r7, #24]
 8027e8c:	0148      	lsls	r0, r1, #5
 8027e8e:	69f9      	ldr	r1, [r7, #28]
 8027e90:	4401      	add	r1, r0
 8027e92:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8027e96:	4313      	orrs	r3, r2
 8027e98:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8027e9a:	69bb      	ldr	r3, [r7, #24]
 8027e9c:	015a      	lsls	r2, r3, #5
 8027e9e:	69fb      	ldr	r3, [r7, #28]
 8027ea0:	4413      	add	r3, r2
 8027ea2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8027ea6:	691a      	ldr	r2, [r3, #16]
 8027ea8:	68bb      	ldr	r3, [r7, #8]
 8027eaa:	69db      	ldr	r3, [r3, #28]
 8027eac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8027eb0:	69b9      	ldr	r1, [r7, #24]
 8027eb2:	0148      	lsls	r0, r1, #5
 8027eb4:	69f9      	ldr	r1, [r7, #28]
 8027eb6:	4401      	add	r1, r0
 8027eb8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8027ebc:	4313      	orrs	r3, r2
 8027ebe:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8027ec0:	79fb      	ldrb	r3, [r7, #7]
 8027ec2:	2b01      	cmp	r3, #1
 8027ec4:	d10d      	bne.n	8027ee2 <USB_EPStartXfer+0x40e>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8027ec6:	68bb      	ldr	r3, [r7, #8]
 8027ec8:	691b      	ldr	r3, [r3, #16]
 8027eca:	2b00      	cmp	r3, #0
 8027ecc:	d009      	beq.n	8027ee2 <USB_EPStartXfer+0x40e>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8027ece:	68bb      	ldr	r3, [r7, #8]
 8027ed0:	6919      	ldr	r1, [r3, #16]
 8027ed2:	69bb      	ldr	r3, [r7, #24]
 8027ed4:	015a      	lsls	r2, r3, #5
 8027ed6:	69fb      	ldr	r3, [r7, #28]
 8027ed8:	4413      	add	r3, r2
 8027eda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8027ede:	460a      	mov	r2, r1
 8027ee0:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8027ee2:	68bb      	ldr	r3, [r7, #8]
 8027ee4:	791b      	ldrb	r3, [r3, #4]
 8027ee6:	2b01      	cmp	r3, #1
 8027ee8:	d128      	bne.n	8027f3c <USB_EPStartXfer+0x468>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8027eea:	69fb      	ldr	r3, [r7, #28]
 8027eec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8027ef0:	689b      	ldr	r3, [r3, #8]
 8027ef2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8027ef6:	2b00      	cmp	r3, #0
 8027ef8:	d110      	bne.n	8027f1c <USB_EPStartXfer+0x448>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8027efa:	69bb      	ldr	r3, [r7, #24]
 8027efc:	015a      	lsls	r2, r3, #5
 8027efe:	69fb      	ldr	r3, [r7, #28]
 8027f00:	4413      	add	r3, r2
 8027f02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8027f06:	681b      	ldr	r3, [r3, #0]
 8027f08:	69ba      	ldr	r2, [r7, #24]
 8027f0a:	0151      	lsls	r1, r2, #5
 8027f0c:	69fa      	ldr	r2, [r7, #28]
 8027f0e:	440a      	add	r2, r1
 8027f10:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8027f14:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8027f18:	6013      	str	r3, [r2, #0]
 8027f1a:	e00f      	b.n	8027f3c <USB_EPStartXfer+0x468>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8027f1c:	69bb      	ldr	r3, [r7, #24]
 8027f1e:	015a      	lsls	r2, r3, #5
 8027f20:	69fb      	ldr	r3, [r7, #28]
 8027f22:	4413      	add	r3, r2
 8027f24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8027f28:	681b      	ldr	r3, [r3, #0]
 8027f2a:	69ba      	ldr	r2, [r7, #24]
 8027f2c:	0151      	lsls	r1, r2, #5
 8027f2e:	69fa      	ldr	r2, [r7, #28]
 8027f30:	440a      	add	r2, r1
 8027f32:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8027f36:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8027f3a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8027f3c:	69bb      	ldr	r3, [r7, #24]
 8027f3e:	015a      	lsls	r2, r3, #5
 8027f40:	69fb      	ldr	r3, [r7, #28]
 8027f42:	4413      	add	r3, r2
 8027f44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8027f48:	681b      	ldr	r3, [r3, #0]
 8027f4a:	69ba      	ldr	r2, [r7, #24]
 8027f4c:	0151      	lsls	r1, r2, #5
 8027f4e:	69fa      	ldr	r2, [r7, #28]
 8027f50:	440a      	add	r2, r1
 8027f52:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8027f56:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8027f5a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8027f5c:	2300      	movs	r3, #0
}
 8027f5e:	4618      	mov	r0, r3
 8027f60:	3720      	adds	r7, #32
 8027f62:	46bd      	mov	sp, r7
 8027f64:	bd80      	pop	{r7, pc}
 8027f66:	bf00      	nop
 8027f68:	fff80000 	.word	0xfff80000
 8027f6c:	e007ffff 	.word	0xe007ffff
 8027f70:	1ff80000 	.word	0x1ff80000

08027f74 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8027f74:	b480      	push	{r7}
 8027f76:	b087      	sub	sp, #28
 8027f78:	af00      	add	r7, sp, #0
 8027f7a:	60f8      	str	r0, [r7, #12]
 8027f7c:	60b9      	str	r1, [r7, #8]
 8027f7e:	4613      	mov	r3, r2
 8027f80:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8027f82:	68fb      	ldr	r3, [r7, #12]
 8027f84:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8027f86:	68bb      	ldr	r3, [r7, #8]
 8027f88:	781b      	ldrb	r3, [r3, #0]
 8027f8a:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8027f8c:	68bb      	ldr	r3, [r7, #8]
 8027f8e:	785b      	ldrb	r3, [r3, #1]
 8027f90:	2b01      	cmp	r3, #1
 8027f92:	f040 80ce 	bne.w	8028132 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8027f96:	68bb      	ldr	r3, [r7, #8]
 8027f98:	699b      	ldr	r3, [r3, #24]
 8027f9a:	2b00      	cmp	r3, #0
 8027f9c:	d132      	bne.n	8028004 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8027f9e:	693b      	ldr	r3, [r7, #16]
 8027fa0:	015a      	lsls	r2, r3, #5
 8027fa2:	697b      	ldr	r3, [r7, #20]
 8027fa4:	4413      	add	r3, r2
 8027fa6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8027faa:	691a      	ldr	r2, [r3, #16]
 8027fac:	693b      	ldr	r3, [r7, #16]
 8027fae:	0159      	lsls	r1, r3, #5
 8027fb0:	697b      	ldr	r3, [r7, #20]
 8027fb2:	440b      	add	r3, r1
 8027fb4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8027fb8:	4619      	mov	r1, r3
 8027fba:	4b9a      	ldr	r3, [pc, #616]	; (8028224 <USB_EP0StartXfer+0x2b0>)
 8027fbc:	4013      	ands	r3, r2
 8027fbe:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8027fc0:	693b      	ldr	r3, [r7, #16]
 8027fc2:	015a      	lsls	r2, r3, #5
 8027fc4:	697b      	ldr	r3, [r7, #20]
 8027fc6:	4413      	add	r3, r2
 8027fc8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8027fcc:	691b      	ldr	r3, [r3, #16]
 8027fce:	693a      	ldr	r2, [r7, #16]
 8027fd0:	0151      	lsls	r1, r2, #5
 8027fd2:	697a      	ldr	r2, [r7, #20]
 8027fd4:	440a      	add	r2, r1
 8027fd6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8027fda:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8027fde:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8027fe0:	693b      	ldr	r3, [r7, #16]
 8027fe2:	015a      	lsls	r2, r3, #5
 8027fe4:	697b      	ldr	r3, [r7, #20]
 8027fe6:	4413      	add	r3, r2
 8027fe8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8027fec:	691a      	ldr	r2, [r3, #16]
 8027fee:	693b      	ldr	r3, [r7, #16]
 8027ff0:	0159      	lsls	r1, r3, #5
 8027ff2:	697b      	ldr	r3, [r7, #20]
 8027ff4:	440b      	add	r3, r1
 8027ff6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8027ffa:	4619      	mov	r1, r3
 8027ffc:	4b8a      	ldr	r3, [pc, #552]	; (8028228 <USB_EP0StartXfer+0x2b4>)
 8027ffe:	4013      	ands	r3, r2
 8028000:	610b      	str	r3, [r1, #16]
 8028002:	e04e      	b.n	80280a2 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8028004:	693b      	ldr	r3, [r7, #16]
 8028006:	015a      	lsls	r2, r3, #5
 8028008:	697b      	ldr	r3, [r7, #20]
 802800a:	4413      	add	r3, r2
 802800c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8028010:	691a      	ldr	r2, [r3, #16]
 8028012:	693b      	ldr	r3, [r7, #16]
 8028014:	0159      	lsls	r1, r3, #5
 8028016:	697b      	ldr	r3, [r7, #20]
 8028018:	440b      	add	r3, r1
 802801a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802801e:	4619      	mov	r1, r3
 8028020:	4b81      	ldr	r3, [pc, #516]	; (8028228 <USB_EP0StartXfer+0x2b4>)
 8028022:	4013      	ands	r3, r2
 8028024:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8028026:	693b      	ldr	r3, [r7, #16]
 8028028:	015a      	lsls	r2, r3, #5
 802802a:	697b      	ldr	r3, [r7, #20]
 802802c:	4413      	add	r3, r2
 802802e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8028032:	691a      	ldr	r2, [r3, #16]
 8028034:	693b      	ldr	r3, [r7, #16]
 8028036:	0159      	lsls	r1, r3, #5
 8028038:	697b      	ldr	r3, [r7, #20]
 802803a:	440b      	add	r3, r1
 802803c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8028040:	4619      	mov	r1, r3
 8028042:	4b78      	ldr	r3, [pc, #480]	; (8028224 <USB_EP0StartXfer+0x2b0>)
 8028044:	4013      	ands	r3, r2
 8028046:	610b      	str	r3, [r1, #16]

      if (ep->xfer_len > ep->maxpacket)
 8028048:	68bb      	ldr	r3, [r7, #8]
 802804a:	699a      	ldr	r2, [r3, #24]
 802804c:	68bb      	ldr	r3, [r7, #8]
 802804e:	68db      	ldr	r3, [r3, #12]
 8028050:	429a      	cmp	r2, r3
 8028052:	d903      	bls.n	802805c <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8028054:	68bb      	ldr	r3, [r7, #8]
 8028056:	68da      	ldr	r2, [r3, #12]
 8028058:	68bb      	ldr	r3, [r7, #8]
 802805a:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 802805c:	693b      	ldr	r3, [r7, #16]
 802805e:	015a      	lsls	r2, r3, #5
 8028060:	697b      	ldr	r3, [r7, #20]
 8028062:	4413      	add	r3, r2
 8028064:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8028068:	691b      	ldr	r3, [r3, #16]
 802806a:	693a      	ldr	r2, [r7, #16]
 802806c:	0151      	lsls	r1, r2, #5
 802806e:	697a      	ldr	r2, [r7, #20]
 8028070:	440a      	add	r2, r1
 8028072:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8028076:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 802807a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 802807c:	693b      	ldr	r3, [r7, #16]
 802807e:	015a      	lsls	r2, r3, #5
 8028080:	697b      	ldr	r3, [r7, #20]
 8028082:	4413      	add	r3, r2
 8028084:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8028088:	691a      	ldr	r2, [r3, #16]
 802808a:	68bb      	ldr	r3, [r7, #8]
 802808c:	699b      	ldr	r3, [r3, #24]
 802808e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8028092:	6939      	ldr	r1, [r7, #16]
 8028094:	0148      	lsls	r0, r1, #5
 8028096:	6979      	ldr	r1, [r7, #20]
 8028098:	4401      	add	r1, r0
 802809a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 802809e:	4313      	orrs	r3, r2
 80280a0:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80280a2:	79fb      	ldrb	r3, [r7, #7]
 80280a4:	2b01      	cmp	r3, #1
 80280a6:	d11e      	bne.n	80280e6 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80280a8:	68bb      	ldr	r3, [r7, #8]
 80280aa:	695b      	ldr	r3, [r3, #20]
 80280ac:	2b00      	cmp	r3, #0
 80280ae:	d009      	beq.n	80280c4 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80280b0:	693b      	ldr	r3, [r7, #16]
 80280b2:	015a      	lsls	r2, r3, #5
 80280b4:	697b      	ldr	r3, [r7, #20]
 80280b6:	4413      	add	r3, r2
 80280b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80280bc:	461a      	mov	r2, r3
 80280be:	68bb      	ldr	r3, [r7, #8]
 80280c0:	695b      	ldr	r3, [r3, #20]
 80280c2:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80280c4:	693b      	ldr	r3, [r7, #16]
 80280c6:	015a      	lsls	r2, r3, #5
 80280c8:	697b      	ldr	r3, [r7, #20]
 80280ca:	4413      	add	r3, r2
 80280cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80280d0:	681b      	ldr	r3, [r3, #0]
 80280d2:	693a      	ldr	r2, [r7, #16]
 80280d4:	0151      	lsls	r1, r2, #5
 80280d6:	697a      	ldr	r2, [r7, #20]
 80280d8:	440a      	add	r2, r1
 80280da:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80280de:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80280e2:	6013      	str	r3, [r2, #0]
 80280e4:	e097      	b.n	8028216 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80280e6:	693b      	ldr	r3, [r7, #16]
 80280e8:	015a      	lsls	r2, r3, #5
 80280ea:	697b      	ldr	r3, [r7, #20]
 80280ec:	4413      	add	r3, r2
 80280ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80280f2:	681b      	ldr	r3, [r3, #0]
 80280f4:	693a      	ldr	r2, [r7, #16]
 80280f6:	0151      	lsls	r1, r2, #5
 80280f8:	697a      	ldr	r2, [r7, #20]
 80280fa:	440a      	add	r2, r1
 80280fc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8028100:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8028104:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8028106:	68bb      	ldr	r3, [r7, #8]
 8028108:	699b      	ldr	r3, [r3, #24]
 802810a:	2b00      	cmp	r3, #0
 802810c:	f000 8083 	beq.w	8028216 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8028110:	697b      	ldr	r3, [r7, #20]
 8028112:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8028116:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8028118:	68bb      	ldr	r3, [r7, #8]
 802811a:	781b      	ldrb	r3, [r3, #0]
 802811c:	f003 030f 	and.w	r3, r3, #15
 8028120:	2101      	movs	r1, #1
 8028122:	fa01 f303 	lsl.w	r3, r1, r3
 8028126:	6979      	ldr	r1, [r7, #20]
 8028128:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 802812c:	4313      	orrs	r3, r2
 802812e:	634b      	str	r3, [r1, #52]	; 0x34
 8028130:	e071      	b.n	8028216 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8028132:	693b      	ldr	r3, [r7, #16]
 8028134:	015a      	lsls	r2, r3, #5
 8028136:	697b      	ldr	r3, [r7, #20]
 8028138:	4413      	add	r3, r2
 802813a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802813e:	691a      	ldr	r2, [r3, #16]
 8028140:	693b      	ldr	r3, [r7, #16]
 8028142:	0159      	lsls	r1, r3, #5
 8028144:	697b      	ldr	r3, [r7, #20]
 8028146:	440b      	add	r3, r1
 8028148:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802814c:	4619      	mov	r1, r3
 802814e:	4b36      	ldr	r3, [pc, #216]	; (8028228 <USB_EP0StartXfer+0x2b4>)
 8028150:	4013      	ands	r3, r2
 8028152:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8028154:	693b      	ldr	r3, [r7, #16]
 8028156:	015a      	lsls	r2, r3, #5
 8028158:	697b      	ldr	r3, [r7, #20]
 802815a:	4413      	add	r3, r2
 802815c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8028160:	691a      	ldr	r2, [r3, #16]
 8028162:	693b      	ldr	r3, [r7, #16]
 8028164:	0159      	lsls	r1, r3, #5
 8028166:	697b      	ldr	r3, [r7, #20]
 8028168:	440b      	add	r3, r1
 802816a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802816e:	4619      	mov	r1, r3
 8028170:	4b2c      	ldr	r3, [pc, #176]	; (8028224 <USB_EP0StartXfer+0x2b0>)
 8028172:	4013      	ands	r3, r2
 8028174:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len > 0U)
 8028176:	68bb      	ldr	r3, [r7, #8]
 8028178:	699b      	ldr	r3, [r3, #24]
 802817a:	2b00      	cmp	r3, #0
 802817c:	d003      	beq.n	8028186 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 802817e:	68bb      	ldr	r3, [r7, #8]
 8028180:	68da      	ldr	r2, [r3, #12]
 8028182:	68bb      	ldr	r3, [r7, #8]
 8028184:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8028186:	68bb      	ldr	r3, [r7, #8]
 8028188:	68da      	ldr	r2, [r3, #12]
 802818a:	68bb      	ldr	r3, [r7, #8]
 802818c:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 802818e:	693b      	ldr	r3, [r7, #16]
 8028190:	015a      	lsls	r2, r3, #5
 8028192:	697b      	ldr	r3, [r7, #20]
 8028194:	4413      	add	r3, r2
 8028196:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802819a:	691b      	ldr	r3, [r3, #16]
 802819c:	693a      	ldr	r2, [r7, #16]
 802819e:	0151      	lsls	r1, r2, #5
 80281a0:	697a      	ldr	r2, [r7, #20]
 80281a2:	440a      	add	r2, r1
 80281a4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80281a8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80281ac:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80281ae:	693b      	ldr	r3, [r7, #16]
 80281b0:	015a      	lsls	r2, r3, #5
 80281b2:	697b      	ldr	r3, [r7, #20]
 80281b4:	4413      	add	r3, r2
 80281b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80281ba:	691a      	ldr	r2, [r3, #16]
 80281bc:	68bb      	ldr	r3, [r7, #8]
 80281be:	69db      	ldr	r3, [r3, #28]
 80281c0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80281c4:	6939      	ldr	r1, [r7, #16]
 80281c6:	0148      	lsls	r0, r1, #5
 80281c8:	6979      	ldr	r1, [r7, #20]
 80281ca:	4401      	add	r1, r0
 80281cc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80281d0:	4313      	orrs	r3, r2
 80281d2:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80281d4:	79fb      	ldrb	r3, [r7, #7]
 80281d6:	2b01      	cmp	r3, #1
 80281d8:	d10d      	bne.n	80281f6 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80281da:	68bb      	ldr	r3, [r7, #8]
 80281dc:	691b      	ldr	r3, [r3, #16]
 80281de:	2b00      	cmp	r3, #0
 80281e0:	d009      	beq.n	80281f6 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80281e2:	68bb      	ldr	r3, [r7, #8]
 80281e4:	6919      	ldr	r1, [r3, #16]
 80281e6:	693b      	ldr	r3, [r7, #16]
 80281e8:	015a      	lsls	r2, r3, #5
 80281ea:	697b      	ldr	r3, [r7, #20]
 80281ec:	4413      	add	r3, r2
 80281ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80281f2:	460a      	mov	r2, r1
 80281f4:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80281f6:	693b      	ldr	r3, [r7, #16]
 80281f8:	015a      	lsls	r2, r3, #5
 80281fa:	697b      	ldr	r3, [r7, #20]
 80281fc:	4413      	add	r3, r2
 80281fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8028202:	681b      	ldr	r3, [r3, #0]
 8028204:	693a      	ldr	r2, [r7, #16]
 8028206:	0151      	lsls	r1, r2, #5
 8028208:	697a      	ldr	r2, [r7, #20]
 802820a:	440a      	add	r2, r1
 802820c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8028210:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8028214:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8028216:	2300      	movs	r3, #0
}
 8028218:	4618      	mov	r0, r3
 802821a:	371c      	adds	r7, #28
 802821c:	46bd      	mov	sp, r7
 802821e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028222:	4770      	bx	lr
 8028224:	e007ffff 	.word	0xe007ffff
 8028228:	fff80000 	.word	0xfff80000

0802822c <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 802822c:	b480      	push	{r7}
 802822e:	b087      	sub	sp, #28
 8028230:	af00      	add	r7, sp, #0
 8028232:	6078      	str	r0, [r7, #4]
 8028234:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8028236:	2300      	movs	r3, #0
 8028238:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 802823a:	2300      	movs	r3, #0
 802823c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 802823e:	687b      	ldr	r3, [r7, #4]
 8028240:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8028242:	683b      	ldr	r3, [r7, #0]
 8028244:	785b      	ldrb	r3, [r3, #1]
 8028246:	2b01      	cmp	r3, #1
 8028248:	d14a      	bne.n	80282e0 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 802824a:	683b      	ldr	r3, [r7, #0]
 802824c:	781b      	ldrb	r3, [r3, #0]
 802824e:	015a      	lsls	r2, r3, #5
 8028250:	693b      	ldr	r3, [r7, #16]
 8028252:	4413      	add	r3, r2
 8028254:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8028258:	681b      	ldr	r3, [r3, #0]
 802825a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 802825e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8028262:	f040 8086 	bne.w	8028372 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8028266:	683b      	ldr	r3, [r7, #0]
 8028268:	781b      	ldrb	r3, [r3, #0]
 802826a:	015a      	lsls	r2, r3, #5
 802826c:	693b      	ldr	r3, [r7, #16]
 802826e:	4413      	add	r3, r2
 8028270:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8028274:	681b      	ldr	r3, [r3, #0]
 8028276:	683a      	ldr	r2, [r7, #0]
 8028278:	7812      	ldrb	r2, [r2, #0]
 802827a:	0151      	lsls	r1, r2, #5
 802827c:	693a      	ldr	r2, [r7, #16]
 802827e:	440a      	add	r2, r1
 8028280:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8028284:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8028288:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 802828a:	683b      	ldr	r3, [r7, #0]
 802828c:	781b      	ldrb	r3, [r3, #0]
 802828e:	015a      	lsls	r2, r3, #5
 8028290:	693b      	ldr	r3, [r7, #16]
 8028292:	4413      	add	r3, r2
 8028294:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8028298:	681b      	ldr	r3, [r3, #0]
 802829a:	683a      	ldr	r2, [r7, #0]
 802829c:	7812      	ldrb	r2, [r2, #0]
 802829e:	0151      	lsls	r1, r2, #5
 80282a0:	693a      	ldr	r2, [r7, #16]
 80282a2:	440a      	add	r2, r1
 80282a4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80282a8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80282ac:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80282ae:	68fb      	ldr	r3, [r7, #12]
 80282b0:	3301      	adds	r3, #1
 80282b2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80282b4:	68fb      	ldr	r3, [r7, #12]
 80282b6:	f242 7210 	movw	r2, #10000	; 0x2710
 80282ba:	4293      	cmp	r3, r2
 80282bc:	d902      	bls.n	80282c4 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80282be:	2301      	movs	r3, #1
 80282c0:	75fb      	strb	r3, [r7, #23]
          break;
 80282c2:	e056      	b.n	8028372 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80282c4:	683b      	ldr	r3, [r7, #0]
 80282c6:	781b      	ldrb	r3, [r3, #0]
 80282c8:	015a      	lsls	r2, r3, #5
 80282ca:	693b      	ldr	r3, [r7, #16]
 80282cc:	4413      	add	r3, r2
 80282ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80282d2:	681b      	ldr	r3, [r3, #0]
 80282d4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80282d8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80282dc:	d0e7      	beq.n	80282ae <USB_EPStopXfer+0x82>
 80282de:	e048      	b.n	8028372 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80282e0:	683b      	ldr	r3, [r7, #0]
 80282e2:	781b      	ldrb	r3, [r3, #0]
 80282e4:	015a      	lsls	r2, r3, #5
 80282e6:	693b      	ldr	r3, [r7, #16]
 80282e8:	4413      	add	r3, r2
 80282ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80282ee:	681b      	ldr	r3, [r3, #0]
 80282f0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80282f4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80282f8:	d13b      	bne.n	8028372 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80282fa:	683b      	ldr	r3, [r7, #0]
 80282fc:	781b      	ldrb	r3, [r3, #0]
 80282fe:	015a      	lsls	r2, r3, #5
 8028300:	693b      	ldr	r3, [r7, #16]
 8028302:	4413      	add	r3, r2
 8028304:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8028308:	681b      	ldr	r3, [r3, #0]
 802830a:	683a      	ldr	r2, [r7, #0]
 802830c:	7812      	ldrb	r2, [r2, #0]
 802830e:	0151      	lsls	r1, r2, #5
 8028310:	693a      	ldr	r2, [r7, #16]
 8028312:	440a      	add	r2, r1
 8028314:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8028318:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 802831c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 802831e:	683b      	ldr	r3, [r7, #0]
 8028320:	781b      	ldrb	r3, [r3, #0]
 8028322:	015a      	lsls	r2, r3, #5
 8028324:	693b      	ldr	r3, [r7, #16]
 8028326:	4413      	add	r3, r2
 8028328:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802832c:	681b      	ldr	r3, [r3, #0]
 802832e:	683a      	ldr	r2, [r7, #0]
 8028330:	7812      	ldrb	r2, [r2, #0]
 8028332:	0151      	lsls	r1, r2, #5
 8028334:	693a      	ldr	r2, [r7, #16]
 8028336:	440a      	add	r2, r1
 8028338:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 802833c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8028340:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8028342:	68fb      	ldr	r3, [r7, #12]
 8028344:	3301      	adds	r3, #1
 8028346:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8028348:	68fb      	ldr	r3, [r7, #12]
 802834a:	f242 7210 	movw	r2, #10000	; 0x2710
 802834e:	4293      	cmp	r3, r2
 8028350:	d902      	bls.n	8028358 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8028352:	2301      	movs	r3, #1
 8028354:	75fb      	strb	r3, [r7, #23]
          break;
 8028356:	e00c      	b.n	8028372 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8028358:	683b      	ldr	r3, [r7, #0]
 802835a:	781b      	ldrb	r3, [r3, #0]
 802835c:	015a      	lsls	r2, r3, #5
 802835e:	693b      	ldr	r3, [r7, #16]
 8028360:	4413      	add	r3, r2
 8028362:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8028366:	681b      	ldr	r3, [r3, #0]
 8028368:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 802836c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8028370:	d0e7      	beq.n	8028342 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8028372:	7dfb      	ldrb	r3, [r7, #23]
}
 8028374:	4618      	mov	r0, r3
 8028376:	371c      	adds	r7, #28
 8028378:	46bd      	mov	sp, r7
 802837a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802837e:	4770      	bx	lr

08028380 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8028380:	b480      	push	{r7}
 8028382:	b089      	sub	sp, #36	; 0x24
 8028384:	af00      	add	r7, sp, #0
 8028386:	60f8      	str	r0, [r7, #12]
 8028388:	60b9      	str	r1, [r7, #8]
 802838a:	4611      	mov	r1, r2
 802838c:	461a      	mov	r2, r3
 802838e:	460b      	mov	r3, r1
 8028390:	71fb      	strb	r3, [r7, #7]
 8028392:	4613      	mov	r3, r2
 8028394:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8028396:	68fb      	ldr	r3, [r7, #12]
 8028398:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 802839a:	68bb      	ldr	r3, [r7, #8]
 802839c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 802839e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80283a2:	2b00      	cmp	r3, #0
 80283a4:	d123      	bne.n	80283ee <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80283a6:	88bb      	ldrh	r3, [r7, #4]
 80283a8:	3303      	adds	r3, #3
 80283aa:	089b      	lsrs	r3, r3, #2
 80283ac:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80283ae:	2300      	movs	r3, #0
 80283b0:	61bb      	str	r3, [r7, #24]
 80283b2:	e018      	b.n	80283e6 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80283b4:	79fb      	ldrb	r3, [r7, #7]
 80283b6:	031a      	lsls	r2, r3, #12
 80283b8:	697b      	ldr	r3, [r7, #20]
 80283ba:	4413      	add	r3, r2
 80283bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80283c0:	461a      	mov	r2, r3
 80283c2:	69fb      	ldr	r3, [r7, #28]
 80283c4:	681b      	ldr	r3, [r3, #0]
 80283c6:	6013      	str	r3, [r2, #0]
      pSrc++;
 80283c8:	69fb      	ldr	r3, [r7, #28]
 80283ca:	3301      	adds	r3, #1
 80283cc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80283ce:	69fb      	ldr	r3, [r7, #28]
 80283d0:	3301      	adds	r3, #1
 80283d2:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80283d4:	69fb      	ldr	r3, [r7, #28]
 80283d6:	3301      	adds	r3, #1
 80283d8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80283da:	69fb      	ldr	r3, [r7, #28]
 80283dc:	3301      	adds	r3, #1
 80283de:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80283e0:	69bb      	ldr	r3, [r7, #24]
 80283e2:	3301      	adds	r3, #1
 80283e4:	61bb      	str	r3, [r7, #24]
 80283e6:	69ba      	ldr	r2, [r7, #24]
 80283e8:	693b      	ldr	r3, [r7, #16]
 80283ea:	429a      	cmp	r2, r3
 80283ec:	d3e2      	bcc.n	80283b4 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80283ee:	2300      	movs	r3, #0
}
 80283f0:	4618      	mov	r0, r3
 80283f2:	3724      	adds	r7, #36	; 0x24
 80283f4:	46bd      	mov	sp, r7
 80283f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80283fa:	4770      	bx	lr

080283fc <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80283fc:	b480      	push	{r7}
 80283fe:	b08b      	sub	sp, #44	; 0x2c
 8028400:	af00      	add	r7, sp, #0
 8028402:	60f8      	str	r0, [r7, #12]
 8028404:	60b9      	str	r1, [r7, #8]
 8028406:	4613      	mov	r3, r2
 8028408:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 802840a:	68fb      	ldr	r3, [r7, #12]
 802840c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 802840e:	68bb      	ldr	r3, [r7, #8]
 8028410:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8028412:	88fb      	ldrh	r3, [r7, #6]
 8028414:	089b      	lsrs	r3, r3, #2
 8028416:	b29b      	uxth	r3, r3
 8028418:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 802841a:	88fb      	ldrh	r3, [r7, #6]
 802841c:	f003 0303 	and.w	r3, r3, #3
 8028420:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8028422:	2300      	movs	r3, #0
 8028424:	623b      	str	r3, [r7, #32]
 8028426:	e014      	b.n	8028452 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8028428:	69bb      	ldr	r3, [r7, #24]
 802842a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 802842e:	681a      	ldr	r2, [r3, #0]
 8028430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8028432:	601a      	str	r2, [r3, #0]
    pDest++;
 8028434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8028436:	3301      	adds	r3, #1
 8028438:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 802843a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802843c:	3301      	adds	r3, #1
 802843e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8028440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8028442:	3301      	adds	r3, #1
 8028444:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8028446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8028448:	3301      	adds	r3, #1
 802844a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 802844c:	6a3b      	ldr	r3, [r7, #32]
 802844e:	3301      	adds	r3, #1
 8028450:	623b      	str	r3, [r7, #32]
 8028452:	6a3a      	ldr	r2, [r7, #32]
 8028454:	697b      	ldr	r3, [r7, #20]
 8028456:	429a      	cmp	r2, r3
 8028458:	d3e6      	bcc.n	8028428 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 802845a:	8bfb      	ldrh	r3, [r7, #30]
 802845c:	2b00      	cmp	r3, #0
 802845e:	d01e      	beq.n	802849e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8028460:	2300      	movs	r3, #0
 8028462:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8028464:	69bb      	ldr	r3, [r7, #24]
 8028466:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 802846a:	461a      	mov	r2, r3
 802846c:	f107 0310 	add.w	r3, r7, #16
 8028470:	6812      	ldr	r2, [r2, #0]
 8028472:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8028474:	693a      	ldr	r2, [r7, #16]
 8028476:	6a3b      	ldr	r3, [r7, #32]
 8028478:	b2db      	uxtb	r3, r3
 802847a:	00db      	lsls	r3, r3, #3
 802847c:	fa22 f303 	lsr.w	r3, r2, r3
 8028480:	b2da      	uxtb	r2, r3
 8028482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8028484:	701a      	strb	r2, [r3, #0]
      i++;
 8028486:	6a3b      	ldr	r3, [r7, #32]
 8028488:	3301      	adds	r3, #1
 802848a:	623b      	str	r3, [r7, #32]
      pDest++;
 802848c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802848e:	3301      	adds	r3, #1
 8028490:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8028492:	8bfb      	ldrh	r3, [r7, #30]
 8028494:	3b01      	subs	r3, #1
 8028496:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8028498:	8bfb      	ldrh	r3, [r7, #30]
 802849a:	2b00      	cmp	r3, #0
 802849c:	d1ea      	bne.n	8028474 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 802849e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80284a0:	4618      	mov	r0, r3
 80284a2:	372c      	adds	r7, #44	; 0x2c
 80284a4:	46bd      	mov	sp, r7
 80284a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80284aa:	4770      	bx	lr

080284ac <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80284ac:	b480      	push	{r7}
 80284ae:	b085      	sub	sp, #20
 80284b0:	af00      	add	r7, sp, #0
 80284b2:	6078      	str	r0, [r7, #4]
 80284b4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80284b6:	687b      	ldr	r3, [r7, #4]
 80284b8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80284ba:	683b      	ldr	r3, [r7, #0]
 80284bc:	781b      	ldrb	r3, [r3, #0]
 80284be:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80284c0:	683b      	ldr	r3, [r7, #0]
 80284c2:	785b      	ldrb	r3, [r3, #1]
 80284c4:	2b01      	cmp	r3, #1
 80284c6:	d12c      	bne.n	8028522 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80284c8:	68bb      	ldr	r3, [r7, #8]
 80284ca:	015a      	lsls	r2, r3, #5
 80284cc:	68fb      	ldr	r3, [r7, #12]
 80284ce:	4413      	add	r3, r2
 80284d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80284d4:	681b      	ldr	r3, [r3, #0]
 80284d6:	2b00      	cmp	r3, #0
 80284d8:	db12      	blt.n	8028500 <USB_EPSetStall+0x54>
 80284da:	68bb      	ldr	r3, [r7, #8]
 80284dc:	2b00      	cmp	r3, #0
 80284de:	d00f      	beq.n	8028500 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80284e0:	68bb      	ldr	r3, [r7, #8]
 80284e2:	015a      	lsls	r2, r3, #5
 80284e4:	68fb      	ldr	r3, [r7, #12]
 80284e6:	4413      	add	r3, r2
 80284e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80284ec:	681b      	ldr	r3, [r3, #0]
 80284ee:	68ba      	ldr	r2, [r7, #8]
 80284f0:	0151      	lsls	r1, r2, #5
 80284f2:	68fa      	ldr	r2, [r7, #12]
 80284f4:	440a      	add	r2, r1
 80284f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80284fa:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80284fe:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8028500:	68bb      	ldr	r3, [r7, #8]
 8028502:	015a      	lsls	r2, r3, #5
 8028504:	68fb      	ldr	r3, [r7, #12]
 8028506:	4413      	add	r3, r2
 8028508:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802850c:	681b      	ldr	r3, [r3, #0]
 802850e:	68ba      	ldr	r2, [r7, #8]
 8028510:	0151      	lsls	r1, r2, #5
 8028512:	68fa      	ldr	r2, [r7, #12]
 8028514:	440a      	add	r2, r1
 8028516:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 802851a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 802851e:	6013      	str	r3, [r2, #0]
 8028520:	e02b      	b.n	802857a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8028522:	68bb      	ldr	r3, [r7, #8]
 8028524:	015a      	lsls	r2, r3, #5
 8028526:	68fb      	ldr	r3, [r7, #12]
 8028528:	4413      	add	r3, r2
 802852a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802852e:	681b      	ldr	r3, [r3, #0]
 8028530:	2b00      	cmp	r3, #0
 8028532:	db12      	blt.n	802855a <USB_EPSetStall+0xae>
 8028534:	68bb      	ldr	r3, [r7, #8]
 8028536:	2b00      	cmp	r3, #0
 8028538:	d00f      	beq.n	802855a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 802853a:	68bb      	ldr	r3, [r7, #8]
 802853c:	015a      	lsls	r2, r3, #5
 802853e:	68fb      	ldr	r3, [r7, #12]
 8028540:	4413      	add	r3, r2
 8028542:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8028546:	681b      	ldr	r3, [r3, #0]
 8028548:	68ba      	ldr	r2, [r7, #8]
 802854a:	0151      	lsls	r1, r2, #5
 802854c:	68fa      	ldr	r2, [r7, #12]
 802854e:	440a      	add	r2, r1
 8028550:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8028554:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8028558:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 802855a:	68bb      	ldr	r3, [r7, #8]
 802855c:	015a      	lsls	r2, r3, #5
 802855e:	68fb      	ldr	r3, [r7, #12]
 8028560:	4413      	add	r3, r2
 8028562:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8028566:	681b      	ldr	r3, [r3, #0]
 8028568:	68ba      	ldr	r2, [r7, #8]
 802856a:	0151      	lsls	r1, r2, #5
 802856c:	68fa      	ldr	r2, [r7, #12]
 802856e:	440a      	add	r2, r1
 8028570:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8028574:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8028578:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 802857a:	2300      	movs	r3, #0
}
 802857c:	4618      	mov	r0, r3
 802857e:	3714      	adds	r7, #20
 8028580:	46bd      	mov	sp, r7
 8028582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028586:	4770      	bx	lr

08028588 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8028588:	b480      	push	{r7}
 802858a:	b085      	sub	sp, #20
 802858c:	af00      	add	r7, sp, #0
 802858e:	6078      	str	r0, [r7, #4]
 8028590:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8028592:	687b      	ldr	r3, [r7, #4]
 8028594:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8028596:	683b      	ldr	r3, [r7, #0]
 8028598:	781b      	ldrb	r3, [r3, #0]
 802859a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 802859c:	683b      	ldr	r3, [r7, #0]
 802859e:	785b      	ldrb	r3, [r3, #1]
 80285a0:	2b01      	cmp	r3, #1
 80285a2:	d128      	bne.n	80285f6 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80285a4:	68bb      	ldr	r3, [r7, #8]
 80285a6:	015a      	lsls	r2, r3, #5
 80285a8:	68fb      	ldr	r3, [r7, #12]
 80285aa:	4413      	add	r3, r2
 80285ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80285b0:	681b      	ldr	r3, [r3, #0]
 80285b2:	68ba      	ldr	r2, [r7, #8]
 80285b4:	0151      	lsls	r1, r2, #5
 80285b6:	68fa      	ldr	r2, [r7, #12]
 80285b8:	440a      	add	r2, r1
 80285ba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80285be:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80285c2:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80285c4:	683b      	ldr	r3, [r7, #0]
 80285c6:	791b      	ldrb	r3, [r3, #4]
 80285c8:	2b03      	cmp	r3, #3
 80285ca:	d003      	beq.n	80285d4 <USB_EPClearStall+0x4c>
 80285cc:	683b      	ldr	r3, [r7, #0]
 80285ce:	791b      	ldrb	r3, [r3, #4]
 80285d0:	2b02      	cmp	r3, #2
 80285d2:	d138      	bne.n	8028646 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80285d4:	68bb      	ldr	r3, [r7, #8]
 80285d6:	015a      	lsls	r2, r3, #5
 80285d8:	68fb      	ldr	r3, [r7, #12]
 80285da:	4413      	add	r3, r2
 80285dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80285e0:	681b      	ldr	r3, [r3, #0]
 80285e2:	68ba      	ldr	r2, [r7, #8]
 80285e4:	0151      	lsls	r1, r2, #5
 80285e6:	68fa      	ldr	r2, [r7, #12]
 80285e8:	440a      	add	r2, r1
 80285ea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80285ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80285f2:	6013      	str	r3, [r2, #0]
 80285f4:	e027      	b.n	8028646 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80285f6:	68bb      	ldr	r3, [r7, #8]
 80285f8:	015a      	lsls	r2, r3, #5
 80285fa:	68fb      	ldr	r3, [r7, #12]
 80285fc:	4413      	add	r3, r2
 80285fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8028602:	681b      	ldr	r3, [r3, #0]
 8028604:	68ba      	ldr	r2, [r7, #8]
 8028606:	0151      	lsls	r1, r2, #5
 8028608:	68fa      	ldr	r2, [r7, #12]
 802860a:	440a      	add	r2, r1
 802860c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8028610:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8028614:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8028616:	683b      	ldr	r3, [r7, #0]
 8028618:	791b      	ldrb	r3, [r3, #4]
 802861a:	2b03      	cmp	r3, #3
 802861c:	d003      	beq.n	8028626 <USB_EPClearStall+0x9e>
 802861e:	683b      	ldr	r3, [r7, #0]
 8028620:	791b      	ldrb	r3, [r3, #4]
 8028622:	2b02      	cmp	r3, #2
 8028624:	d10f      	bne.n	8028646 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8028626:	68bb      	ldr	r3, [r7, #8]
 8028628:	015a      	lsls	r2, r3, #5
 802862a:	68fb      	ldr	r3, [r7, #12]
 802862c:	4413      	add	r3, r2
 802862e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8028632:	681b      	ldr	r3, [r3, #0]
 8028634:	68ba      	ldr	r2, [r7, #8]
 8028636:	0151      	lsls	r1, r2, #5
 8028638:	68fa      	ldr	r2, [r7, #12]
 802863a:	440a      	add	r2, r1
 802863c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8028640:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8028644:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8028646:	2300      	movs	r3, #0
}
 8028648:	4618      	mov	r0, r3
 802864a:	3714      	adds	r7, #20
 802864c:	46bd      	mov	sp, r7
 802864e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028652:	4770      	bx	lr

08028654 <USB_StopDevice>:
  * @brief  USB_StopDevice : Stop the usb device mode
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_StopDevice(USB_OTG_GlobalTypeDef *USBx)
{
 8028654:	b580      	push	{r7, lr}
 8028656:	b086      	sub	sp, #24
 8028658:	af00      	add	r7, sp, #0
 802865a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret;
  uint32_t USBx_BASE = (uint32_t)USBx;
 802865c:	687b      	ldr	r3, [r7, #4]
 802865e:	613b      	str	r3, [r7, #16]
  uint32_t i;

  /* Clear Pending interrupt */
  for (i = 0U; i < 15U; i++)
 8028660:	2300      	movs	r3, #0
 8028662:	617b      	str	r3, [r7, #20]
 8028664:	e016      	b.n	8028694 <USB_StopDevice+0x40>
  {
    USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8028666:	697b      	ldr	r3, [r7, #20]
 8028668:	015a      	lsls	r2, r3, #5
 802866a:	693b      	ldr	r3, [r7, #16]
 802866c:	4413      	add	r3, r2
 802866e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8028672:	461a      	mov	r2, r3
 8028674:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8028678:	6093      	str	r3, [r2, #8]
    USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 802867a:	697b      	ldr	r3, [r7, #20]
 802867c:	015a      	lsls	r2, r3, #5
 802867e:	693b      	ldr	r3, [r7, #16]
 8028680:	4413      	add	r3, r2
 8028682:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8028686:	461a      	mov	r2, r3
 8028688:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 802868c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < 15U; i++)
 802868e:	697b      	ldr	r3, [r7, #20]
 8028690:	3301      	adds	r3, #1
 8028692:	617b      	str	r3, [r7, #20]
 8028694:	697b      	ldr	r3, [r7, #20]
 8028696:	2b0e      	cmp	r3, #14
 8028698:	d9e5      	bls.n	8028666 <USB_StopDevice+0x12>
  }

  /* Clear interrupt masks */
  USBx_DEVICE->DIEPMSK  = 0U;
 802869a:	693b      	ldr	r3, [r7, #16]
 802869c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80286a0:	461a      	mov	r2, r3
 80286a2:	2300      	movs	r3, #0
 80286a4:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK  = 0U;
 80286a6:	693b      	ldr	r3, [r7, #16]
 80286a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80286ac:	461a      	mov	r2, r3
 80286ae:	2300      	movs	r3, #0
 80286b0:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80286b2:	693b      	ldr	r3, [r7, #16]
 80286b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80286b8:	461a      	mov	r2, r3
 80286ba:	2300      	movs	r3, #0
 80286bc:	61d3      	str	r3, [r2, #28]

  /* Flush the FIFO */
  ret = USB_FlushRxFifo(USBx);
 80286be:	6878      	ldr	r0, [r7, #4]
 80286c0:	f7ff f836 	bl	8027730 <USB_FlushRxFifo>
 80286c4:	4603      	mov	r3, r0
 80286c6:	73fb      	strb	r3, [r7, #15]
  if (ret != HAL_OK)
 80286c8:	7bfb      	ldrb	r3, [r7, #15]
 80286ca:	2b00      	cmp	r3, #0
 80286cc:	d001      	beq.n	80286d2 <USB_StopDevice+0x7e>
  {
    return ret;
 80286ce:	7bfb      	ldrb	r3, [r7, #15]
 80286d0:	e00b      	b.n	80286ea <USB_StopDevice+0x96>
  }

  ret = USB_FlushTxFifo(USBx,  0x10U);
 80286d2:	2110      	movs	r1, #16
 80286d4:	6878      	ldr	r0, [r7, #4]
 80286d6:	f7fe fff7 	bl	80276c8 <USB_FlushTxFifo>
 80286da:	4603      	mov	r3, r0
 80286dc:	73fb      	strb	r3, [r7, #15]
  if (ret != HAL_OK)
 80286de:	7bfb      	ldrb	r3, [r7, #15]
 80286e0:	2b00      	cmp	r3, #0
 80286e2:	d001      	beq.n	80286e8 <USB_StopDevice+0x94>
  {
    return ret;
 80286e4:	7bfb      	ldrb	r3, [r7, #15]
 80286e6:	e000      	b.n	80286ea <USB_StopDevice+0x96>
  }

  return ret;
 80286e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80286ea:	4618      	mov	r0, r3
 80286ec:	3718      	adds	r7, #24
 80286ee:	46bd      	mov	sp, r7
 80286f0:	bd80      	pop	{r7, pc}

080286f2 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80286f2:	b480      	push	{r7}
 80286f4:	b085      	sub	sp, #20
 80286f6:	af00      	add	r7, sp, #0
 80286f8:	6078      	str	r0, [r7, #4]
 80286fa:	460b      	mov	r3, r1
 80286fc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80286fe:	687b      	ldr	r3, [r7, #4]
 8028700:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8028702:	68fb      	ldr	r3, [r7, #12]
 8028704:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8028708:	681b      	ldr	r3, [r3, #0]
 802870a:	68fa      	ldr	r2, [r7, #12]
 802870c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8028710:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8028714:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8028716:	68fb      	ldr	r3, [r7, #12]
 8028718:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 802871c:	681a      	ldr	r2, [r3, #0]
 802871e:	78fb      	ldrb	r3, [r7, #3]
 8028720:	011b      	lsls	r3, r3, #4
 8028722:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8028726:	68f9      	ldr	r1, [r7, #12]
 8028728:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 802872c:	4313      	orrs	r3, r2
 802872e:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8028730:	2300      	movs	r3, #0
}
 8028732:	4618      	mov	r0, r3
 8028734:	3714      	adds	r7, #20
 8028736:	46bd      	mov	sp, r7
 8028738:	f85d 7b04 	ldr.w	r7, [sp], #4
 802873c:	4770      	bx	lr

0802873e <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 802873e:	b480      	push	{r7}
 8028740:	b085      	sub	sp, #20
 8028742:	af00      	add	r7, sp, #0
 8028744:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8028746:	687b      	ldr	r3, [r7, #4]
 8028748:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 802874a:	68fb      	ldr	r3, [r7, #12]
 802874c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8028750:	681b      	ldr	r3, [r3, #0]
 8028752:	68fa      	ldr	r2, [r7, #12]
 8028754:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8028758:	f023 0303 	bic.w	r3, r3, #3
 802875c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 802875e:	68fb      	ldr	r3, [r7, #12]
 8028760:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8028764:	685b      	ldr	r3, [r3, #4]
 8028766:	68fa      	ldr	r2, [r7, #12]
 8028768:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 802876c:	f023 0302 	bic.w	r3, r3, #2
 8028770:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8028772:	2300      	movs	r3, #0
}
 8028774:	4618      	mov	r0, r3
 8028776:	3714      	adds	r7, #20
 8028778:	46bd      	mov	sp, r7
 802877a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802877e:	4770      	bx	lr

08028780 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8028780:	b480      	push	{r7}
 8028782:	b085      	sub	sp, #20
 8028784:	af00      	add	r7, sp, #0
 8028786:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8028788:	687b      	ldr	r3, [r7, #4]
 802878a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 802878c:	68fb      	ldr	r3, [r7, #12]
 802878e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8028792:	681b      	ldr	r3, [r3, #0]
 8028794:	68fa      	ldr	r2, [r7, #12]
 8028796:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 802879a:	f023 0303 	bic.w	r3, r3, #3
 802879e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80287a0:	68fb      	ldr	r3, [r7, #12]
 80287a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80287a6:	685b      	ldr	r3, [r3, #4]
 80287a8:	68fa      	ldr	r2, [r7, #12]
 80287aa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80287ae:	f043 0302 	orr.w	r3, r3, #2
 80287b2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80287b4:	2300      	movs	r3, #0
}
 80287b6:	4618      	mov	r0, r3
 80287b8:	3714      	adds	r7, #20
 80287ba:	46bd      	mov	sp, r7
 80287bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80287c0:	4770      	bx	lr

080287c2 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80287c2:	b480      	push	{r7}
 80287c4:	b085      	sub	sp, #20
 80287c6:	af00      	add	r7, sp, #0
 80287c8:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80287ca:	687b      	ldr	r3, [r7, #4]
 80287cc:	695b      	ldr	r3, [r3, #20]
 80287ce:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80287d0:	687b      	ldr	r3, [r7, #4]
 80287d2:	699b      	ldr	r3, [r3, #24]
 80287d4:	68fa      	ldr	r2, [r7, #12]
 80287d6:	4013      	ands	r3, r2
 80287d8:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80287da:	68fb      	ldr	r3, [r7, #12]
}
 80287dc:	4618      	mov	r0, r3
 80287de:	3714      	adds	r7, #20
 80287e0:	46bd      	mov	sp, r7
 80287e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80287e6:	4770      	bx	lr

080287e8 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80287e8:	b480      	push	{r7}
 80287ea:	b085      	sub	sp, #20
 80287ec:	af00      	add	r7, sp, #0
 80287ee:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80287f0:	687b      	ldr	r3, [r7, #4]
 80287f2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80287f4:	68fb      	ldr	r3, [r7, #12]
 80287f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80287fa:	699b      	ldr	r3, [r3, #24]
 80287fc:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80287fe:	68fb      	ldr	r3, [r7, #12]
 8028800:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8028804:	69db      	ldr	r3, [r3, #28]
 8028806:	68ba      	ldr	r2, [r7, #8]
 8028808:	4013      	ands	r3, r2
 802880a:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 802880c:	68bb      	ldr	r3, [r7, #8]
 802880e:	0c1b      	lsrs	r3, r3, #16
}
 8028810:	4618      	mov	r0, r3
 8028812:	3714      	adds	r7, #20
 8028814:	46bd      	mov	sp, r7
 8028816:	f85d 7b04 	ldr.w	r7, [sp], #4
 802881a:	4770      	bx	lr

0802881c <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 802881c:	b480      	push	{r7}
 802881e:	b085      	sub	sp, #20
 8028820:	af00      	add	r7, sp, #0
 8028822:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8028824:	687b      	ldr	r3, [r7, #4]
 8028826:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8028828:	68fb      	ldr	r3, [r7, #12]
 802882a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 802882e:	699b      	ldr	r3, [r3, #24]
 8028830:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8028832:	68fb      	ldr	r3, [r7, #12]
 8028834:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8028838:	69db      	ldr	r3, [r3, #28]
 802883a:	68ba      	ldr	r2, [r7, #8]
 802883c:	4013      	ands	r3, r2
 802883e:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8028840:	68bb      	ldr	r3, [r7, #8]
 8028842:	b29b      	uxth	r3, r3
}
 8028844:	4618      	mov	r0, r3
 8028846:	3714      	adds	r7, #20
 8028848:	46bd      	mov	sp, r7
 802884a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802884e:	4770      	bx	lr

08028850 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8028850:	b480      	push	{r7}
 8028852:	b085      	sub	sp, #20
 8028854:	af00      	add	r7, sp, #0
 8028856:	6078      	str	r0, [r7, #4]
 8028858:	460b      	mov	r3, r1
 802885a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 802885c:	687b      	ldr	r3, [r7, #4]
 802885e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8028860:	78fb      	ldrb	r3, [r7, #3]
 8028862:	015a      	lsls	r2, r3, #5
 8028864:	68fb      	ldr	r3, [r7, #12]
 8028866:	4413      	add	r3, r2
 8028868:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802886c:	689b      	ldr	r3, [r3, #8]
 802886e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8028870:	68fb      	ldr	r3, [r7, #12]
 8028872:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8028876:	695b      	ldr	r3, [r3, #20]
 8028878:	68ba      	ldr	r2, [r7, #8]
 802887a:	4013      	ands	r3, r2
 802887c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 802887e:	68bb      	ldr	r3, [r7, #8]
}
 8028880:	4618      	mov	r0, r3
 8028882:	3714      	adds	r7, #20
 8028884:	46bd      	mov	sp, r7
 8028886:	f85d 7b04 	ldr.w	r7, [sp], #4
 802888a:	4770      	bx	lr

0802888c <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 802888c:	b480      	push	{r7}
 802888e:	b087      	sub	sp, #28
 8028890:	af00      	add	r7, sp, #0
 8028892:	6078      	str	r0, [r7, #4]
 8028894:	460b      	mov	r3, r1
 8028896:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8028898:	687b      	ldr	r3, [r7, #4]
 802889a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 802889c:	697b      	ldr	r3, [r7, #20]
 802889e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80288a2:	691b      	ldr	r3, [r3, #16]
 80288a4:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80288a6:	697b      	ldr	r3, [r7, #20]
 80288a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80288ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80288ae:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80288b0:	78fb      	ldrb	r3, [r7, #3]
 80288b2:	f003 030f 	and.w	r3, r3, #15
 80288b6:	68fa      	ldr	r2, [r7, #12]
 80288b8:	fa22 f303 	lsr.w	r3, r2, r3
 80288bc:	01db      	lsls	r3, r3, #7
 80288be:	b2db      	uxtb	r3, r3
 80288c0:	693a      	ldr	r2, [r7, #16]
 80288c2:	4313      	orrs	r3, r2
 80288c4:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80288c6:	78fb      	ldrb	r3, [r7, #3]
 80288c8:	015a      	lsls	r2, r3, #5
 80288ca:	697b      	ldr	r3, [r7, #20]
 80288cc:	4413      	add	r3, r2
 80288ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80288d2:	689b      	ldr	r3, [r3, #8]
 80288d4:	693a      	ldr	r2, [r7, #16]
 80288d6:	4013      	ands	r3, r2
 80288d8:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80288da:	68bb      	ldr	r3, [r7, #8]
}
 80288dc:	4618      	mov	r0, r3
 80288de:	371c      	adds	r7, #28
 80288e0:	46bd      	mov	sp, r7
 80288e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80288e6:	4770      	bx	lr

080288e8 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80288e8:	b480      	push	{r7}
 80288ea:	b083      	sub	sp, #12
 80288ec:	af00      	add	r7, sp, #0
 80288ee:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80288f0:	687b      	ldr	r3, [r7, #4]
 80288f2:	695b      	ldr	r3, [r3, #20]
 80288f4:	f003 0301 	and.w	r3, r3, #1
}
 80288f8:	4618      	mov	r0, r3
 80288fa:	370c      	adds	r7, #12
 80288fc:	46bd      	mov	sp, r7
 80288fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028902:	4770      	bx	lr

08028904 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8028904:	b480      	push	{r7}
 8028906:	b085      	sub	sp, #20
 8028908:	af00      	add	r7, sp, #0
 802890a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 802890c:	687b      	ldr	r3, [r7, #4]
 802890e:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8028910:	68fb      	ldr	r3, [r7, #12]
 8028912:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8028916:	681a      	ldr	r2, [r3, #0]
 8028918:	68fb      	ldr	r3, [r7, #12]
 802891a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802891e:	4619      	mov	r1, r3
 8028920:	4b09      	ldr	r3, [pc, #36]	; (8028948 <USB_ActivateSetup+0x44>)
 8028922:	4013      	ands	r3, r2
 8028924:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8028926:	68fb      	ldr	r3, [r7, #12]
 8028928:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 802892c:	685b      	ldr	r3, [r3, #4]
 802892e:	68fa      	ldr	r2, [r7, #12]
 8028930:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8028934:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8028938:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 802893a:	2300      	movs	r3, #0
}
 802893c:	4618      	mov	r0, r3
 802893e:	3714      	adds	r7, #20
 8028940:	46bd      	mov	sp, r7
 8028942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028946:	4770      	bx	lr
 8028948:	fffff800 	.word	0xfffff800

0802894c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 802894c:	b480      	push	{r7}
 802894e:	b087      	sub	sp, #28
 8028950:	af00      	add	r7, sp, #0
 8028952:	60f8      	str	r0, [r7, #12]
 8028954:	460b      	mov	r3, r1
 8028956:	607a      	str	r2, [r7, #4]
 8028958:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 802895a:	68fb      	ldr	r3, [r7, #12]
 802895c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 802895e:	68fb      	ldr	r3, [r7, #12]
 8028960:	333c      	adds	r3, #60	; 0x3c
 8028962:	3304      	adds	r3, #4
 8028964:	681b      	ldr	r3, [r3, #0]
 8028966:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8028968:	693b      	ldr	r3, [r7, #16]
 802896a:	4a26      	ldr	r2, [pc, #152]	; (8028a04 <USB_EP0_OutStart+0xb8>)
 802896c:	4293      	cmp	r3, r2
 802896e:	d90a      	bls.n	8028986 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8028970:	697b      	ldr	r3, [r7, #20]
 8028972:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8028976:	681b      	ldr	r3, [r3, #0]
 8028978:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 802897c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8028980:	d101      	bne.n	8028986 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8028982:	2300      	movs	r3, #0
 8028984:	e037      	b.n	80289f6 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8028986:	697b      	ldr	r3, [r7, #20]
 8028988:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802898c:	461a      	mov	r2, r3
 802898e:	2300      	movs	r3, #0
 8028990:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8028992:	697b      	ldr	r3, [r7, #20]
 8028994:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8028998:	691b      	ldr	r3, [r3, #16]
 802899a:	697a      	ldr	r2, [r7, #20]
 802899c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80289a0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80289a4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80289a6:	697b      	ldr	r3, [r7, #20]
 80289a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80289ac:	691b      	ldr	r3, [r3, #16]
 80289ae:	697a      	ldr	r2, [r7, #20]
 80289b0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80289b4:	f043 0318 	orr.w	r3, r3, #24
 80289b8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80289ba:	697b      	ldr	r3, [r7, #20]
 80289bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80289c0:	691b      	ldr	r3, [r3, #16]
 80289c2:	697a      	ldr	r2, [r7, #20]
 80289c4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80289c8:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80289cc:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80289ce:	7afb      	ldrb	r3, [r7, #11]
 80289d0:	2b01      	cmp	r3, #1
 80289d2:	d10f      	bne.n	80289f4 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80289d4:	697b      	ldr	r3, [r7, #20]
 80289d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80289da:	461a      	mov	r2, r3
 80289dc:	687b      	ldr	r3, [r7, #4]
 80289de:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80289e0:	697b      	ldr	r3, [r7, #20]
 80289e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80289e6:	681b      	ldr	r3, [r3, #0]
 80289e8:	697a      	ldr	r2, [r7, #20]
 80289ea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80289ee:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80289f2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80289f4:	2300      	movs	r3, #0
}
 80289f6:	4618      	mov	r0, r3
 80289f8:	371c      	adds	r7, #28
 80289fa:	46bd      	mov	sp, r7
 80289fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028a00:	4770      	bx	lr
 8028a02:	bf00      	nop
 8028a04:	4f54300a 	.word	0x4f54300a

08028a08 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8028a08:	b480      	push	{r7}
 8028a0a:	b085      	sub	sp, #20
 8028a0c:	af00      	add	r7, sp, #0
 8028a0e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8028a10:	2300      	movs	r3, #0
 8028a12:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8028a14:	68fb      	ldr	r3, [r7, #12]
 8028a16:	3301      	adds	r3, #1
 8028a18:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8028a1a:	68fb      	ldr	r3, [r7, #12]
 8028a1c:	4a13      	ldr	r2, [pc, #76]	; (8028a6c <USB_CoreReset+0x64>)
 8028a1e:	4293      	cmp	r3, r2
 8028a20:	d901      	bls.n	8028a26 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8028a22:	2303      	movs	r3, #3
 8028a24:	e01b      	b.n	8028a5e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8028a26:	687b      	ldr	r3, [r7, #4]
 8028a28:	691b      	ldr	r3, [r3, #16]
 8028a2a:	2b00      	cmp	r3, #0
 8028a2c:	daf2      	bge.n	8028a14 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8028a2e:	2300      	movs	r3, #0
 8028a30:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8028a32:	687b      	ldr	r3, [r7, #4]
 8028a34:	691b      	ldr	r3, [r3, #16]
 8028a36:	f043 0201 	orr.w	r2, r3, #1
 8028a3a:	687b      	ldr	r3, [r7, #4]
 8028a3c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8028a3e:	68fb      	ldr	r3, [r7, #12]
 8028a40:	3301      	adds	r3, #1
 8028a42:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8028a44:	68fb      	ldr	r3, [r7, #12]
 8028a46:	4a09      	ldr	r2, [pc, #36]	; (8028a6c <USB_CoreReset+0x64>)
 8028a48:	4293      	cmp	r3, r2
 8028a4a:	d901      	bls.n	8028a50 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8028a4c:	2303      	movs	r3, #3
 8028a4e:	e006      	b.n	8028a5e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8028a50:	687b      	ldr	r3, [r7, #4]
 8028a52:	691b      	ldr	r3, [r3, #16]
 8028a54:	f003 0301 	and.w	r3, r3, #1
 8028a58:	2b01      	cmp	r3, #1
 8028a5a:	d0f0      	beq.n	8028a3e <USB_CoreReset+0x36>

  return HAL_OK;
 8028a5c:	2300      	movs	r3, #0
}
 8028a5e:	4618      	mov	r0, r3
 8028a60:	3714      	adds	r7, #20
 8028a62:	46bd      	mov	sp, r7
 8028a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028a68:	4770      	bx	lr
 8028a6a:	bf00      	nop
 8028a6c:	00030d40 	.word	0x00030d40

08028a70 <USB_HS_PHYCInit>:
  *         Init the low level hardware : GPIO, CLOCK, NVIC...
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_HS_PHYCInit(USB_OTG_GlobalTypeDef *USBx)
{
 8028a70:	b580      	push	{r7, lr}
 8028a72:	b084      	sub	sp, #16
 8028a74:	af00      	add	r7, sp, #0
 8028a76:	6078      	str	r0, [r7, #4]
  UNUSED(USBx);
  __IO uint32_t count = 0U;
 8028a78:	2300      	movs	r3, #0
 8028a7a:	60fb      	str	r3, [r7, #12]

  /* Enable LDO */
  USB_HS_PHYC->USB_HS_PHYC_LDO |= USB_HS_PHYC_LDO_ENABLE;
 8028a7c:	4b16      	ldr	r3, [pc, #88]	; (8028ad8 <USB_HS_PHYCInit+0x68>)
 8028a7e:	699b      	ldr	r3, [r3, #24]
 8028a80:	4a15      	ldr	r2, [pc, #84]	; (8028ad8 <USB_HS_PHYCInit+0x68>)
 8028a82:	f043 0304 	orr.w	r3, r3, #4
 8028a86:	6193      	str	r3, [r2, #24]

  /* wait for LDO Ready */
  while ((USB_HS_PHYC->USB_HS_PHYC_LDO & USB_HS_PHYC_LDO_STATUS) == 0U)
 8028a88:	e008      	b.n	8028a9c <USB_HS_PHYCInit+0x2c>
  {
    count++;
 8028a8a:	68fb      	ldr	r3, [r7, #12]
 8028a8c:	3301      	adds	r3, #1
 8028a8e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8028a90:	68fb      	ldr	r3, [r7, #12]
 8028a92:	4a12      	ldr	r2, [pc, #72]	; (8028adc <USB_HS_PHYCInit+0x6c>)
 8028a94:	4293      	cmp	r3, r2
 8028a96:	d901      	bls.n	8028a9c <USB_HS_PHYCInit+0x2c>
    {
      return HAL_TIMEOUT;
 8028a98:	2303      	movs	r3, #3
 8028a9a:	e019      	b.n	8028ad0 <USB_HS_PHYCInit+0x60>
  while ((USB_HS_PHYC->USB_HS_PHYC_LDO & USB_HS_PHYC_LDO_STATUS) == 0U)
 8028a9c:	4b0e      	ldr	r3, [pc, #56]	; (8028ad8 <USB_HS_PHYCInit+0x68>)
 8028a9e:	699b      	ldr	r3, [r3, #24]
 8028aa0:	f003 0302 	and.w	r3, r3, #2
 8028aa4:	2b00      	cmp	r3, #0
 8028aa6:	d0f0      	beq.n	8028a8a <USB_HS_PHYCInit+0x1a>
  {
    USB_HS_PHYC->USB_HS_PHYC_PLL = (0x3U << 1);
  }
  else if (HSE_VALUE == 24000000U) /* HSE = 24MHz */
  {
    USB_HS_PHYC->USB_HS_PHYC_PLL = (0x4U << 1);
 8028aa8:	4b0b      	ldr	r3, [pc, #44]	; (8028ad8 <USB_HS_PHYCInit+0x68>)
 8028aaa:	2208      	movs	r2, #8
 8028aac:	601a      	str	r2, [r3, #0]
  {
    /* ... */
  }

  /* Control the tuning interface of the High Speed PHY */
  USB_HS_PHYC->USB_HS_PHYC_TUNE |= USB_HS_PHYC_TUNE_VALUE;
 8028aae:	4b0a      	ldr	r3, [pc, #40]	; (8028ad8 <USB_HS_PHYCInit+0x68>)
 8028ab0:	68da      	ldr	r2, [r3, #12]
 8028ab2:	4909      	ldr	r1, [pc, #36]	; (8028ad8 <USB_HS_PHYCInit+0x68>)
 8028ab4:	f640 7313 	movw	r3, #3859	; 0xf13
 8028ab8:	4313      	orrs	r3, r2
 8028aba:	60cb      	str	r3, [r1, #12]

  /* Enable PLL internal PHY */
  USB_HS_PHYC->USB_HS_PHYC_PLL |= USB_HS_PHYC_PLL_PLLEN;
 8028abc:	4b06      	ldr	r3, [pc, #24]	; (8028ad8 <USB_HS_PHYCInit+0x68>)
 8028abe:	681b      	ldr	r3, [r3, #0]
 8028ac0:	4a05      	ldr	r2, [pc, #20]	; (8028ad8 <USB_HS_PHYCInit+0x68>)
 8028ac2:	f043 0301 	orr.w	r3, r3, #1
 8028ac6:	6013      	str	r3, [r2, #0]


  /* 2ms Delay required to get internal phy clock stable */
  HAL_Delay(2U);
 8028ac8:	2002      	movs	r0, #2
 8028aca:	f7f9 fa25 	bl	8021f18 <HAL_Delay>

  return HAL_OK;
 8028ace:	2300      	movs	r3, #0
}
 8028ad0:	4618      	mov	r0, r3
 8028ad2:	3710      	adds	r7, #16
 8028ad4:	46bd      	mov	sp, r7
 8028ad6:	bd80      	pop	{r7, pc}
 8028ad8:	40017c00 	.word	0x40017c00
 8028adc:	00030d40 	.word	0x00030d40

08028ae0 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8028ae0:	b580      	push	{r7, lr}
 8028ae2:	b084      	sub	sp, #16
 8028ae4:	af00      	add	r7, sp, #0
 8028ae6:	6078      	str	r0, [r7, #4]
 8028ae8:	460b      	mov	r3, r1
 8028aea:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8028aec:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8028af0:	f002 fe8e 	bl	802b810 <malloc>
 8028af4:	4603      	mov	r3, r0
 8028af6:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8028af8:	68fb      	ldr	r3, [r7, #12]
 8028afa:	2b00      	cmp	r3, #0
 8028afc:	d109      	bne.n	8028b12 <USBD_CDC_Init+0x32>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8028afe:	687b      	ldr	r3, [r7, #4]
 8028b00:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8028b04:	687b      	ldr	r3, [r7, #4]
 8028b06:	32b0      	adds	r2, #176	; 0xb0
 8028b08:	2100      	movs	r1, #0
 8028b0a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8028b0e:	2302      	movs	r3, #2
 8028b10:	e0d4      	b.n	8028cbc <USBD_CDC_Init+0x1dc>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8028b12:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8028b16:	2100      	movs	r1, #0
 8028b18:	68f8      	ldr	r0, [r7, #12]
 8028b1a:	f002 ff7f 	bl	802ba1c <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8028b1e:	687b      	ldr	r3, [r7, #4]
 8028b20:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8028b24:	687b      	ldr	r3, [r7, #4]
 8028b26:	32b0      	adds	r2, #176	; 0xb0
 8028b28:	68f9      	ldr	r1, [r7, #12]
 8028b2a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8028b2e:	687b      	ldr	r3, [r7, #4]
 8028b30:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8028b34:	687b      	ldr	r3, [r7, #4]
 8028b36:	32b0      	adds	r2, #176	; 0xb0
 8028b38:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8028b3c:	687b      	ldr	r3, [r7, #4]
 8028b3e:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8028b42:	687b      	ldr	r3, [r7, #4]
 8028b44:	7c1b      	ldrb	r3, [r3, #16]
 8028b46:	2b00      	cmp	r3, #0
 8028b48:	d138      	bne.n	8028bbc <USBD_CDC_Init+0xdc>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8028b4a:	4b5e      	ldr	r3, [pc, #376]	; (8028cc4 <USBD_CDC_Init+0x1e4>)
 8028b4c:	7819      	ldrb	r1, [r3, #0]
 8028b4e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8028b52:	2202      	movs	r2, #2
 8028b54:	6878      	ldr	r0, [r7, #4]
 8028b56:	f002 fcb8 	bl	802b4ca <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8028b5a:	4b5a      	ldr	r3, [pc, #360]	; (8028cc4 <USBD_CDC_Init+0x1e4>)
 8028b5c:	781b      	ldrb	r3, [r3, #0]
 8028b5e:	f003 020f 	and.w	r2, r3, #15
 8028b62:	6879      	ldr	r1, [r7, #4]
 8028b64:	4613      	mov	r3, r2
 8028b66:	009b      	lsls	r3, r3, #2
 8028b68:	4413      	add	r3, r2
 8028b6a:	009b      	lsls	r3, r3, #2
 8028b6c:	440b      	add	r3, r1
 8028b6e:	3324      	adds	r3, #36	; 0x24
 8028b70:	2201      	movs	r2, #1
 8028b72:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8028b74:	4b54      	ldr	r3, [pc, #336]	; (8028cc8 <USBD_CDC_Init+0x1e8>)
 8028b76:	7819      	ldrb	r1, [r3, #0]
 8028b78:	f44f 7300 	mov.w	r3, #512	; 0x200
 8028b7c:	2202      	movs	r2, #2
 8028b7e:	6878      	ldr	r0, [r7, #4]
 8028b80:	f002 fca3 	bl	802b4ca <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8028b84:	4b50      	ldr	r3, [pc, #320]	; (8028cc8 <USBD_CDC_Init+0x1e8>)
 8028b86:	781b      	ldrb	r3, [r3, #0]
 8028b88:	f003 020f 	and.w	r2, r3, #15
 8028b8c:	6879      	ldr	r1, [r7, #4]
 8028b8e:	4613      	mov	r3, r2
 8028b90:	009b      	lsls	r3, r3, #2
 8028b92:	4413      	add	r3, r2
 8028b94:	009b      	lsls	r3, r3, #2
 8028b96:	440b      	add	r3, r1
 8028b98:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8028b9c:	2201      	movs	r2, #1
 8028b9e:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8028ba0:	4b4a      	ldr	r3, [pc, #296]	; (8028ccc <USBD_CDC_Init+0x1ec>)
 8028ba2:	781b      	ldrb	r3, [r3, #0]
 8028ba4:	f003 020f 	and.w	r2, r3, #15
 8028ba8:	6879      	ldr	r1, [r7, #4]
 8028baa:	4613      	mov	r3, r2
 8028bac:	009b      	lsls	r3, r3, #2
 8028bae:	4413      	add	r3, r2
 8028bb0:	009b      	lsls	r3, r3, #2
 8028bb2:	440b      	add	r3, r1
 8028bb4:	3326      	adds	r3, #38	; 0x26
 8028bb6:	2210      	movs	r2, #16
 8028bb8:	801a      	strh	r2, [r3, #0]
 8028bba:	e035      	b.n	8028c28 <USBD_CDC_Init+0x148>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8028bbc:	4b41      	ldr	r3, [pc, #260]	; (8028cc4 <USBD_CDC_Init+0x1e4>)
 8028bbe:	7819      	ldrb	r1, [r3, #0]
 8028bc0:	2340      	movs	r3, #64	; 0x40
 8028bc2:	2202      	movs	r2, #2
 8028bc4:	6878      	ldr	r0, [r7, #4]
 8028bc6:	f002 fc80 	bl	802b4ca <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8028bca:	4b3e      	ldr	r3, [pc, #248]	; (8028cc4 <USBD_CDC_Init+0x1e4>)
 8028bcc:	781b      	ldrb	r3, [r3, #0]
 8028bce:	f003 020f 	and.w	r2, r3, #15
 8028bd2:	6879      	ldr	r1, [r7, #4]
 8028bd4:	4613      	mov	r3, r2
 8028bd6:	009b      	lsls	r3, r3, #2
 8028bd8:	4413      	add	r3, r2
 8028bda:	009b      	lsls	r3, r3, #2
 8028bdc:	440b      	add	r3, r1
 8028bde:	3324      	adds	r3, #36	; 0x24
 8028be0:	2201      	movs	r2, #1
 8028be2:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8028be4:	4b38      	ldr	r3, [pc, #224]	; (8028cc8 <USBD_CDC_Init+0x1e8>)
 8028be6:	7819      	ldrb	r1, [r3, #0]
 8028be8:	2340      	movs	r3, #64	; 0x40
 8028bea:	2202      	movs	r2, #2
 8028bec:	6878      	ldr	r0, [r7, #4]
 8028bee:	f002 fc6c 	bl	802b4ca <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8028bf2:	4b35      	ldr	r3, [pc, #212]	; (8028cc8 <USBD_CDC_Init+0x1e8>)
 8028bf4:	781b      	ldrb	r3, [r3, #0]
 8028bf6:	f003 020f 	and.w	r2, r3, #15
 8028bfa:	6879      	ldr	r1, [r7, #4]
 8028bfc:	4613      	mov	r3, r2
 8028bfe:	009b      	lsls	r3, r3, #2
 8028c00:	4413      	add	r3, r2
 8028c02:	009b      	lsls	r3, r3, #2
 8028c04:	440b      	add	r3, r1
 8028c06:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8028c0a:	2201      	movs	r2, #1
 8028c0c:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8028c0e:	4b2f      	ldr	r3, [pc, #188]	; (8028ccc <USBD_CDC_Init+0x1ec>)
 8028c10:	781b      	ldrb	r3, [r3, #0]
 8028c12:	f003 020f 	and.w	r2, r3, #15
 8028c16:	6879      	ldr	r1, [r7, #4]
 8028c18:	4613      	mov	r3, r2
 8028c1a:	009b      	lsls	r3, r3, #2
 8028c1c:	4413      	add	r3, r2
 8028c1e:	009b      	lsls	r3, r3, #2
 8028c20:	440b      	add	r3, r1
 8028c22:	3326      	adds	r3, #38	; 0x26
 8028c24:	2210      	movs	r2, #16
 8028c26:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8028c28:	4b28      	ldr	r3, [pc, #160]	; (8028ccc <USBD_CDC_Init+0x1ec>)
 8028c2a:	7819      	ldrb	r1, [r3, #0]
 8028c2c:	2308      	movs	r3, #8
 8028c2e:	2203      	movs	r2, #3
 8028c30:	6878      	ldr	r0, [r7, #4]
 8028c32:	f002 fc4a 	bl	802b4ca <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8028c36:	4b25      	ldr	r3, [pc, #148]	; (8028ccc <USBD_CDC_Init+0x1ec>)
 8028c38:	781b      	ldrb	r3, [r3, #0]
 8028c3a:	f003 020f 	and.w	r2, r3, #15
 8028c3e:	6879      	ldr	r1, [r7, #4]
 8028c40:	4613      	mov	r3, r2
 8028c42:	009b      	lsls	r3, r3, #2
 8028c44:	4413      	add	r3, r2
 8028c46:	009b      	lsls	r3, r3, #2
 8028c48:	440b      	add	r3, r1
 8028c4a:	3324      	adds	r3, #36	; 0x24
 8028c4c:	2201      	movs	r2, #1
 8028c4e:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8028c50:	68fb      	ldr	r3, [r7, #12]
 8028c52:	2200      	movs	r2, #0
 8028c54:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8028c58:	687b      	ldr	r3, [r7, #4]
 8028c5a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8028c5e:	687a      	ldr	r2, [r7, #4]
 8028c60:	33b0      	adds	r3, #176	; 0xb0
 8028c62:	009b      	lsls	r3, r3, #2
 8028c64:	4413      	add	r3, r2
 8028c66:	685b      	ldr	r3, [r3, #4]
 8028c68:	681b      	ldr	r3, [r3, #0]
 8028c6a:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8028c6c:	68fb      	ldr	r3, [r7, #12]
 8028c6e:	2200      	movs	r2, #0
 8028c70:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8028c74:	68fb      	ldr	r3, [r7, #12]
 8028c76:	2200      	movs	r2, #0
 8028c78:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8028c7c:	68fb      	ldr	r3, [r7, #12]
 8028c7e:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8028c82:	2b00      	cmp	r3, #0
 8028c84:	d101      	bne.n	8028c8a <USBD_CDC_Init+0x1aa>
  {
    return (uint8_t)USBD_EMEM;
 8028c86:	2302      	movs	r3, #2
 8028c88:	e018      	b.n	8028cbc <USBD_CDC_Init+0x1dc>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8028c8a:	687b      	ldr	r3, [r7, #4]
 8028c8c:	7c1b      	ldrb	r3, [r3, #16]
 8028c8e:	2b00      	cmp	r3, #0
 8028c90:	d10a      	bne.n	8028ca8 <USBD_CDC_Init+0x1c8>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8028c92:	4b0d      	ldr	r3, [pc, #52]	; (8028cc8 <USBD_CDC_Init+0x1e8>)
 8028c94:	7819      	ldrb	r1, [r3, #0]
 8028c96:	68fb      	ldr	r3, [r7, #12]
 8028c98:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8028c9c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8028ca0:	6878      	ldr	r0, [r7, #4]
 8028ca2:	f002 fd01 	bl	802b6a8 <USBD_LL_PrepareReceive>
 8028ca6:	e008      	b.n	8028cba <USBD_CDC_Init+0x1da>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8028ca8:	4b07      	ldr	r3, [pc, #28]	; (8028cc8 <USBD_CDC_Init+0x1e8>)
 8028caa:	7819      	ldrb	r1, [r3, #0]
 8028cac:	68fb      	ldr	r3, [r7, #12]
 8028cae:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8028cb2:	2340      	movs	r3, #64	; 0x40
 8028cb4:	6878      	ldr	r0, [r7, #4]
 8028cb6:	f002 fcf7 	bl	802b6a8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8028cba:	2300      	movs	r3, #0
}
 8028cbc:	4618      	mov	r0, r3
 8028cbe:	3710      	adds	r7, #16
 8028cc0:	46bd      	mov	sp, r7
 8028cc2:	bd80      	pop	{r7, pc}
 8028cc4:	20000093 	.word	0x20000093
 8028cc8:	20000094 	.word	0x20000094
 8028ccc:	20000095 	.word	0x20000095

08028cd0 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8028cd0:	b580      	push	{r7, lr}
 8028cd2:	b082      	sub	sp, #8
 8028cd4:	af00      	add	r7, sp, #0
 8028cd6:	6078      	str	r0, [r7, #4]
 8028cd8:	460b      	mov	r3, r1
 8028cda:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8028cdc:	4b3a      	ldr	r3, [pc, #232]	; (8028dc8 <USBD_CDC_DeInit+0xf8>)
 8028cde:	781b      	ldrb	r3, [r3, #0]
 8028ce0:	4619      	mov	r1, r3
 8028ce2:	6878      	ldr	r0, [r7, #4]
 8028ce4:	f002 fc17 	bl	802b516 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8028ce8:	4b37      	ldr	r3, [pc, #220]	; (8028dc8 <USBD_CDC_DeInit+0xf8>)
 8028cea:	781b      	ldrb	r3, [r3, #0]
 8028cec:	f003 020f 	and.w	r2, r3, #15
 8028cf0:	6879      	ldr	r1, [r7, #4]
 8028cf2:	4613      	mov	r3, r2
 8028cf4:	009b      	lsls	r3, r3, #2
 8028cf6:	4413      	add	r3, r2
 8028cf8:	009b      	lsls	r3, r3, #2
 8028cfa:	440b      	add	r3, r1
 8028cfc:	3324      	adds	r3, #36	; 0x24
 8028cfe:	2200      	movs	r2, #0
 8028d00:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8028d02:	4b32      	ldr	r3, [pc, #200]	; (8028dcc <USBD_CDC_DeInit+0xfc>)
 8028d04:	781b      	ldrb	r3, [r3, #0]
 8028d06:	4619      	mov	r1, r3
 8028d08:	6878      	ldr	r0, [r7, #4]
 8028d0a:	f002 fc04 	bl	802b516 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8028d0e:	4b2f      	ldr	r3, [pc, #188]	; (8028dcc <USBD_CDC_DeInit+0xfc>)
 8028d10:	781b      	ldrb	r3, [r3, #0]
 8028d12:	f003 020f 	and.w	r2, r3, #15
 8028d16:	6879      	ldr	r1, [r7, #4]
 8028d18:	4613      	mov	r3, r2
 8028d1a:	009b      	lsls	r3, r3, #2
 8028d1c:	4413      	add	r3, r2
 8028d1e:	009b      	lsls	r3, r3, #2
 8028d20:	440b      	add	r3, r1
 8028d22:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8028d26:	2200      	movs	r2, #0
 8028d28:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8028d2a:	4b29      	ldr	r3, [pc, #164]	; (8028dd0 <USBD_CDC_DeInit+0x100>)
 8028d2c:	781b      	ldrb	r3, [r3, #0]
 8028d2e:	4619      	mov	r1, r3
 8028d30:	6878      	ldr	r0, [r7, #4]
 8028d32:	f002 fbf0 	bl	802b516 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8028d36:	4b26      	ldr	r3, [pc, #152]	; (8028dd0 <USBD_CDC_DeInit+0x100>)
 8028d38:	781b      	ldrb	r3, [r3, #0]
 8028d3a:	f003 020f 	and.w	r2, r3, #15
 8028d3e:	6879      	ldr	r1, [r7, #4]
 8028d40:	4613      	mov	r3, r2
 8028d42:	009b      	lsls	r3, r3, #2
 8028d44:	4413      	add	r3, r2
 8028d46:	009b      	lsls	r3, r3, #2
 8028d48:	440b      	add	r3, r1
 8028d4a:	3324      	adds	r3, #36	; 0x24
 8028d4c:	2200      	movs	r2, #0
 8028d4e:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8028d50:	4b1f      	ldr	r3, [pc, #124]	; (8028dd0 <USBD_CDC_DeInit+0x100>)
 8028d52:	781b      	ldrb	r3, [r3, #0]
 8028d54:	f003 020f 	and.w	r2, r3, #15
 8028d58:	6879      	ldr	r1, [r7, #4]
 8028d5a:	4613      	mov	r3, r2
 8028d5c:	009b      	lsls	r3, r3, #2
 8028d5e:	4413      	add	r3, r2
 8028d60:	009b      	lsls	r3, r3, #2
 8028d62:	440b      	add	r3, r1
 8028d64:	3326      	adds	r3, #38	; 0x26
 8028d66:	2200      	movs	r2, #0
 8028d68:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8028d6a:	687b      	ldr	r3, [r7, #4]
 8028d6c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8028d70:	687b      	ldr	r3, [r7, #4]
 8028d72:	32b0      	adds	r2, #176	; 0xb0
 8028d74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8028d78:	2b00      	cmp	r3, #0
 8028d7a:	d01f      	beq.n	8028dbc <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8028d7c:	687b      	ldr	r3, [r7, #4]
 8028d7e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8028d82:	687a      	ldr	r2, [r7, #4]
 8028d84:	33b0      	adds	r3, #176	; 0xb0
 8028d86:	009b      	lsls	r3, r3, #2
 8028d88:	4413      	add	r3, r2
 8028d8a:	685b      	ldr	r3, [r3, #4]
 8028d8c:	685b      	ldr	r3, [r3, #4]
 8028d8e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8028d90:	687b      	ldr	r3, [r7, #4]
 8028d92:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8028d96:	687b      	ldr	r3, [r7, #4]
 8028d98:	32b0      	adds	r2, #176	; 0xb0
 8028d9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8028d9e:	4618      	mov	r0, r3
 8028da0:	f002 fd3e 	bl	802b820 <free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8028da4:	687b      	ldr	r3, [r7, #4]
 8028da6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8028daa:	687b      	ldr	r3, [r7, #4]
 8028dac:	32b0      	adds	r2, #176	; 0xb0
 8028dae:	2100      	movs	r1, #0
 8028db0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8028db4:	687b      	ldr	r3, [r7, #4]
 8028db6:	2200      	movs	r2, #0
 8028db8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8028dbc:	2300      	movs	r3, #0
}
 8028dbe:	4618      	mov	r0, r3
 8028dc0:	3708      	adds	r7, #8
 8028dc2:	46bd      	mov	sp, r7
 8028dc4:	bd80      	pop	{r7, pc}
 8028dc6:	bf00      	nop
 8028dc8:	20000093 	.word	0x20000093
 8028dcc:	20000094 	.word	0x20000094
 8028dd0:	20000095 	.word	0x20000095

08028dd4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8028dd4:	b580      	push	{r7, lr}
 8028dd6:	b086      	sub	sp, #24
 8028dd8:	af00      	add	r7, sp, #0
 8028dda:	6078      	str	r0, [r7, #4]
 8028ddc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8028dde:	687b      	ldr	r3, [r7, #4]
 8028de0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8028de4:	687b      	ldr	r3, [r7, #4]
 8028de6:	32b0      	adds	r2, #176	; 0xb0
 8028de8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8028dec:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8028dee:	2300      	movs	r3, #0
 8028df0:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8028df2:	2300      	movs	r3, #0
 8028df4:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8028df6:	2300      	movs	r3, #0
 8028df8:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8028dfa:	693b      	ldr	r3, [r7, #16]
 8028dfc:	2b00      	cmp	r3, #0
 8028dfe:	d101      	bne.n	8028e04 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8028e00:	2303      	movs	r3, #3
 8028e02:	e0bf      	b.n	8028f84 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8028e04:	683b      	ldr	r3, [r7, #0]
 8028e06:	781b      	ldrb	r3, [r3, #0]
 8028e08:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8028e0c:	2b00      	cmp	r3, #0
 8028e0e:	d050      	beq.n	8028eb2 <USBD_CDC_Setup+0xde>
 8028e10:	2b20      	cmp	r3, #32
 8028e12:	f040 80af 	bne.w	8028f74 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8028e16:	683b      	ldr	r3, [r7, #0]
 8028e18:	88db      	ldrh	r3, [r3, #6]
 8028e1a:	2b00      	cmp	r3, #0
 8028e1c:	d03a      	beq.n	8028e94 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8028e1e:	683b      	ldr	r3, [r7, #0]
 8028e20:	781b      	ldrb	r3, [r3, #0]
 8028e22:	b25b      	sxtb	r3, r3
 8028e24:	2b00      	cmp	r3, #0
 8028e26:	da1b      	bge.n	8028e60 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8028e28:	687b      	ldr	r3, [r7, #4]
 8028e2a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8028e2e:	687a      	ldr	r2, [r7, #4]
 8028e30:	33b0      	adds	r3, #176	; 0xb0
 8028e32:	009b      	lsls	r3, r3, #2
 8028e34:	4413      	add	r3, r2
 8028e36:	685b      	ldr	r3, [r3, #4]
 8028e38:	689b      	ldr	r3, [r3, #8]
 8028e3a:	683a      	ldr	r2, [r7, #0]
 8028e3c:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8028e3e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8028e40:	683a      	ldr	r2, [r7, #0]
 8028e42:	88d2      	ldrh	r2, [r2, #6]
 8028e44:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8028e46:	683b      	ldr	r3, [r7, #0]
 8028e48:	88db      	ldrh	r3, [r3, #6]
 8028e4a:	2b07      	cmp	r3, #7
 8028e4c:	bf28      	it	cs
 8028e4e:	2307      	movcs	r3, #7
 8028e50:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8028e52:	693b      	ldr	r3, [r7, #16]
 8028e54:	89fa      	ldrh	r2, [r7, #14]
 8028e56:	4619      	mov	r1, r3
 8028e58:	6878      	ldr	r0, [r7, #4]
 8028e5a:	f001 fdf9 	bl	802aa50 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8028e5e:	e090      	b.n	8028f82 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8028e60:	683b      	ldr	r3, [r7, #0]
 8028e62:	785a      	ldrb	r2, [r3, #1]
 8028e64:	693b      	ldr	r3, [r7, #16]
 8028e66:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8028e6a:	683b      	ldr	r3, [r7, #0]
 8028e6c:	88db      	ldrh	r3, [r3, #6]
 8028e6e:	2b3f      	cmp	r3, #63	; 0x3f
 8028e70:	d803      	bhi.n	8028e7a <USBD_CDC_Setup+0xa6>
 8028e72:	683b      	ldr	r3, [r7, #0]
 8028e74:	88db      	ldrh	r3, [r3, #6]
 8028e76:	b2da      	uxtb	r2, r3
 8028e78:	e000      	b.n	8028e7c <USBD_CDC_Setup+0xa8>
 8028e7a:	2240      	movs	r2, #64	; 0x40
 8028e7c:	693b      	ldr	r3, [r7, #16]
 8028e7e:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8028e82:	6939      	ldr	r1, [r7, #16]
 8028e84:	693b      	ldr	r3, [r7, #16]
 8028e86:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8028e8a:	461a      	mov	r2, r3
 8028e8c:	6878      	ldr	r0, [r7, #4]
 8028e8e:	f001 fe0b 	bl	802aaa8 <USBD_CtlPrepareRx>
      break;
 8028e92:	e076      	b.n	8028f82 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8028e94:	687b      	ldr	r3, [r7, #4]
 8028e96:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8028e9a:	687a      	ldr	r2, [r7, #4]
 8028e9c:	33b0      	adds	r3, #176	; 0xb0
 8028e9e:	009b      	lsls	r3, r3, #2
 8028ea0:	4413      	add	r3, r2
 8028ea2:	685b      	ldr	r3, [r3, #4]
 8028ea4:	689b      	ldr	r3, [r3, #8]
 8028ea6:	683a      	ldr	r2, [r7, #0]
 8028ea8:	7850      	ldrb	r0, [r2, #1]
 8028eaa:	2200      	movs	r2, #0
 8028eac:	6839      	ldr	r1, [r7, #0]
 8028eae:	4798      	blx	r3
      break;
 8028eb0:	e067      	b.n	8028f82 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8028eb2:	683b      	ldr	r3, [r7, #0]
 8028eb4:	785b      	ldrb	r3, [r3, #1]
 8028eb6:	2b0b      	cmp	r3, #11
 8028eb8:	d851      	bhi.n	8028f5e <USBD_CDC_Setup+0x18a>
 8028eba:	a201      	add	r2, pc, #4	; (adr r2, 8028ec0 <USBD_CDC_Setup+0xec>)
 8028ebc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8028ec0:	08028ef1 	.word	0x08028ef1
 8028ec4:	08028f6d 	.word	0x08028f6d
 8028ec8:	08028f5f 	.word	0x08028f5f
 8028ecc:	08028f5f 	.word	0x08028f5f
 8028ed0:	08028f5f 	.word	0x08028f5f
 8028ed4:	08028f5f 	.word	0x08028f5f
 8028ed8:	08028f5f 	.word	0x08028f5f
 8028edc:	08028f5f 	.word	0x08028f5f
 8028ee0:	08028f5f 	.word	0x08028f5f
 8028ee4:	08028f5f 	.word	0x08028f5f
 8028ee8:	08028f1b 	.word	0x08028f1b
 8028eec:	08028f45 	.word	0x08028f45
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8028ef0:	687b      	ldr	r3, [r7, #4]
 8028ef2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8028ef6:	b2db      	uxtb	r3, r3
 8028ef8:	2b03      	cmp	r3, #3
 8028efa:	d107      	bne.n	8028f0c <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8028efc:	f107 030a 	add.w	r3, r7, #10
 8028f00:	2202      	movs	r2, #2
 8028f02:	4619      	mov	r1, r3
 8028f04:	6878      	ldr	r0, [r7, #4]
 8028f06:	f001 fda3 	bl	802aa50 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8028f0a:	e032      	b.n	8028f72 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8028f0c:	6839      	ldr	r1, [r7, #0]
 8028f0e:	6878      	ldr	r0, [r7, #4]
 8028f10:	f001 fd2d 	bl	802a96e <USBD_CtlError>
            ret = USBD_FAIL;
 8028f14:	2303      	movs	r3, #3
 8028f16:	75fb      	strb	r3, [r7, #23]
          break;
 8028f18:	e02b      	b.n	8028f72 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8028f1a:	687b      	ldr	r3, [r7, #4]
 8028f1c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8028f20:	b2db      	uxtb	r3, r3
 8028f22:	2b03      	cmp	r3, #3
 8028f24:	d107      	bne.n	8028f36 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8028f26:	f107 030d 	add.w	r3, r7, #13
 8028f2a:	2201      	movs	r2, #1
 8028f2c:	4619      	mov	r1, r3
 8028f2e:	6878      	ldr	r0, [r7, #4]
 8028f30:	f001 fd8e 	bl	802aa50 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8028f34:	e01d      	b.n	8028f72 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8028f36:	6839      	ldr	r1, [r7, #0]
 8028f38:	6878      	ldr	r0, [r7, #4]
 8028f3a:	f001 fd18 	bl	802a96e <USBD_CtlError>
            ret = USBD_FAIL;
 8028f3e:	2303      	movs	r3, #3
 8028f40:	75fb      	strb	r3, [r7, #23]
          break;
 8028f42:	e016      	b.n	8028f72 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8028f44:	687b      	ldr	r3, [r7, #4]
 8028f46:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8028f4a:	b2db      	uxtb	r3, r3
 8028f4c:	2b03      	cmp	r3, #3
 8028f4e:	d00f      	beq.n	8028f70 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8028f50:	6839      	ldr	r1, [r7, #0]
 8028f52:	6878      	ldr	r0, [r7, #4]
 8028f54:	f001 fd0b 	bl	802a96e <USBD_CtlError>
            ret = USBD_FAIL;
 8028f58:	2303      	movs	r3, #3
 8028f5a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8028f5c:	e008      	b.n	8028f70 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8028f5e:	6839      	ldr	r1, [r7, #0]
 8028f60:	6878      	ldr	r0, [r7, #4]
 8028f62:	f001 fd04 	bl	802a96e <USBD_CtlError>
          ret = USBD_FAIL;
 8028f66:	2303      	movs	r3, #3
 8028f68:	75fb      	strb	r3, [r7, #23]
          break;
 8028f6a:	e002      	b.n	8028f72 <USBD_CDC_Setup+0x19e>
          break;
 8028f6c:	bf00      	nop
 8028f6e:	e008      	b.n	8028f82 <USBD_CDC_Setup+0x1ae>
          break;
 8028f70:	bf00      	nop
      }
      break;
 8028f72:	e006      	b.n	8028f82 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8028f74:	6839      	ldr	r1, [r7, #0]
 8028f76:	6878      	ldr	r0, [r7, #4]
 8028f78:	f001 fcf9 	bl	802a96e <USBD_CtlError>
      ret = USBD_FAIL;
 8028f7c:	2303      	movs	r3, #3
 8028f7e:	75fb      	strb	r3, [r7, #23]
      break;
 8028f80:	bf00      	nop
  }

  return (uint8_t)ret;
 8028f82:	7dfb      	ldrb	r3, [r7, #23]
}
 8028f84:	4618      	mov	r0, r3
 8028f86:	3718      	adds	r7, #24
 8028f88:	46bd      	mov	sp, r7
 8028f8a:	bd80      	pop	{r7, pc}

08028f8c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8028f8c:	b580      	push	{r7, lr}
 8028f8e:	b084      	sub	sp, #16
 8028f90:	af00      	add	r7, sp, #0
 8028f92:	6078      	str	r0, [r7, #4]
 8028f94:	460b      	mov	r3, r1
 8028f96:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8028f98:	687b      	ldr	r3, [r7, #4]
 8028f9a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8028f9e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8028fa0:	687b      	ldr	r3, [r7, #4]
 8028fa2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8028fa6:	687b      	ldr	r3, [r7, #4]
 8028fa8:	32b0      	adds	r2, #176	; 0xb0
 8028faa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8028fae:	2b00      	cmp	r3, #0
 8028fb0:	d101      	bne.n	8028fb6 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8028fb2:	2303      	movs	r3, #3
 8028fb4:	e065      	b.n	8029082 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8028fb6:	687b      	ldr	r3, [r7, #4]
 8028fb8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8028fbc:	687b      	ldr	r3, [r7, #4]
 8028fbe:	32b0      	adds	r2, #176	; 0xb0
 8028fc0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8028fc4:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8028fc6:	78fb      	ldrb	r3, [r7, #3]
 8028fc8:	f003 020f 	and.w	r2, r3, #15
 8028fcc:	6879      	ldr	r1, [r7, #4]
 8028fce:	4613      	mov	r3, r2
 8028fd0:	009b      	lsls	r3, r3, #2
 8028fd2:	4413      	add	r3, r2
 8028fd4:	009b      	lsls	r3, r3, #2
 8028fd6:	440b      	add	r3, r1
 8028fd8:	3318      	adds	r3, #24
 8028fda:	681b      	ldr	r3, [r3, #0]
 8028fdc:	2b00      	cmp	r3, #0
 8028fde:	d02f      	beq.n	8029040 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8028fe0:	78fb      	ldrb	r3, [r7, #3]
 8028fe2:	f003 020f 	and.w	r2, r3, #15
 8028fe6:	6879      	ldr	r1, [r7, #4]
 8028fe8:	4613      	mov	r3, r2
 8028fea:	009b      	lsls	r3, r3, #2
 8028fec:	4413      	add	r3, r2
 8028fee:	009b      	lsls	r3, r3, #2
 8028ff0:	440b      	add	r3, r1
 8028ff2:	3318      	adds	r3, #24
 8028ff4:	681a      	ldr	r2, [r3, #0]
 8028ff6:	78fb      	ldrb	r3, [r7, #3]
 8028ff8:	f003 010f 	and.w	r1, r3, #15
 8028ffc:	68f8      	ldr	r0, [r7, #12]
 8028ffe:	460b      	mov	r3, r1
 8029000:	00db      	lsls	r3, r3, #3
 8029002:	440b      	add	r3, r1
 8029004:	009b      	lsls	r3, r3, #2
 8029006:	4403      	add	r3, r0
 8029008:	3348      	adds	r3, #72	; 0x48
 802900a:	681b      	ldr	r3, [r3, #0]
 802900c:	fbb2 f1f3 	udiv	r1, r2, r3
 8029010:	fb01 f303 	mul.w	r3, r1, r3
 8029014:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8029016:	2b00      	cmp	r3, #0
 8029018:	d112      	bne.n	8029040 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 802901a:	78fb      	ldrb	r3, [r7, #3]
 802901c:	f003 020f 	and.w	r2, r3, #15
 8029020:	6879      	ldr	r1, [r7, #4]
 8029022:	4613      	mov	r3, r2
 8029024:	009b      	lsls	r3, r3, #2
 8029026:	4413      	add	r3, r2
 8029028:	009b      	lsls	r3, r3, #2
 802902a:	440b      	add	r3, r1
 802902c:	3318      	adds	r3, #24
 802902e:	2200      	movs	r2, #0
 8029030:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8029032:	78f9      	ldrb	r1, [r7, #3]
 8029034:	2300      	movs	r3, #0
 8029036:	2200      	movs	r2, #0
 8029038:	6878      	ldr	r0, [r7, #4]
 802903a:	f002 fb14 	bl	802b666 <USBD_LL_Transmit>
 802903e:	e01f      	b.n	8029080 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8029040:	68bb      	ldr	r3, [r7, #8]
 8029042:	2200      	movs	r2, #0
 8029044:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8029048:	687b      	ldr	r3, [r7, #4]
 802904a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 802904e:	687a      	ldr	r2, [r7, #4]
 8029050:	33b0      	adds	r3, #176	; 0xb0
 8029052:	009b      	lsls	r3, r3, #2
 8029054:	4413      	add	r3, r2
 8029056:	685b      	ldr	r3, [r3, #4]
 8029058:	691b      	ldr	r3, [r3, #16]
 802905a:	2b00      	cmp	r3, #0
 802905c:	d010      	beq.n	8029080 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 802905e:	687b      	ldr	r3, [r7, #4]
 8029060:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8029064:	687a      	ldr	r2, [r7, #4]
 8029066:	33b0      	adds	r3, #176	; 0xb0
 8029068:	009b      	lsls	r3, r3, #2
 802906a:	4413      	add	r3, r2
 802906c:	685b      	ldr	r3, [r3, #4]
 802906e:	691b      	ldr	r3, [r3, #16]
 8029070:	68ba      	ldr	r2, [r7, #8]
 8029072:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8029076:	68ba      	ldr	r2, [r7, #8]
 8029078:	f502 7104 	add.w	r1, r2, #528	; 0x210
 802907c:	78fa      	ldrb	r2, [r7, #3]
 802907e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8029080:	2300      	movs	r3, #0
}
 8029082:	4618      	mov	r0, r3
 8029084:	3710      	adds	r7, #16
 8029086:	46bd      	mov	sp, r7
 8029088:	bd80      	pop	{r7, pc}

0802908a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 802908a:	b580      	push	{r7, lr}
 802908c:	b084      	sub	sp, #16
 802908e:	af00      	add	r7, sp, #0
 8029090:	6078      	str	r0, [r7, #4]
 8029092:	460b      	mov	r3, r1
 8029094:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8029096:	687b      	ldr	r3, [r7, #4]
 8029098:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 802909c:	687b      	ldr	r3, [r7, #4]
 802909e:	32b0      	adds	r2, #176	; 0xb0
 80290a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80290a4:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80290a6:	687b      	ldr	r3, [r7, #4]
 80290a8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80290ac:	687b      	ldr	r3, [r7, #4]
 80290ae:	32b0      	adds	r2, #176	; 0xb0
 80290b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80290b4:	2b00      	cmp	r3, #0
 80290b6:	d101      	bne.n	80290bc <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80290b8:	2303      	movs	r3, #3
 80290ba:	e01a      	b.n	80290f2 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80290bc:	78fb      	ldrb	r3, [r7, #3]
 80290be:	4619      	mov	r1, r3
 80290c0:	6878      	ldr	r0, [r7, #4]
 80290c2:	f002 fb12 	bl	802b6ea <USBD_LL_GetRxDataSize>
 80290c6:	4602      	mov	r2, r0
 80290c8:	68fb      	ldr	r3, [r7, #12]
 80290ca:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80290ce:	687b      	ldr	r3, [r7, #4]
 80290d0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80290d4:	687a      	ldr	r2, [r7, #4]
 80290d6:	33b0      	adds	r3, #176	; 0xb0
 80290d8:	009b      	lsls	r3, r3, #2
 80290da:	4413      	add	r3, r2
 80290dc:	685b      	ldr	r3, [r3, #4]
 80290de:	68db      	ldr	r3, [r3, #12]
 80290e0:	68fa      	ldr	r2, [r7, #12]
 80290e2:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80290e6:	68fa      	ldr	r2, [r7, #12]
 80290e8:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80290ec:	4611      	mov	r1, r2
 80290ee:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80290f0:	2300      	movs	r3, #0
}
 80290f2:	4618      	mov	r0, r3
 80290f4:	3710      	adds	r7, #16
 80290f6:	46bd      	mov	sp, r7
 80290f8:	bd80      	pop	{r7, pc}

080290fa <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80290fa:	b580      	push	{r7, lr}
 80290fc:	b084      	sub	sp, #16
 80290fe:	af00      	add	r7, sp, #0
 8029100:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8029102:	687b      	ldr	r3, [r7, #4]
 8029104:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8029108:	687b      	ldr	r3, [r7, #4]
 802910a:	32b0      	adds	r2, #176	; 0xb0
 802910c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8029110:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8029112:	68fb      	ldr	r3, [r7, #12]
 8029114:	2b00      	cmp	r3, #0
 8029116:	d101      	bne.n	802911c <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8029118:	2303      	movs	r3, #3
 802911a:	e025      	b.n	8029168 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 802911c:	687b      	ldr	r3, [r7, #4]
 802911e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8029122:	687a      	ldr	r2, [r7, #4]
 8029124:	33b0      	adds	r3, #176	; 0xb0
 8029126:	009b      	lsls	r3, r3, #2
 8029128:	4413      	add	r3, r2
 802912a:	685b      	ldr	r3, [r3, #4]
 802912c:	2b00      	cmp	r3, #0
 802912e:	d01a      	beq.n	8029166 <USBD_CDC_EP0_RxReady+0x6c>
 8029130:	68fb      	ldr	r3, [r7, #12]
 8029132:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8029136:	2bff      	cmp	r3, #255	; 0xff
 8029138:	d015      	beq.n	8029166 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 802913a:	687b      	ldr	r3, [r7, #4]
 802913c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8029140:	687a      	ldr	r2, [r7, #4]
 8029142:	33b0      	adds	r3, #176	; 0xb0
 8029144:	009b      	lsls	r3, r3, #2
 8029146:	4413      	add	r3, r2
 8029148:	685b      	ldr	r3, [r3, #4]
 802914a:	689b      	ldr	r3, [r3, #8]
 802914c:	68fa      	ldr	r2, [r7, #12]
 802914e:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8029152:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8029154:	68fa      	ldr	r2, [r7, #12]
 8029156:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 802915a:	b292      	uxth	r2, r2
 802915c:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 802915e:	68fb      	ldr	r3, [r7, #12]
 8029160:	22ff      	movs	r2, #255	; 0xff
 8029162:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8029166:	2300      	movs	r3, #0
}
 8029168:	4618      	mov	r0, r3
 802916a:	3710      	adds	r7, #16
 802916c:	46bd      	mov	sp, r7
 802916e:	bd80      	pop	{r7, pc}

08029170 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8029170:	b580      	push	{r7, lr}
 8029172:	b086      	sub	sp, #24
 8029174:	af00      	add	r7, sp, #0
 8029176:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8029178:	2182      	movs	r1, #130	; 0x82
 802917a:	4818      	ldr	r0, [pc, #96]	; (80291dc <USBD_CDC_GetFSCfgDesc+0x6c>)
 802917c:	f000 fd94 	bl	8029ca8 <USBD_GetEpDesc>
 8029180:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8029182:	2101      	movs	r1, #1
 8029184:	4815      	ldr	r0, [pc, #84]	; (80291dc <USBD_CDC_GetFSCfgDesc+0x6c>)
 8029186:	f000 fd8f 	bl	8029ca8 <USBD_GetEpDesc>
 802918a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 802918c:	2181      	movs	r1, #129	; 0x81
 802918e:	4813      	ldr	r0, [pc, #76]	; (80291dc <USBD_CDC_GetFSCfgDesc+0x6c>)
 8029190:	f000 fd8a 	bl	8029ca8 <USBD_GetEpDesc>
 8029194:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8029196:	697b      	ldr	r3, [r7, #20]
 8029198:	2b00      	cmp	r3, #0
 802919a:	d002      	beq.n	80291a2 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 802919c:	697b      	ldr	r3, [r7, #20]
 802919e:	2210      	movs	r2, #16
 80291a0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80291a2:	693b      	ldr	r3, [r7, #16]
 80291a4:	2b00      	cmp	r3, #0
 80291a6:	d006      	beq.n	80291b6 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80291a8:	693b      	ldr	r3, [r7, #16]
 80291aa:	2200      	movs	r2, #0
 80291ac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80291b0:	711a      	strb	r2, [r3, #4]
 80291b2:	2200      	movs	r2, #0
 80291b4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80291b6:	68fb      	ldr	r3, [r7, #12]
 80291b8:	2b00      	cmp	r3, #0
 80291ba:	d006      	beq.n	80291ca <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80291bc:	68fb      	ldr	r3, [r7, #12]
 80291be:	2200      	movs	r2, #0
 80291c0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80291c4:	711a      	strb	r2, [r3, #4]
 80291c6:	2200      	movs	r2, #0
 80291c8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80291ca:	687b      	ldr	r3, [r7, #4]
 80291cc:	2243      	movs	r2, #67	; 0x43
 80291ce:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80291d0:	4b02      	ldr	r3, [pc, #8]	; (80291dc <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 80291d2:	4618      	mov	r0, r3
 80291d4:	3718      	adds	r7, #24
 80291d6:	46bd      	mov	sp, r7
 80291d8:	bd80      	pop	{r7, pc}
 80291da:	bf00      	nop
 80291dc:	20000050 	.word	0x20000050

080291e0 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80291e0:	b580      	push	{r7, lr}
 80291e2:	b086      	sub	sp, #24
 80291e4:	af00      	add	r7, sp, #0
 80291e6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80291e8:	2182      	movs	r1, #130	; 0x82
 80291ea:	4818      	ldr	r0, [pc, #96]	; (802924c <USBD_CDC_GetHSCfgDesc+0x6c>)
 80291ec:	f000 fd5c 	bl	8029ca8 <USBD_GetEpDesc>
 80291f0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80291f2:	2101      	movs	r1, #1
 80291f4:	4815      	ldr	r0, [pc, #84]	; (802924c <USBD_CDC_GetHSCfgDesc+0x6c>)
 80291f6:	f000 fd57 	bl	8029ca8 <USBD_GetEpDesc>
 80291fa:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80291fc:	2181      	movs	r1, #129	; 0x81
 80291fe:	4813      	ldr	r0, [pc, #76]	; (802924c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8029200:	f000 fd52 	bl	8029ca8 <USBD_GetEpDesc>
 8029204:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8029206:	697b      	ldr	r3, [r7, #20]
 8029208:	2b00      	cmp	r3, #0
 802920a:	d002      	beq.n	8029212 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 802920c:	697b      	ldr	r3, [r7, #20]
 802920e:	2210      	movs	r2, #16
 8029210:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8029212:	693b      	ldr	r3, [r7, #16]
 8029214:	2b00      	cmp	r3, #0
 8029216:	d006      	beq.n	8029226 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8029218:	693b      	ldr	r3, [r7, #16]
 802921a:	2200      	movs	r2, #0
 802921c:	711a      	strb	r2, [r3, #4]
 802921e:	2200      	movs	r2, #0
 8029220:	f042 0202 	orr.w	r2, r2, #2
 8029224:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8029226:	68fb      	ldr	r3, [r7, #12]
 8029228:	2b00      	cmp	r3, #0
 802922a:	d006      	beq.n	802923a <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 802922c:	68fb      	ldr	r3, [r7, #12]
 802922e:	2200      	movs	r2, #0
 8029230:	711a      	strb	r2, [r3, #4]
 8029232:	2200      	movs	r2, #0
 8029234:	f042 0202 	orr.w	r2, r2, #2
 8029238:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 802923a:	687b      	ldr	r3, [r7, #4]
 802923c:	2243      	movs	r2, #67	; 0x43
 802923e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8029240:	4b02      	ldr	r3, [pc, #8]	; (802924c <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8029242:	4618      	mov	r0, r3
 8029244:	3718      	adds	r7, #24
 8029246:	46bd      	mov	sp, r7
 8029248:	bd80      	pop	{r7, pc}
 802924a:	bf00      	nop
 802924c:	20000050 	.word	0x20000050

08029250 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8029250:	b580      	push	{r7, lr}
 8029252:	b086      	sub	sp, #24
 8029254:	af00      	add	r7, sp, #0
 8029256:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8029258:	2182      	movs	r1, #130	; 0x82
 802925a:	4818      	ldr	r0, [pc, #96]	; (80292bc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 802925c:	f000 fd24 	bl	8029ca8 <USBD_GetEpDesc>
 8029260:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8029262:	2101      	movs	r1, #1
 8029264:	4815      	ldr	r0, [pc, #84]	; (80292bc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8029266:	f000 fd1f 	bl	8029ca8 <USBD_GetEpDesc>
 802926a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 802926c:	2181      	movs	r1, #129	; 0x81
 802926e:	4813      	ldr	r0, [pc, #76]	; (80292bc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8029270:	f000 fd1a 	bl	8029ca8 <USBD_GetEpDesc>
 8029274:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8029276:	697b      	ldr	r3, [r7, #20]
 8029278:	2b00      	cmp	r3, #0
 802927a:	d002      	beq.n	8029282 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 802927c:	697b      	ldr	r3, [r7, #20]
 802927e:	2210      	movs	r2, #16
 8029280:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8029282:	693b      	ldr	r3, [r7, #16]
 8029284:	2b00      	cmp	r3, #0
 8029286:	d006      	beq.n	8029296 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8029288:	693b      	ldr	r3, [r7, #16]
 802928a:	2200      	movs	r2, #0
 802928c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8029290:	711a      	strb	r2, [r3, #4]
 8029292:	2200      	movs	r2, #0
 8029294:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8029296:	68fb      	ldr	r3, [r7, #12]
 8029298:	2b00      	cmp	r3, #0
 802929a:	d006      	beq.n	80292aa <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 802929c:	68fb      	ldr	r3, [r7, #12]
 802929e:	2200      	movs	r2, #0
 80292a0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80292a4:	711a      	strb	r2, [r3, #4]
 80292a6:	2200      	movs	r2, #0
 80292a8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80292aa:	687b      	ldr	r3, [r7, #4]
 80292ac:	2243      	movs	r2, #67	; 0x43
 80292ae:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80292b0:	4b02      	ldr	r3, [pc, #8]	; (80292bc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 80292b2:	4618      	mov	r0, r3
 80292b4:	3718      	adds	r7, #24
 80292b6:	46bd      	mov	sp, r7
 80292b8:	bd80      	pop	{r7, pc}
 80292ba:	bf00      	nop
 80292bc:	20000050 	.word	0x20000050

080292c0 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80292c0:	b480      	push	{r7}
 80292c2:	b083      	sub	sp, #12
 80292c4:	af00      	add	r7, sp, #0
 80292c6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80292c8:	687b      	ldr	r3, [r7, #4]
 80292ca:	220a      	movs	r2, #10
 80292cc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80292ce:	4b03      	ldr	r3, [pc, #12]	; (80292dc <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80292d0:	4618      	mov	r0, r3
 80292d2:	370c      	adds	r7, #12
 80292d4:	46bd      	mov	sp, r7
 80292d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80292da:	4770      	bx	lr
 80292dc:	2000000c 	.word	0x2000000c

080292e0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80292e0:	b480      	push	{r7}
 80292e2:	b083      	sub	sp, #12
 80292e4:	af00      	add	r7, sp, #0
 80292e6:	6078      	str	r0, [r7, #4]
 80292e8:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80292ea:	683b      	ldr	r3, [r7, #0]
 80292ec:	2b00      	cmp	r3, #0
 80292ee:	d101      	bne.n	80292f4 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80292f0:	2303      	movs	r3, #3
 80292f2:	e009      	b.n	8029308 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 80292f4:	687b      	ldr	r3, [r7, #4]
 80292f6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80292fa:	687a      	ldr	r2, [r7, #4]
 80292fc:	33b0      	adds	r3, #176	; 0xb0
 80292fe:	009b      	lsls	r3, r3, #2
 8029300:	4413      	add	r3, r2
 8029302:	683a      	ldr	r2, [r7, #0]
 8029304:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8029306:	2300      	movs	r3, #0
}
 8029308:	4618      	mov	r0, r3
 802930a:	370c      	adds	r7, #12
 802930c:	46bd      	mov	sp, r7
 802930e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029312:	4770      	bx	lr

08029314 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8029314:	b480      	push	{r7}
 8029316:	b087      	sub	sp, #28
 8029318:	af00      	add	r7, sp, #0
 802931a:	60f8      	str	r0, [r7, #12]
 802931c:	60b9      	str	r1, [r7, #8]
 802931e:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8029320:	68fb      	ldr	r3, [r7, #12]
 8029322:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8029326:	68fb      	ldr	r3, [r7, #12]
 8029328:	32b0      	adds	r2, #176	; 0xb0
 802932a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 802932e:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8029330:	697b      	ldr	r3, [r7, #20]
 8029332:	2b00      	cmp	r3, #0
 8029334:	d101      	bne.n	802933a <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8029336:	2303      	movs	r3, #3
 8029338:	e008      	b.n	802934c <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 802933a:	697b      	ldr	r3, [r7, #20]
 802933c:	68ba      	ldr	r2, [r7, #8]
 802933e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8029342:	697b      	ldr	r3, [r7, #20]
 8029344:	687a      	ldr	r2, [r7, #4]
 8029346:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 802934a:	2300      	movs	r3, #0
}
 802934c:	4618      	mov	r0, r3
 802934e:	371c      	adds	r7, #28
 8029350:	46bd      	mov	sp, r7
 8029352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029356:	4770      	bx	lr

08029358 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8029358:	b480      	push	{r7}
 802935a:	b085      	sub	sp, #20
 802935c:	af00      	add	r7, sp, #0
 802935e:	6078      	str	r0, [r7, #4]
 8029360:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8029362:	687b      	ldr	r3, [r7, #4]
 8029364:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8029368:	687b      	ldr	r3, [r7, #4]
 802936a:	32b0      	adds	r2, #176	; 0xb0
 802936c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8029370:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8029372:	68fb      	ldr	r3, [r7, #12]
 8029374:	2b00      	cmp	r3, #0
 8029376:	d101      	bne.n	802937c <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8029378:	2303      	movs	r3, #3
 802937a:	e004      	b.n	8029386 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 802937c:	68fb      	ldr	r3, [r7, #12]
 802937e:	683a      	ldr	r2, [r7, #0]
 8029380:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8029384:	2300      	movs	r3, #0
}
 8029386:	4618      	mov	r0, r3
 8029388:	3714      	adds	r7, #20
 802938a:	46bd      	mov	sp, r7
 802938c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029390:	4770      	bx	lr
	...

08029394 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8029394:	b580      	push	{r7, lr}
 8029396:	b084      	sub	sp, #16
 8029398:	af00      	add	r7, sp, #0
 802939a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 802939c:	687b      	ldr	r3, [r7, #4]
 802939e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80293a2:	687b      	ldr	r3, [r7, #4]
 80293a4:	32b0      	adds	r2, #176	; 0xb0
 80293a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80293aa:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 80293ac:	2301      	movs	r3, #1
 80293ae:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 80293b0:	68bb      	ldr	r3, [r7, #8]
 80293b2:	2b00      	cmp	r3, #0
 80293b4:	d101      	bne.n	80293ba <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80293b6:	2303      	movs	r3, #3
 80293b8:	e025      	b.n	8029406 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 80293ba:	68bb      	ldr	r3, [r7, #8]
 80293bc:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80293c0:	2b00      	cmp	r3, #0
 80293c2:	d11f      	bne.n	8029404 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 80293c4:	68bb      	ldr	r3, [r7, #8]
 80293c6:	2201      	movs	r2, #1
 80293c8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 80293cc:	4b10      	ldr	r3, [pc, #64]	; (8029410 <USBD_CDC_TransmitPacket+0x7c>)
 80293ce:	781b      	ldrb	r3, [r3, #0]
 80293d0:	f003 020f 	and.w	r2, r3, #15
 80293d4:	68bb      	ldr	r3, [r7, #8]
 80293d6:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 80293da:	6878      	ldr	r0, [r7, #4]
 80293dc:	4613      	mov	r3, r2
 80293de:	009b      	lsls	r3, r3, #2
 80293e0:	4413      	add	r3, r2
 80293e2:	009b      	lsls	r3, r3, #2
 80293e4:	4403      	add	r3, r0
 80293e6:	3318      	adds	r3, #24
 80293e8:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 80293ea:	4b09      	ldr	r3, [pc, #36]	; (8029410 <USBD_CDC_TransmitPacket+0x7c>)
 80293ec:	7819      	ldrb	r1, [r3, #0]
 80293ee:	68bb      	ldr	r3, [r7, #8]
 80293f0:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 80293f4:	68bb      	ldr	r3, [r7, #8]
 80293f6:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80293fa:	6878      	ldr	r0, [r7, #4]
 80293fc:	f002 f933 	bl	802b666 <USBD_LL_Transmit>

    ret = USBD_OK;
 8029400:	2300      	movs	r3, #0
 8029402:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8029404:	7bfb      	ldrb	r3, [r7, #15]
}
 8029406:	4618      	mov	r0, r3
 8029408:	3710      	adds	r7, #16
 802940a:	46bd      	mov	sp, r7
 802940c:	bd80      	pop	{r7, pc}
 802940e:	bf00      	nop
 8029410:	20000093 	.word	0x20000093

08029414 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8029414:	b580      	push	{r7, lr}
 8029416:	b084      	sub	sp, #16
 8029418:	af00      	add	r7, sp, #0
 802941a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 802941c:	687b      	ldr	r3, [r7, #4]
 802941e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8029422:	687b      	ldr	r3, [r7, #4]
 8029424:	32b0      	adds	r2, #176	; 0xb0
 8029426:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 802942a:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 802942c:	687b      	ldr	r3, [r7, #4]
 802942e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8029432:	687b      	ldr	r3, [r7, #4]
 8029434:	32b0      	adds	r2, #176	; 0xb0
 8029436:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 802943a:	2b00      	cmp	r3, #0
 802943c:	d101      	bne.n	8029442 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 802943e:	2303      	movs	r3, #3
 8029440:	e018      	b.n	8029474 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8029442:	687b      	ldr	r3, [r7, #4]
 8029444:	7c1b      	ldrb	r3, [r3, #16]
 8029446:	2b00      	cmp	r3, #0
 8029448:	d10a      	bne.n	8029460 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 802944a:	4b0c      	ldr	r3, [pc, #48]	; (802947c <USBD_CDC_ReceivePacket+0x68>)
 802944c:	7819      	ldrb	r1, [r3, #0]
 802944e:	68fb      	ldr	r3, [r7, #12]
 8029450:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8029454:	f44f 7300 	mov.w	r3, #512	; 0x200
 8029458:	6878      	ldr	r0, [r7, #4]
 802945a:	f002 f925 	bl	802b6a8 <USBD_LL_PrepareReceive>
 802945e:	e008      	b.n	8029472 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8029460:	4b06      	ldr	r3, [pc, #24]	; (802947c <USBD_CDC_ReceivePacket+0x68>)
 8029462:	7819      	ldrb	r1, [r3, #0]
 8029464:	68fb      	ldr	r3, [r7, #12]
 8029466:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 802946a:	2340      	movs	r3, #64	; 0x40
 802946c:	6878      	ldr	r0, [r7, #4]
 802946e:	f002 f91b 	bl	802b6a8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8029472:	2300      	movs	r3, #0
}
 8029474:	4618      	mov	r0, r3
 8029476:	3710      	adds	r7, #16
 8029478:	46bd      	mov	sp, r7
 802947a:	bd80      	pop	{r7, pc}
 802947c:	20000094 	.word	0x20000094

08029480 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8029480:	b580      	push	{r7, lr}
 8029482:	b086      	sub	sp, #24
 8029484:	af00      	add	r7, sp, #0
 8029486:	60f8      	str	r0, [r7, #12]
 8029488:	60b9      	str	r1, [r7, #8]
 802948a:	4613      	mov	r3, r2
 802948c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 802948e:	68fb      	ldr	r3, [r7, #12]
 8029490:	2b00      	cmp	r3, #0
 8029492:	d101      	bne.n	8029498 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8029494:	2303      	movs	r3, #3
 8029496:	e01f      	b.n	80294d8 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8029498:	68fb      	ldr	r3, [r7, #12]
 802949a:	2200      	movs	r2, #0
 802949c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 80294a0:	68fb      	ldr	r3, [r7, #12]
 80294a2:	2200      	movs	r2, #0
 80294a4:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 80294a8:	68fb      	ldr	r3, [r7, #12]
 80294aa:	2200      	movs	r2, #0
 80294ac:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80294b0:	68bb      	ldr	r3, [r7, #8]
 80294b2:	2b00      	cmp	r3, #0
 80294b4:	d003      	beq.n	80294be <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80294b6:	68fb      	ldr	r3, [r7, #12]
 80294b8:	68ba      	ldr	r2, [r7, #8]
 80294ba:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80294be:	68fb      	ldr	r3, [r7, #12]
 80294c0:	2201      	movs	r2, #1
 80294c2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80294c6:	68fb      	ldr	r3, [r7, #12]
 80294c8:	79fa      	ldrb	r2, [r7, #7]
 80294ca:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80294cc:	68f8      	ldr	r0, [r7, #12]
 80294ce:	f001 ff5f 	bl	802b390 <USBD_LL_Init>
 80294d2:	4603      	mov	r3, r0
 80294d4:	75fb      	strb	r3, [r7, #23]

  return ret;
 80294d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80294d8:	4618      	mov	r0, r3
 80294da:	3718      	adds	r7, #24
 80294dc:	46bd      	mov	sp, r7
 80294de:	bd80      	pop	{r7, pc}

080294e0 <USBD_DeInit>:
  *         Re-Initialize the device library
  * @param  pdev: device instance
  * @retval status: status
  */
USBD_StatusTypeDef USBD_DeInit(USBD_HandleTypeDef *pdev)
{
 80294e0:	b580      	push	{r7, lr}
 80294e2:	b084      	sub	sp, #16
 80294e4:	af00      	add	r7, sp, #0
 80294e6:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret;

  /* Disconnect the USB Device */
  (void)USBD_LL_Stop(pdev);
 80294e8:	6878      	ldr	r0, [r7, #4]
 80294ea:	f001 ffd3 	bl	802b494 <USBD_LL_Stop>

  /* Set Default State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80294ee:	687b      	ldr	r3, [r7, #4]
 80294f0:	2201      	movs	r2, #1
 80294f2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
    }
  }
#else
  /* Free Class Resources */
  if (pdev->pClass[0] != NULL)
 80294f6:	687b      	ldr	r3, [r7, #4]
 80294f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80294fc:	2b00      	cmp	r3, #0
 80294fe:	d009      	beq.n	8029514 <USBD_DeInit+0x34>
  {
    pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config);
 8029500:	687b      	ldr	r3, [r7, #4]
 8029502:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8029506:	685b      	ldr	r3, [r3, #4]
 8029508:	687a      	ldr	r2, [r7, #4]
 802950a:	6852      	ldr	r2, [r2, #4]
 802950c:	b2d2      	uxtb	r2, r2
 802950e:	4611      	mov	r1, r2
 8029510:	6878      	ldr	r0, [r7, #4]
 8029512:	4798      	blx	r3
  }

  pdev->pUserData[0] = NULL;
 8029514:	687b      	ldr	r3, [r7, #4]
 8029516:	2200      	movs	r2, #0
 8029518:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

#endif /* USE_USBD_COMPOSITE */

  /* Free Device descriptors resources */
  pdev->pDesc = NULL;
 802951c:	687b      	ldr	r3, [r7, #4]
 802951e:	2200      	movs	r2, #0
 8029520:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  pdev->pConfDesc = NULL;
 8029524:	687b      	ldr	r3, [r7, #4]
 8029526:	2200      	movs	r2, #0
 8029528:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* DeInitialize low level driver */
  ret = USBD_LL_DeInit(pdev);
 802952c:	6878      	ldr	r0, [r7, #4]
 802952e:	f001 ff7b 	bl	802b428 <USBD_LL_DeInit>
 8029532:	4603      	mov	r3, r0
 8029534:	73fb      	strb	r3, [r7, #15]

  return ret;
 8029536:	7bfb      	ldrb	r3, [r7, #15]
}
 8029538:	4618      	mov	r0, r3
 802953a:	3710      	adds	r7, #16
 802953c:	46bd      	mov	sp, r7
 802953e:	bd80      	pop	{r7, pc}

08029540 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8029540:	b580      	push	{r7, lr}
 8029542:	b084      	sub	sp, #16
 8029544:	af00      	add	r7, sp, #0
 8029546:	6078      	str	r0, [r7, #4]
 8029548:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 802954a:	2300      	movs	r3, #0
 802954c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 802954e:	683b      	ldr	r3, [r7, #0]
 8029550:	2b00      	cmp	r3, #0
 8029552:	d101      	bne.n	8029558 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8029554:	2303      	movs	r3, #3
 8029556:	e025      	b.n	80295a4 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8029558:	687b      	ldr	r3, [r7, #4]
 802955a:	683a      	ldr	r2, [r7, #0]
 802955c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8029560:	687b      	ldr	r3, [r7, #4]
 8029562:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8029566:	687b      	ldr	r3, [r7, #4]
 8029568:	32ae      	adds	r2, #174	; 0xae
 802956a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 802956e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8029570:	2b00      	cmp	r3, #0
 8029572:	d00f      	beq.n	8029594 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8029574:	687b      	ldr	r3, [r7, #4]
 8029576:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 802957a:	687b      	ldr	r3, [r7, #4]
 802957c:	32ae      	adds	r2, #174	; 0xae
 802957e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8029582:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8029584:	f107 020e 	add.w	r2, r7, #14
 8029588:	4610      	mov	r0, r2
 802958a:	4798      	blx	r3
 802958c:	4602      	mov	r2, r0
 802958e:	687b      	ldr	r3, [r7, #4]
 8029590:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8029594:	687b      	ldr	r3, [r7, #4]
 8029596:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 802959a:	1c5a      	adds	r2, r3, #1
 802959c:	687b      	ldr	r3, [r7, #4]
 802959e:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 80295a2:	2300      	movs	r3, #0
}
 80295a4:	4618      	mov	r0, r3
 80295a6:	3710      	adds	r7, #16
 80295a8:	46bd      	mov	sp, r7
 80295aa:	bd80      	pop	{r7, pc}

080295ac <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80295ac:	b580      	push	{r7, lr}
 80295ae:	b082      	sub	sp, #8
 80295b0:	af00      	add	r7, sp, #0
 80295b2:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80295b4:	6878      	ldr	r0, [r7, #4]
 80295b6:	f001 ff52 	bl	802b45e <USBD_LL_Start>
 80295ba:	4603      	mov	r3, r0
}
 80295bc:	4618      	mov	r0, r3
 80295be:	3708      	adds	r7, #8
 80295c0:	46bd      	mov	sp, r7
 80295c2:	bd80      	pop	{r7, pc}

080295c4 <USBD_Stop>:
  *         Stop the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Stop(USBD_HandleTypeDef *pdev)
{
 80295c4:	b580      	push	{r7, lr}
 80295c6:	b082      	sub	sp, #8
 80295c8:	af00      	add	r7, sp, #0
 80295ca:	6078      	str	r0, [r7, #4]
  /* Disconnect USB Device */
  (void)USBD_LL_Stop(pdev);
 80295cc:	6878      	ldr	r0, [r7, #4]
 80295ce:	f001 ff61 	bl	802b494 <USBD_LL_Stop>
  }

  /* Reset the class ID */
  pdev->classId = 0U;
#else
  if (pdev->pClass[0] != NULL)
 80295d2:	687b      	ldr	r3, [r7, #4]
 80295d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80295d8:	2b00      	cmp	r3, #0
 80295da:	d009      	beq.n	80295f0 <USBD_Stop+0x2c>
  {
    (void)pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config);
 80295dc:	687b      	ldr	r3, [r7, #4]
 80295de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80295e2:	685b      	ldr	r3, [r3, #4]
 80295e4:	687a      	ldr	r2, [r7, #4]
 80295e6:	6852      	ldr	r2, [r2, #4]
 80295e8:	b2d2      	uxtb	r2, r2
 80295ea:	4611      	mov	r1, r2
 80295ec:	6878      	ldr	r0, [r7, #4]
 80295ee:	4798      	blx	r3
  }
#endif /* USE_USBD_COMPOSITE */

  return USBD_OK;
 80295f0:	2300      	movs	r3, #0
}
 80295f2:	4618      	mov	r0, r3
 80295f4:	3708      	adds	r7, #8
 80295f6:	46bd      	mov	sp, r7
 80295f8:	bd80      	pop	{r7, pc}

080295fa <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 80295fa:	b480      	push	{r7}
 80295fc:	b083      	sub	sp, #12
 80295fe:	af00      	add	r7, sp, #0
 8029600:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8029602:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8029604:	4618      	mov	r0, r3
 8029606:	370c      	adds	r7, #12
 8029608:	46bd      	mov	sp, r7
 802960a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802960e:	4770      	bx	lr

08029610 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8029610:	b580      	push	{r7, lr}
 8029612:	b084      	sub	sp, #16
 8029614:	af00      	add	r7, sp, #0
 8029616:	6078      	str	r0, [r7, #4]
 8029618:	460b      	mov	r3, r1
 802961a:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 802961c:	2300      	movs	r3, #0
 802961e:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8029620:	687b      	ldr	r3, [r7, #4]
 8029622:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8029626:	2b00      	cmp	r3, #0
 8029628:	d009      	beq.n	802963e <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 802962a:	687b      	ldr	r3, [r7, #4]
 802962c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8029630:	681b      	ldr	r3, [r3, #0]
 8029632:	78fa      	ldrb	r2, [r7, #3]
 8029634:	4611      	mov	r1, r2
 8029636:	6878      	ldr	r0, [r7, #4]
 8029638:	4798      	blx	r3
 802963a:	4603      	mov	r3, r0
 802963c:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 802963e:	7bfb      	ldrb	r3, [r7, #15]
}
 8029640:	4618      	mov	r0, r3
 8029642:	3710      	adds	r7, #16
 8029644:	46bd      	mov	sp, r7
 8029646:	bd80      	pop	{r7, pc}

08029648 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8029648:	b580      	push	{r7, lr}
 802964a:	b084      	sub	sp, #16
 802964c:	af00      	add	r7, sp, #0
 802964e:	6078      	str	r0, [r7, #4]
 8029650:	460b      	mov	r3, r1
 8029652:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8029654:	2300      	movs	r3, #0
 8029656:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8029658:	687b      	ldr	r3, [r7, #4]
 802965a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 802965e:	685b      	ldr	r3, [r3, #4]
 8029660:	78fa      	ldrb	r2, [r7, #3]
 8029662:	4611      	mov	r1, r2
 8029664:	6878      	ldr	r0, [r7, #4]
 8029666:	4798      	blx	r3
 8029668:	4603      	mov	r3, r0
 802966a:	2b00      	cmp	r3, #0
 802966c:	d001      	beq.n	8029672 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 802966e:	2303      	movs	r3, #3
 8029670:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8029672:	7bfb      	ldrb	r3, [r7, #15]
}
 8029674:	4618      	mov	r0, r3
 8029676:	3710      	adds	r7, #16
 8029678:	46bd      	mov	sp, r7
 802967a:	bd80      	pop	{r7, pc}

0802967c <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 802967c:	b580      	push	{r7, lr}
 802967e:	b084      	sub	sp, #16
 8029680:	af00      	add	r7, sp, #0
 8029682:	6078      	str	r0, [r7, #4]
 8029684:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8029686:	687b      	ldr	r3, [r7, #4]
 8029688:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 802968c:	6839      	ldr	r1, [r7, #0]
 802968e:	4618      	mov	r0, r3
 8029690:	f001 f933 	bl	802a8fa <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8029694:	687b      	ldr	r3, [r7, #4]
 8029696:	2201      	movs	r2, #1
 8029698:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 802969c:	687b      	ldr	r3, [r7, #4]
 802969e:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80296a2:	461a      	mov	r2, r3
 80296a4:	687b      	ldr	r3, [r7, #4]
 80296a6:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80296aa:	687b      	ldr	r3, [r7, #4]
 80296ac:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80296b0:	f003 031f 	and.w	r3, r3, #31
 80296b4:	2b02      	cmp	r3, #2
 80296b6:	d01a      	beq.n	80296ee <USBD_LL_SetupStage+0x72>
 80296b8:	2b02      	cmp	r3, #2
 80296ba:	d822      	bhi.n	8029702 <USBD_LL_SetupStage+0x86>
 80296bc:	2b00      	cmp	r3, #0
 80296be:	d002      	beq.n	80296c6 <USBD_LL_SetupStage+0x4a>
 80296c0:	2b01      	cmp	r3, #1
 80296c2:	d00a      	beq.n	80296da <USBD_LL_SetupStage+0x5e>
 80296c4:	e01d      	b.n	8029702 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80296c6:	687b      	ldr	r3, [r7, #4]
 80296c8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80296cc:	4619      	mov	r1, r3
 80296ce:	6878      	ldr	r0, [r7, #4]
 80296d0:	f000 fb60 	bl	8029d94 <USBD_StdDevReq>
 80296d4:	4603      	mov	r3, r0
 80296d6:	73fb      	strb	r3, [r7, #15]
      break;
 80296d8:	e020      	b.n	802971c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80296da:	687b      	ldr	r3, [r7, #4]
 80296dc:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80296e0:	4619      	mov	r1, r3
 80296e2:	6878      	ldr	r0, [r7, #4]
 80296e4:	f000 fbc8 	bl	8029e78 <USBD_StdItfReq>
 80296e8:	4603      	mov	r3, r0
 80296ea:	73fb      	strb	r3, [r7, #15]
      break;
 80296ec:	e016      	b.n	802971c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80296ee:	687b      	ldr	r3, [r7, #4]
 80296f0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80296f4:	4619      	mov	r1, r3
 80296f6:	6878      	ldr	r0, [r7, #4]
 80296f8:	f000 fc2a 	bl	8029f50 <USBD_StdEPReq>
 80296fc:	4603      	mov	r3, r0
 80296fe:	73fb      	strb	r3, [r7, #15]
      break;
 8029700:	e00c      	b.n	802971c <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8029702:	687b      	ldr	r3, [r7, #4]
 8029704:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8029708:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 802970c:	b2db      	uxtb	r3, r3
 802970e:	4619      	mov	r1, r3
 8029710:	6878      	ldr	r0, [r7, #4]
 8029712:	f001 ff1f 	bl	802b554 <USBD_LL_StallEP>
 8029716:	4603      	mov	r3, r0
 8029718:	73fb      	strb	r3, [r7, #15]
      break;
 802971a:	bf00      	nop
  }

  return ret;
 802971c:	7bfb      	ldrb	r3, [r7, #15]
}
 802971e:	4618      	mov	r0, r3
 8029720:	3710      	adds	r7, #16
 8029722:	46bd      	mov	sp, r7
 8029724:	bd80      	pop	{r7, pc}

08029726 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8029726:	b580      	push	{r7, lr}
 8029728:	b086      	sub	sp, #24
 802972a:	af00      	add	r7, sp, #0
 802972c:	60f8      	str	r0, [r7, #12]
 802972e:	460b      	mov	r3, r1
 8029730:	607a      	str	r2, [r7, #4]
 8029732:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8029734:	2300      	movs	r3, #0
 8029736:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8029738:	7afb      	ldrb	r3, [r7, #11]
 802973a:	2b00      	cmp	r3, #0
 802973c:	d16e      	bne.n	802981c <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 802973e:	68fb      	ldr	r3, [r7, #12]
 8029740:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8029744:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8029746:	68fb      	ldr	r3, [r7, #12]
 8029748:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 802974c:	2b03      	cmp	r3, #3
 802974e:	f040 8098 	bne.w	8029882 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8029752:	693b      	ldr	r3, [r7, #16]
 8029754:	689a      	ldr	r2, [r3, #8]
 8029756:	693b      	ldr	r3, [r7, #16]
 8029758:	68db      	ldr	r3, [r3, #12]
 802975a:	429a      	cmp	r2, r3
 802975c:	d913      	bls.n	8029786 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 802975e:	693b      	ldr	r3, [r7, #16]
 8029760:	689a      	ldr	r2, [r3, #8]
 8029762:	693b      	ldr	r3, [r7, #16]
 8029764:	68db      	ldr	r3, [r3, #12]
 8029766:	1ad2      	subs	r2, r2, r3
 8029768:	693b      	ldr	r3, [r7, #16]
 802976a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 802976c:	693b      	ldr	r3, [r7, #16]
 802976e:	68da      	ldr	r2, [r3, #12]
 8029770:	693b      	ldr	r3, [r7, #16]
 8029772:	689b      	ldr	r3, [r3, #8]
 8029774:	4293      	cmp	r3, r2
 8029776:	bf28      	it	cs
 8029778:	4613      	movcs	r3, r2
 802977a:	461a      	mov	r2, r3
 802977c:	6879      	ldr	r1, [r7, #4]
 802977e:	68f8      	ldr	r0, [r7, #12]
 8029780:	f001 f9af 	bl	802aae2 <USBD_CtlContinueRx>
 8029784:	e07d      	b.n	8029882 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8029786:	68fb      	ldr	r3, [r7, #12]
 8029788:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 802978c:	f003 031f 	and.w	r3, r3, #31
 8029790:	2b02      	cmp	r3, #2
 8029792:	d014      	beq.n	80297be <USBD_LL_DataOutStage+0x98>
 8029794:	2b02      	cmp	r3, #2
 8029796:	d81d      	bhi.n	80297d4 <USBD_LL_DataOutStage+0xae>
 8029798:	2b00      	cmp	r3, #0
 802979a:	d002      	beq.n	80297a2 <USBD_LL_DataOutStage+0x7c>
 802979c:	2b01      	cmp	r3, #1
 802979e:	d003      	beq.n	80297a8 <USBD_LL_DataOutStage+0x82>
 80297a0:	e018      	b.n	80297d4 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80297a2:	2300      	movs	r3, #0
 80297a4:	75bb      	strb	r3, [r7, #22]
            break;
 80297a6:	e018      	b.n	80297da <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80297a8:	68fb      	ldr	r3, [r7, #12]
 80297aa:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80297ae:	b2db      	uxtb	r3, r3
 80297b0:	4619      	mov	r1, r3
 80297b2:	68f8      	ldr	r0, [r7, #12]
 80297b4:	f000 fa5e 	bl	8029c74 <USBD_CoreFindIF>
 80297b8:	4603      	mov	r3, r0
 80297ba:	75bb      	strb	r3, [r7, #22]
            break;
 80297bc:	e00d      	b.n	80297da <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80297be:	68fb      	ldr	r3, [r7, #12]
 80297c0:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80297c4:	b2db      	uxtb	r3, r3
 80297c6:	4619      	mov	r1, r3
 80297c8:	68f8      	ldr	r0, [r7, #12]
 80297ca:	f000 fa60 	bl	8029c8e <USBD_CoreFindEP>
 80297ce:	4603      	mov	r3, r0
 80297d0:	75bb      	strb	r3, [r7, #22]
            break;
 80297d2:	e002      	b.n	80297da <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80297d4:	2300      	movs	r3, #0
 80297d6:	75bb      	strb	r3, [r7, #22]
            break;
 80297d8:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80297da:	7dbb      	ldrb	r3, [r7, #22]
 80297dc:	2b00      	cmp	r3, #0
 80297de:	d119      	bne.n	8029814 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80297e0:	68fb      	ldr	r3, [r7, #12]
 80297e2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80297e6:	b2db      	uxtb	r3, r3
 80297e8:	2b03      	cmp	r3, #3
 80297ea:	d113      	bne.n	8029814 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 80297ec:	7dba      	ldrb	r2, [r7, #22]
 80297ee:	68fb      	ldr	r3, [r7, #12]
 80297f0:	32ae      	adds	r2, #174	; 0xae
 80297f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80297f6:	691b      	ldr	r3, [r3, #16]
 80297f8:	2b00      	cmp	r3, #0
 80297fa:	d00b      	beq.n	8029814 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 80297fc:	7dba      	ldrb	r2, [r7, #22]
 80297fe:	68fb      	ldr	r3, [r7, #12]
 8029800:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8029804:	7dba      	ldrb	r2, [r7, #22]
 8029806:	68fb      	ldr	r3, [r7, #12]
 8029808:	32ae      	adds	r2, #174	; 0xae
 802980a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 802980e:	691b      	ldr	r3, [r3, #16]
 8029810:	68f8      	ldr	r0, [r7, #12]
 8029812:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8029814:	68f8      	ldr	r0, [r7, #12]
 8029816:	f001 f975 	bl	802ab04 <USBD_CtlSendStatus>
 802981a:	e032      	b.n	8029882 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 802981c:	7afb      	ldrb	r3, [r7, #11]
 802981e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8029822:	b2db      	uxtb	r3, r3
 8029824:	4619      	mov	r1, r3
 8029826:	68f8      	ldr	r0, [r7, #12]
 8029828:	f000 fa31 	bl	8029c8e <USBD_CoreFindEP>
 802982c:	4603      	mov	r3, r0
 802982e:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8029830:	7dbb      	ldrb	r3, [r7, #22]
 8029832:	2bff      	cmp	r3, #255	; 0xff
 8029834:	d025      	beq.n	8029882 <USBD_LL_DataOutStage+0x15c>
 8029836:	7dbb      	ldrb	r3, [r7, #22]
 8029838:	2b00      	cmp	r3, #0
 802983a:	d122      	bne.n	8029882 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 802983c:	68fb      	ldr	r3, [r7, #12]
 802983e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8029842:	b2db      	uxtb	r3, r3
 8029844:	2b03      	cmp	r3, #3
 8029846:	d117      	bne.n	8029878 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8029848:	7dba      	ldrb	r2, [r7, #22]
 802984a:	68fb      	ldr	r3, [r7, #12]
 802984c:	32ae      	adds	r2, #174	; 0xae
 802984e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8029852:	699b      	ldr	r3, [r3, #24]
 8029854:	2b00      	cmp	r3, #0
 8029856:	d00f      	beq.n	8029878 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8029858:	7dba      	ldrb	r2, [r7, #22]
 802985a:	68fb      	ldr	r3, [r7, #12]
 802985c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8029860:	7dba      	ldrb	r2, [r7, #22]
 8029862:	68fb      	ldr	r3, [r7, #12]
 8029864:	32ae      	adds	r2, #174	; 0xae
 8029866:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 802986a:	699b      	ldr	r3, [r3, #24]
 802986c:	7afa      	ldrb	r2, [r7, #11]
 802986e:	4611      	mov	r1, r2
 8029870:	68f8      	ldr	r0, [r7, #12]
 8029872:	4798      	blx	r3
 8029874:	4603      	mov	r3, r0
 8029876:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8029878:	7dfb      	ldrb	r3, [r7, #23]
 802987a:	2b00      	cmp	r3, #0
 802987c:	d001      	beq.n	8029882 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 802987e:	7dfb      	ldrb	r3, [r7, #23]
 8029880:	e000      	b.n	8029884 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8029882:	2300      	movs	r3, #0
}
 8029884:	4618      	mov	r0, r3
 8029886:	3718      	adds	r7, #24
 8029888:	46bd      	mov	sp, r7
 802988a:	bd80      	pop	{r7, pc}

0802988c <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 802988c:	b580      	push	{r7, lr}
 802988e:	b086      	sub	sp, #24
 8029890:	af00      	add	r7, sp, #0
 8029892:	60f8      	str	r0, [r7, #12]
 8029894:	460b      	mov	r3, r1
 8029896:	607a      	str	r2, [r7, #4]
 8029898:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 802989a:	7afb      	ldrb	r3, [r7, #11]
 802989c:	2b00      	cmp	r3, #0
 802989e:	d16f      	bne.n	8029980 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 80298a0:	68fb      	ldr	r3, [r7, #12]
 80298a2:	3314      	adds	r3, #20
 80298a4:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80298a6:	68fb      	ldr	r3, [r7, #12]
 80298a8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80298ac:	2b02      	cmp	r3, #2
 80298ae:	d15a      	bne.n	8029966 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 80298b0:	693b      	ldr	r3, [r7, #16]
 80298b2:	689a      	ldr	r2, [r3, #8]
 80298b4:	693b      	ldr	r3, [r7, #16]
 80298b6:	68db      	ldr	r3, [r3, #12]
 80298b8:	429a      	cmp	r2, r3
 80298ba:	d914      	bls.n	80298e6 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80298bc:	693b      	ldr	r3, [r7, #16]
 80298be:	689a      	ldr	r2, [r3, #8]
 80298c0:	693b      	ldr	r3, [r7, #16]
 80298c2:	68db      	ldr	r3, [r3, #12]
 80298c4:	1ad2      	subs	r2, r2, r3
 80298c6:	693b      	ldr	r3, [r7, #16]
 80298c8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80298ca:	693b      	ldr	r3, [r7, #16]
 80298cc:	689b      	ldr	r3, [r3, #8]
 80298ce:	461a      	mov	r2, r3
 80298d0:	6879      	ldr	r1, [r7, #4]
 80298d2:	68f8      	ldr	r0, [r7, #12]
 80298d4:	f001 f8d7 	bl	802aa86 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80298d8:	2300      	movs	r3, #0
 80298da:	2200      	movs	r2, #0
 80298dc:	2100      	movs	r1, #0
 80298de:	68f8      	ldr	r0, [r7, #12]
 80298e0:	f001 fee2 	bl	802b6a8 <USBD_LL_PrepareReceive>
 80298e4:	e03f      	b.n	8029966 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80298e6:	693b      	ldr	r3, [r7, #16]
 80298e8:	68da      	ldr	r2, [r3, #12]
 80298ea:	693b      	ldr	r3, [r7, #16]
 80298ec:	689b      	ldr	r3, [r3, #8]
 80298ee:	429a      	cmp	r2, r3
 80298f0:	d11c      	bne.n	802992c <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80298f2:	693b      	ldr	r3, [r7, #16]
 80298f4:	685a      	ldr	r2, [r3, #4]
 80298f6:	693b      	ldr	r3, [r7, #16]
 80298f8:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80298fa:	429a      	cmp	r2, r3
 80298fc:	d316      	bcc.n	802992c <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80298fe:	693b      	ldr	r3, [r7, #16]
 8029900:	685a      	ldr	r2, [r3, #4]
 8029902:	68fb      	ldr	r3, [r7, #12]
 8029904:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8029908:	429a      	cmp	r2, r3
 802990a:	d20f      	bcs.n	802992c <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 802990c:	2200      	movs	r2, #0
 802990e:	2100      	movs	r1, #0
 8029910:	68f8      	ldr	r0, [r7, #12]
 8029912:	f001 f8b8 	bl	802aa86 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8029916:	68fb      	ldr	r3, [r7, #12]
 8029918:	2200      	movs	r2, #0
 802991a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 802991e:	2300      	movs	r3, #0
 8029920:	2200      	movs	r2, #0
 8029922:	2100      	movs	r1, #0
 8029924:	68f8      	ldr	r0, [r7, #12]
 8029926:	f001 febf 	bl	802b6a8 <USBD_LL_PrepareReceive>
 802992a:	e01c      	b.n	8029966 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 802992c:	68fb      	ldr	r3, [r7, #12]
 802992e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8029932:	b2db      	uxtb	r3, r3
 8029934:	2b03      	cmp	r3, #3
 8029936:	d10f      	bne.n	8029958 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8029938:	68fb      	ldr	r3, [r7, #12]
 802993a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 802993e:	68db      	ldr	r3, [r3, #12]
 8029940:	2b00      	cmp	r3, #0
 8029942:	d009      	beq.n	8029958 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8029944:	68fb      	ldr	r3, [r7, #12]
 8029946:	2200      	movs	r2, #0
 8029948:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 802994c:	68fb      	ldr	r3, [r7, #12]
 802994e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8029952:	68db      	ldr	r3, [r3, #12]
 8029954:	68f8      	ldr	r0, [r7, #12]
 8029956:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8029958:	2180      	movs	r1, #128	; 0x80
 802995a:	68f8      	ldr	r0, [r7, #12]
 802995c:	f001 fdfa 	bl	802b554 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8029960:	68f8      	ldr	r0, [r7, #12]
 8029962:	f001 f8e2 	bl	802ab2a <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8029966:	68fb      	ldr	r3, [r7, #12]
 8029968:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 802996c:	2b00      	cmp	r3, #0
 802996e:	d03a      	beq.n	80299e6 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8029970:	68f8      	ldr	r0, [r7, #12]
 8029972:	f7ff fe42 	bl	80295fa <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8029976:	68fb      	ldr	r3, [r7, #12]
 8029978:	2200      	movs	r2, #0
 802997a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 802997e:	e032      	b.n	80299e6 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8029980:	7afb      	ldrb	r3, [r7, #11]
 8029982:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8029986:	b2db      	uxtb	r3, r3
 8029988:	4619      	mov	r1, r3
 802998a:	68f8      	ldr	r0, [r7, #12]
 802998c:	f000 f97f 	bl	8029c8e <USBD_CoreFindEP>
 8029990:	4603      	mov	r3, r0
 8029992:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8029994:	7dfb      	ldrb	r3, [r7, #23]
 8029996:	2bff      	cmp	r3, #255	; 0xff
 8029998:	d025      	beq.n	80299e6 <USBD_LL_DataInStage+0x15a>
 802999a:	7dfb      	ldrb	r3, [r7, #23]
 802999c:	2b00      	cmp	r3, #0
 802999e:	d122      	bne.n	80299e6 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80299a0:	68fb      	ldr	r3, [r7, #12]
 80299a2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80299a6:	b2db      	uxtb	r3, r3
 80299a8:	2b03      	cmp	r3, #3
 80299aa:	d11c      	bne.n	80299e6 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80299ac:	7dfa      	ldrb	r2, [r7, #23]
 80299ae:	68fb      	ldr	r3, [r7, #12]
 80299b0:	32ae      	adds	r2, #174	; 0xae
 80299b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80299b6:	695b      	ldr	r3, [r3, #20]
 80299b8:	2b00      	cmp	r3, #0
 80299ba:	d014      	beq.n	80299e6 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 80299bc:	7dfa      	ldrb	r2, [r7, #23]
 80299be:	68fb      	ldr	r3, [r7, #12]
 80299c0:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80299c4:	7dfa      	ldrb	r2, [r7, #23]
 80299c6:	68fb      	ldr	r3, [r7, #12]
 80299c8:	32ae      	adds	r2, #174	; 0xae
 80299ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80299ce:	695b      	ldr	r3, [r3, #20]
 80299d0:	7afa      	ldrb	r2, [r7, #11]
 80299d2:	4611      	mov	r1, r2
 80299d4:	68f8      	ldr	r0, [r7, #12]
 80299d6:	4798      	blx	r3
 80299d8:	4603      	mov	r3, r0
 80299da:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 80299dc:	7dbb      	ldrb	r3, [r7, #22]
 80299de:	2b00      	cmp	r3, #0
 80299e0:	d001      	beq.n	80299e6 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 80299e2:	7dbb      	ldrb	r3, [r7, #22]
 80299e4:	e000      	b.n	80299e8 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 80299e6:	2300      	movs	r3, #0
}
 80299e8:	4618      	mov	r0, r3
 80299ea:	3718      	adds	r7, #24
 80299ec:	46bd      	mov	sp, r7
 80299ee:	bd80      	pop	{r7, pc}

080299f0 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80299f0:	b580      	push	{r7, lr}
 80299f2:	b084      	sub	sp, #16
 80299f4:	af00      	add	r7, sp, #0
 80299f6:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80299f8:	2300      	movs	r3, #0
 80299fa:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80299fc:	687b      	ldr	r3, [r7, #4]
 80299fe:	2201      	movs	r2, #1
 8029a00:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8029a04:	687b      	ldr	r3, [r7, #4]
 8029a06:	2200      	movs	r2, #0
 8029a08:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8029a0c:	687b      	ldr	r3, [r7, #4]
 8029a0e:	2200      	movs	r2, #0
 8029a10:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8029a12:	687b      	ldr	r3, [r7, #4]
 8029a14:	2200      	movs	r2, #0
 8029a16:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8029a1a:	687b      	ldr	r3, [r7, #4]
 8029a1c:	2200      	movs	r2, #0
 8029a1e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8029a22:	687b      	ldr	r3, [r7, #4]
 8029a24:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8029a28:	2b00      	cmp	r3, #0
 8029a2a:	d014      	beq.n	8029a56 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8029a2c:	687b      	ldr	r3, [r7, #4]
 8029a2e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8029a32:	685b      	ldr	r3, [r3, #4]
 8029a34:	2b00      	cmp	r3, #0
 8029a36:	d00e      	beq.n	8029a56 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8029a38:	687b      	ldr	r3, [r7, #4]
 8029a3a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8029a3e:	685b      	ldr	r3, [r3, #4]
 8029a40:	687a      	ldr	r2, [r7, #4]
 8029a42:	6852      	ldr	r2, [r2, #4]
 8029a44:	b2d2      	uxtb	r2, r2
 8029a46:	4611      	mov	r1, r2
 8029a48:	6878      	ldr	r0, [r7, #4]
 8029a4a:	4798      	blx	r3
 8029a4c:	4603      	mov	r3, r0
 8029a4e:	2b00      	cmp	r3, #0
 8029a50:	d001      	beq.n	8029a56 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8029a52:	2303      	movs	r3, #3
 8029a54:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8029a56:	2340      	movs	r3, #64	; 0x40
 8029a58:	2200      	movs	r2, #0
 8029a5a:	2100      	movs	r1, #0
 8029a5c:	6878      	ldr	r0, [r7, #4]
 8029a5e:	f001 fd34 	bl	802b4ca <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8029a62:	687b      	ldr	r3, [r7, #4]
 8029a64:	2201      	movs	r2, #1
 8029a66:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8029a6a:	687b      	ldr	r3, [r7, #4]
 8029a6c:	2240      	movs	r2, #64	; 0x40
 8029a6e:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8029a72:	2340      	movs	r3, #64	; 0x40
 8029a74:	2200      	movs	r2, #0
 8029a76:	2180      	movs	r1, #128	; 0x80
 8029a78:	6878      	ldr	r0, [r7, #4]
 8029a7a:	f001 fd26 	bl	802b4ca <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8029a7e:	687b      	ldr	r3, [r7, #4]
 8029a80:	2201      	movs	r2, #1
 8029a82:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8029a84:	687b      	ldr	r3, [r7, #4]
 8029a86:	2240      	movs	r2, #64	; 0x40
 8029a88:	621a      	str	r2, [r3, #32]

  return ret;
 8029a8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8029a8c:	4618      	mov	r0, r3
 8029a8e:	3710      	adds	r7, #16
 8029a90:	46bd      	mov	sp, r7
 8029a92:	bd80      	pop	{r7, pc}

08029a94 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8029a94:	b480      	push	{r7}
 8029a96:	b083      	sub	sp, #12
 8029a98:	af00      	add	r7, sp, #0
 8029a9a:	6078      	str	r0, [r7, #4]
 8029a9c:	460b      	mov	r3, r1
 8029a9e:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8029aa0:	687b      	ldr	r3, [r7, #4]
 8029aa2:	78fa      	ldrb	r2, [r7, #3]
 8029aa4:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8029aa6:	2300      	movs	r3, #0
}
 8029aa8:	4618      	mov	r0, r3
 8029aaa:	370c      	adds	r7, #12
 8029aac:	46bd      	mov	sp, r7
 8029aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029ab2:	4770      	bx	lr

08029ab4 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8029ab4:	b480      	push	{r7}
 8029ab6:	b083      	sub	sp, #12
 8029ab8:	af00      	add	r7, sp, #0
 8029aba:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8029abc:	687b      	ldr	r3, [r7, #4]
 8029abe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8029ac2:	b2da      	uxtb	r2, r3
 8029ac4:	687b      	ldr	r3, [r7, #4]
 8029ac6:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8029aca:	687b      	ldr	r3, [r7, #4]
 8029acc:	2204      	movs	r2, #4
 8029ace:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8029ad2:	2300      	movs	r3, #0
}
 8029ad4:	4618      	mov	r0, r3
 8029ad6:	370c      	adds	r7, #12
 8029ad8:	46bd      	mov	sp, r7
 8029ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029ade:	4770      	bx	lr

08029ae0 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8029ae0:	b480      	push	{r7}
 8029ae2:	b083      	sub	sp, #12
 8029ae4:	af00      	add	r7, sp, #0
 8029ae6:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8029ae8:	687b      	ldr	r3, [r7, #4]
 8029aea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8029aee:	b2db      	uxtb	r3, r3
 8029af0:	2b04      	cmp	r3, #4
 8029af2:	d106      	bne.n	8029b02 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8029af4:	687b      	ldr	r3, [r7, #4]
 8029af6:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8029afa:	b2da      	uxtb	r2, r3
 8029afc:	687b      	ldr	r3, [r7, #4]
 8029afe:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8029b02:	2300      	movs	r3, #0
}
 8029b04:	4618      	mov	r0, r3
 8029b06:	370c      	adds	r7, #12
 8029b08:	46bd      	mov	sp, r7
 8029b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029b0e:	4770      	bx	lr

08029b10 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8029b10:	b580      	push	{r7, lr}
 8029b12:	b082      	sub	sp, #8
 8029b14:	af00      	add	r7, sp, #0
 8029b16:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8029b18:	687b      	ldr	r3, [r7, #4]
 8029b1a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8029b1e:	b2db      	uxtb	r3, r3
 8029b20:	2b03      	cmp	r3, #3
 8029b22:	d110      	bne.n	8029b46 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8029b24:	687b      	ldr	r3, [r7, #4]
 8029b26:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8029b2a:	2b00      	cmp	r3, #0
 8029b2c:	d00b      	beq.n	8029b46 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8029b2e:	687b      	ldr	r3, [r7, #4]
 8029b30:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8029b34:	69db      	ldr	r3, [r3, #28]
 8029b36:	2b00      	cmp	r3, #0
 8029b38:	d005      	beq.n	8029b46 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8029b3a:	687b      	ldr	r3, [r7, #4]
 8029b3c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8029b40:	69db      	ldr	r3, [r3, #28]
 8029b42:	6878      	ldr	r0, [r7, #4]
 8029b44:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8029b46:	2300      	movs	r3, #0
}
 8029b48:	4618      	mov	r0, r3
 8029b4a:	3708      	adds	r7, #8
 8029b4c:	46bd      	mov	sp, r7
 8029b4e:	bd80      	pop	{r7, pc}

08029b50 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8029b50:	b580      	push	{r7, lr}
 8029b52:	b082      	sub	sp, #8
 8029b54:	af00      	add	r7, sp, #0
 8029b56:	6078      	str	r0, [r7, #4]
 8029b58:	460b      	mov	r3, r1
 8029b5a:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8029b5c:	687b      	ldr	r3, [r7, #4]
 8029b5e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8029b62:	687b      	ldr	r3, [r7, #4]
 8029b64:	32ae      	adds	r2, #174	; 0xae
 8029b66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8029b6a:	2b00      	cmp	r3, #0
 8029b6c:	d101      	bne.n	8029b72 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8029b6e:	2303      	movs	r3, #3
 8029b70:	e01c      	b.n	8029bac <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8029b72:	687b      	ldr	r3, [r7, #4]
 8029b74:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8029b78:	b2db      	uxtb	r3, r3
 8029b7a:	2b03      	cmp	r3, #3
 8029b7c:	d115      	bne.n	8029baa <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8029b7e:	687b      	ldr	r3, [r7, #4]
 8029b80:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8029b84:	687b      	ldr	r3, [r7, #4]
 8029b86:	32ae      	adds	r2, #174	; 0xae
 8029b88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8029b8c:	6a1b      	ldr	r3, [r3, #32]
 8029b8e:	2b00      	cmp	r3, #0
 8029b90:	d00b      	beq.n	8029baa <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8029b92:	687b      	ldr	r3, [r7, #4]
 8029b94:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8029b98:	687b      	ldr	r3, [r7, #4]
 8029b9a:	32ae      	adds	r2, #174	; 0xae
 8029b9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8029ba0:	6a1b      	ldr	r3, [r3, #32]
 8029ba2:	78fa      	ldrb	r2, [r7, #3]
 8029ba4:	4611      	mov	r1, r2
 8029ba6:	6878      	ldr	r0, [r7, #4]
 8029ba8:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8029baa:	2300      	movs	r3, #0
}
 8029bac:	4618      	mov	r0, r3
 8029bae:	3708      	adds	r7, #8
 8029bb0:	46bd      	mov	sp, r7
 8029bb2:	bd80      	pop	{r7, pc}

08029bb4 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8029bb4:	b580      	push	{r7, lr}
 8029bb6:	b082      	sub	sp, #8
 8029bb8:	af00      	add	r7, sp, #0
 8029bba:	6078      	str	r0, [r7, #4]
 8029bbc:	460b      	mov	r3, r1
 8029bbe:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8029bc0:	687b      	ldr	r3, [r7, #4]
 8029bc2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8029bc6:	687b      	ldr	r3, [r7, #4]
 8029bc8:	32ae      	adds	r2, #174	; 0xae
 8029bca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8029bce:	2b00      	cmp	r3, #0
 8029bd0:	d101      	bne.n	8029bd6 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8029bd2:	2303      	movs	r3, #3
 8029bd4:	e01c      	b.n	8029c10 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8029bd6:	687b      	ldr	r3, [r7, #4]
 8029bd8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8029bdc:	b2db      	uxtb	r3, r3
 8029bde:	2b03      	cmp	r3, #3
 8029be0:	d115      	bne.n	8029c0e <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8029be2:	687b      	ldr	r3, [r7, #4]
 8029be4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8029be8:	687b      	ldr	r3, [r7, #4]
 8029bea:	32ae      	adds	r2, #174	; 0xae
 8029bec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8029bf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8029bf2:	2b00      	cmp	r3, #0
 8029bf4:	d00b      	beq.n	8029c0e <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8029bf6:	687b      	ldr	r3, [r7, #4]
 8029bf8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8029bfc:	687b      	ldr	r3, [r7, #4]
 8029bfe:	32ae      	adds	r2, #174	; 0xae
 8029c00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8029c04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8029c06:	78fa      	ldrb	r2, [r7, #3]
 8029c08:	4611      	mov	r1, r2
 8029c0a:	6878      	ldr	r0, [r7, #4]
 8029c0c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8029c0e:	2300      	movs	r3, #0
}
 8029c10:	4618      	mov	r0, r3
 8029c12:	3708      	adds	r7, #8
 8029c14:	46bd      	mov	sp, r7
 8029c16:	bd80      	pop	{r7, pc}

08029c18 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8029c18:	b480      	push	{r7}
 8029c1a:	b083      	sub	sp, #12
 8029c1c:	af00      	add	r7, sp, #0
 8029c1e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8029c20:	2300      	movs	r3, #0
}
 8029c22:	4618      	mov	r0, r3
 8029c24:	370c      	adds	r7, #12
 8029c26:	46bd      	mov	sp, r7
 8029c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029c2c:	4770      	bx	lr

08029c2e <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8029c2e:	b580      	push	{r7, lr}
 8029c30:	b084      	sub	sp, #16
 8029c32:	af00      	add	r7, sp, #0
 8029c34:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8029c36:	2300      	movs	r3, #0
 8029c38:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8029c3a:	687b      	ldr	r3, [r7, #4]
 8029c3c:	2201      	movs	r2, #1
 8029c3e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8029c42:	687b      	ldr	r3, [r7, #4]
 8029c44:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8029c48:	2b00      	cmp	r3, #0
 8029c4a:	d00e      	beq.n	8029c6a <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8029c4c:	687b      	ldr	r3, [r7, #4]
 8029c4e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8029c52:	685b      	ldr	r3, [r3, #4]
 8029c54:	687a      	ldr	r2, [r7, #4]
 8029c56:	6852      	ldr	r2, [r2, #4]
 8029c58:	b2d2      	uxtb	r2, r2
 8029c5a:	4611      	mov	r1, r2
 8029c5c:	6878      	ldr	r0, [r7, #4]
 8029c5e:	4798      	blx	r3
 8029c60:	4603      	mov	r3, r0
 8029c62:	2b00      	cmp	r3, #0
 8029c64:	d001      	beq.n	8029c6a <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8029c66:	2303      	movs	r3, #3
 8029c68:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8029c6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8029c6c:	4618      	mov	r0, r3
 8029c6e:	3710      	adds	r7, #16
 8029c70:	46bd      	mov	sp, r7
 8029c72:	bd80      	pop	{r7, pc}

08029c74 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8029c74:	b480      	push	{r7}
 8029c76:	b083      	sub	sp, #12
 8029c78:	af00      	add	r7, sp, #0
 8029c7a:	6078      	str	r0, [r7, #4]
 8029c7c:	460b      	mov	r3, r1
 8029c7e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8029c80:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8029c82:	4618      	mov	r0, r3
 8029c84:	370c      	adds	r7, #12
 8029c86:	46bd      	mov	sp, r7
 8029c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029c8c:	4770      	bx	lr

08029c8e <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8029c8e:	b480      	push	{r7}
 8029c90:	b083      	sub	sp, #12
 8029c92:	af00      	add	r7, sp, #0
 8029c94:	6078      	str	r0, [r7, #4]
 8029c96:	460b      	mov	r3, r1
 8029c98:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8029c9a:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8029c9c:	4618      	mov	r0, r3
 8029c9e:	370c      	adds	r7, #12
 8029ca0:	46bd      	mov	sp, r7
 8029ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029ca6:	4770      	bx	lr

08029ca8 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8029ca8:	b580      	push	{r7, lr}
 8029caa:	b086      	sub	sp, #24
 8029cac:	af00      	add	r7, sp, #0
 8029cae:	6078      	str	r0, [r7, #4]
 8029cb0:	460b      	mov	r3, r1
 8029cb2:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8029cb4:	687b      	ldr	r3, [r7, #4]
 8029cb6:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8029cb8:	687b      	ldr	r3, [r7, #4]
 8029cba:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8029cbc:	2300      	movs	r3, #0
 8029cbe:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8029cc0:	68fb      	ldr	r3, [r7, #12]
 8029cc2:	885b      	ldrh	r3, [r3, #2]
 8029cc4:	b29a      	uxth	r2, r3
 8029cc6:	68fb      	ldr	r3, [r7, #12]
 8029cc8:	781b      	ldrb	r3, [r3, #0]
 8029cca:	b29b      	uxth	r3, r3
 8029ccc:	429a      	cmp	r2, r3
 8029cce:	d920      	bls.n	8029d12 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8029cd0:	68fb      	ldr	r3, [r7, #12]
 8029cd2:	781b      	ldrb	r3, [r3, #0]
 8029cd4:	b29b      	uxth	r3, r3
 8029cd6:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8029cd8:	e013      	b.n	8029d02 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8029cda:	f107 030a 	add.w	r3, r7, #10
 8029cde:	4619      	mov	r1, r3
 8029ce0:	6978      	ldr	r0, [r7, #20]
 8029ce2:	f000 f81b 	bl	8029d1c <USBD_GetNextDesc>
 8029ce6:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8029ce8:	697b      	ldr	r3, [r7, #20]
 8029cea:	785b      	ldrb	r3, [r3, #1]
 8029cec:	2b05      	cmp	r3, #5
 8029cee:	d108      	bne.n	8029d02 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8029cf0:	697b      	ldr	r3, [r7, #20]
 8029cf2:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8029cf4:	693b      	ldr	r3, [r7, #16]
 8029cf6:	789b      	ldrb	r3, [r3, #2]
 8029cf8:	78fa      	ldrb	r2, [r7, #3]
 8029cfa:	429a      	cmp	r2, r3
 8029cfc:	d008      	beq.n	8029d10 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8029cfe:	2300      	movs	r3, #0
 8029d00:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8029d02:	68fb      	ldr	r3, [r7, #12]
 8029d04:	885b      	ldrh	r3, [r3, #2]
 8029d06:	b29a      	uxth	r2, r3
 8029d08:	897b      	ldrh	r3, [r7, #10]
 8029d0a:	429a      	cmp	r2, r3
 8029d0c:	d8e5      	bhi.n	8029cda <USBD_GetEpDesc+0x32>
 8029d0e:	e000      	b.n	8029d12 <USBD_GetEpDesc+0x6a>
          break;
 8029d10:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8029d12:	693b      	ldr	r3, [r7, #16]
}
 8029d14:	4618      	mov	r0, r3
 8029d16:	3718      	adds	r7, #24
 8029d18:	46bd      	mov	sp, r7
 8029d1a:	bd80      	pop	{r7, pc}

08029d1c <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8029d1c:	b480      	push	{r7}
 8029d1e:	b085      	sub	sp, #20
 8029d20:	af00      	add	r7, sp, #0
 8029d22:	6078      	str	r0, [r7, #4]
 8029d24:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8029d26:	687b      	ldr	r3, [r7, #4]
 8029d28:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8029d2a:	683b      	ldr	r3, [r7, #0]
 8029d2c:	881a      	ldrh	r2, [r3, #0]
 8029d2e:	68fb      	ldr	r3, [r7, #12]
 8029d30:	781b      	ldrb	r3, [r3, #0]
 8029d32:	b29b      	uxth	r3, r3
 8029d34:	4413      	add	r3, r2
 8029d36:	b29a      	uxth	r2, r3
 8029d38:	683b      	ldr	r3, [r7, #0]
 8029d3a:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8029d3c:	68fb      	ldr	r3, [r7, #12]
 8029d3e:	781b      	ldrb	r3, [r3, #0]
 8029d40:	461a      	mov	r2, r3
 8029d42:	687b      	ldr	r3, [r7, #4]
 8029d44:	4413      	add	r3, r2
 8029d46:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8029d48:	68fb      	ldr	r3, [r7, #12]
}
 8029d4a:	4618      	mov	r0, r3
 8029d4c:	3714      	adds	r7, #20
 8029d4e:	46bd      	mov	sp, r7
 8029d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029d54:	4770      	bx	lr

08029d56 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8029d56:	b480      	push	{r7}
 8029d58:	b087      	sub	sp, #28
 8029d5a:	af00      	add	r7, sp, #0
 8029d5c:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8029d5e:	687b      	ldr	r3, [r7, #4]
 8029d60:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8029d62:	697b      	ldr	r3, [r7, #20]
 8029d64:	781b      	ldrb	r3, [r3, #0]
 8029d66:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8029d68:	697b      	ldr	r3, [r7, #20]
 8029d6a:	3301      	adds	r3, #1
 8029d6c:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8029d6e:	697b      	ldr	r3, [r7, #20]
 8029d70:	781b      	ldrb	r3, [r3, #0]
 8029d72:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8029d74:	8a3b      	ldrh	r3, [r7, #16]
 8029d76:	021b      	lsls	r3, r3, #8
 8029d78:	b21a      	sxth	r2, r3
 8029d7a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8029d7e:	4313      	orrs	r3, r2
 8029d80:	b21b      	sxth	r3, r3
 8029d82:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8029d84:	89fb      	ldrh	r3, [r7, #14]
}
 8029d86:	4618      	mov	r0, r3
 8029d88:	371c      	adds	r7, #28
 8029d8a:	46bd      	mov	sp, r7
 8029d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029d90:	4770      	bx	lr
	...

08029d94 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8029d94:	b580      	push	{r7, lr}
 8029d96:	b084      	sub	sp, #16
 8029d98:	af00      	add	r7, sp, #0
 8029d9a:	6078      	str	r0, [r7, #4]
 8029d9c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8029d9e:	2300      	movs	r3, #0
 8029da0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8029da2:	683b      	ldr	r3, [r7, #0]
 8029da4:	781b      	ldrb	r3, [r3, #0]
 8029da6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8029daa:	2b40      	cmp	r3, #64	; 0x40
 8029dac:	d005      	beq.n	8029dba <USBD_StdDevReq+0x26>
 8029dae:	2b40      	cmp	r3, #64	; 0x40
 8029db0:	d857      	bhi.n	8029e62 <USBD_StdDevReq+0xce>
 8029db2:	2b00      	cmp	r3, #0
 8029db4:	d00f      	beq.n	8029dd6 <USBD_StdDevReq+0x42>
 8029db6:	2b20      	cmp	r3, #32
 8029db8:	d153      	bne.n	8029e62 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8029dba:	687b      	ldr	r3, [r7, #4]
 8029dbc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8029dc0:	687b      	ldr	r3, [r7, #4]
 8029dc2:	32ae      	adds	r2, #174	; 0xae
 8029dc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8029dc8:	689b      	ldr	r3, [r3, #8]
 8029dca:	6839      	ldr	r1, [r7, #0]
 8029dcc:	6878      	ldr	r0, [r7, #4]
 8029dce:	4798      	blx	r3
 8029dd0:	4603      	mov	r3, r0
 8029dd2:	73fb      	strb	r3, [r7, #15]
      break;
 8029dd4:	e04a      	b.n	8029e6c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8029dd6:	683b      	ldr	r3, [r7, #0]
 8029dd8:	785b      	ldrb	r3, [r3, #1]
 8029dda:	2b09      	cmp	r3, #9
 8029ddc:	d83b      	bhi.n	8029e56 <USBD_StdDevReq+0xc2>
 8029dde:	a201      	add	r2, pc, #4	; (adr r2, 8029de4 <USBD_StdDevReq+0x50>)
 8029de0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8029de4:	08029e39 	.word	0x08029e39
 8029de8:	08029e4d 	.word	0x08029e4d
 8029dec:	08029e57 	.word	0x08029e57
 8029df0:	08029e43 	.word	0x08029e43
 8029df4:	08029e57 	.word	0x08029e57
 8029df8:	08029e17 	.word	0x08029e17
 8029dfc:	08029e0d 	.word	0x08029e0d
 8029e00:	08029e57 	.word	0x08029e57
 8029e04:	08029e2f 	.word	0x08029e2f
 8029e08:	08029e21 	.word	0x08029e21
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8029e0c:	6839      	ldr	r1, [r7, #0]
 8029e0e:	6878      	ldr	r0, [r7, #4]
 8029e10:	f000 fa3c 	bl	802a28c <USBD_GetDescriptor>
          break;
 8029e14:	e024      	b.n	8029e60 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8029e16:	6839      	ldr	r1, [r7, #0]
 8029e18:	6878      	ldr	r0, [r7, #4]
 8029e1a:	f000 fbcb 	bl	802a5b4 <USBD_SetAddress>
          break;
 8029e1e:	e01f      	b.n	8029e60 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8029e20:	6839      	ldr	r1, [r7, #0]
 8029e22:	6878      	ldr	r0, [r7, #4]
 8029e24:	f000 fc0a 	bl	802a63c <USBD_SetConfig>
 8029e28:	4603      	mov	r3, r0
 8029e2a:	73fb      	strb	r3, [r7, #15]
          break;
 8029e2c:	e018      	b.n	8029e60 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8029e2e:	6839      	ldr	r1, [r7, #0]
 8029e30:	6878      	ldr	r0, [r7, #4]
 8029e32:	f000 fcad 	bl	802a790 <USBD_GetConfig>
          break;
 8029e36:	e013      	b.n	8029e60 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8029e38:	6839      	ldr	r1, [r7, #0]
 8029e3a:	6878      	ldr	r0, [r7, #4]
 8029e3c:	f000 fcde 	bl	802a7fc <USBD_GetStatus>
          break;
 8029e40:	e00e      	b.n	8029e60 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8029e42:	6839      	ldr	r1, [r7, #0]
 8029e44:	6878      	ldr	r0, [r7, #4]
 8029e46:	f000 fd0d 	bl	802a864 <USBD_SetFeature>
          break;
 8029e4a:	e009      	b.n	8029e60 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8029e4c:	6839      	ldr	r1, [r7, #0]
 8029e4e:	6878      	ldr	r0, [r7, #4]
 8029e50:	f000 fd31 	bl	802a8b6 <USBD_ClrFeature>
          break;
 8029e54:	e004      	b.n	8029e60 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8029e56:	6839      	ldr	r1, [r7, #0]
 8029e58:	6878      	ldr	r0, [r7, #4]
 8029e5a:	f000 fd88 	bl	802a96e <USBD_CtlError>
          break;
 8029e5e:	bf00      	nop
      }
      break;
 8029e60:	e004      	b.n	8029e6c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8029e62:	6839      	ldr	r1, [r7, #0]
 8029e64:	6878      	ldr	r0, [r7, #4]
 8029e66:	f000 fd82 	bl	802a96e <USBD_CtlError>
      break;
 8029e6a:	bf00      	nop
  }

  return ret;
 8029e6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8029e6e:	4618      	mov	r0, r3
 8029e70:	3710      	adds	r7, #16
 8029e72:	46bd      	mov	sp, r7
 8029e74:	bd80      	pop	{r7, pc}
 8029e76:	bf00      	nop

08029e78 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8029e78:	b580      	push	{r7, lr}
 8029e7a:	b084      	sub	sp, #16
 8029e7c:	af00      	add	r7, sp, #0
 8029e7e:	6078      	str	r0, [r7, #4]
 8029e80:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8029e82:	2300      	movs	r3, #0
 8029e84:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8029e86:	683b      	ldr	r3, [r7, #0]
 8029e88:	781b      	ldrb	r3, [r3, #0]
 8029e8a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8029e8e:	2b40      	cmp	r3, #64	; 0x40
 8029e90:	d005      	beq.n	8029e9e <USBD_StdItfReq+0x26>
 8029e92:	2b40      	cmp	r3, #64	; 0x40
 8029e94:	d852      	bhi.n	8029f3c <USBD_StdItfReq+0xc4>
 8029e96:	2b00      	cmp	r3, #0
 8029e98:	d001      	beq.n	8029e9e <USBD_StdItfReq+0x26>
 8029e9a:	2b20      	cmp	r3, #32
 8029e9c:	d14e      	bne.n	8029f3c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8029e9e:	687b      	ldr	r3, [r7, #4]
 8029ea0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8029ea4:	b2db      	uxtb	r3, r3
 8029ea6:	3b01      	subs	r3, #1
 8029ea8:	2b02      	cmp	r3, #2
 8029eaa:	d840      	bhi.n	8029f2e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8029eac:	683b      	ldr	r3, [r7, #0]
 8029eae:	889b      	ldrh	r3, [r3, #4]
 8029eb0:	b2db      	uxtb	r3, r3
 8029eb2:	2b01      	cmp	r3, #1
 8029eb4:	d836      	bhi.n	8029f24 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8029eb6:	683b      	ldr	r3, [r7, #0]
 8029eb8:	889b      	ldrh	r3, [r3, #4]
 8029eba:	b2db      	uxtb	r3, r3
 8029ebc:	4619      	mov	r1, r3
 8029ebe:	6878      	ldr	r0, [r7, #4]
 8029ec0:	f7ff fed8 	bl	8029c74 <USBD_CoreFindIF>
 8029ec4:	4603      	mov	r3, r0
 8029ec6:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8029ec8:	7bbb      	ldrb	r3, [r7, #14]
 8029eca:	2bff      	cmp	r3, #255	; 0xff
 8029ecc:	d01d      	beq.n	8029f0a <USBD_StdItfReq+0x92>
 8029ece:	7bbb      	ldrb	r3, [r7, #14]
 8029ed0:	2b00      	cmp	r3, #0
 8029ed2:	d11a      	bne.n	8029f0a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8029ed4:	7bba      	ldrb	r2, [r7, #14]
 8029ed6:	687b      	ldr	r3, [r7, #4]
 8029ed8:	32ae      	adds	r2, #174	; 0xae
 8029eda:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8029ede:	689b      	ldr	r3, [r3, #8]
 8029ee0:	2b00      	cmp	r3, #0
 8029ee2:	d00f      	beq.n	8029f04 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8029ee4:	7bba      	ldrb	r2, [r7, #14]
 8029ee6:	687b      	ldr	r3, [r7, #4]
 8029ee8:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8029eec:	7bba      	ldrb	r2, [r7, #14]
 8029eee:	687b      	ldr	r3, [r7, #4]
 8029ef0:	32ae      	adds	r2, #174	; 0xae
 8029ef2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8029ef6:	689b      	ldr	r3, [r3, #8]
 8029ef8:	6839      	ldr	r1, [r7, #0]
 8029efa:	6878      	ldr	r0, [r7, #4]
 8029efc:	4798      	blx	r3
 8029efe:	4603      	mov	r3, r0
 8029f00:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8029f02:	e004      	b.n	8029f0e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8029f04:	2303      	movs	r3, #3
 8029f06:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8029f08:	e001      	b.n	8029f0e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8029f0a:	2303      	movs	r3, #3
 8029f0c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8029f0e:	683b      	ldr	r3, [r7, #0]
 8029f10:	88db      	ldrh	r3, [r3, #6]
 8029f12:	2b00      	cmp	r3, #0
 8029f14:	d110      	bne.n	8029f38 <USBD_StdItfReq+0xc0>
 8029f16:	7bfb      	ldrb	r3, [r7, #15]
 8029f18:	2b00      	cmp	r3, #0
 8029f1a:	d10d      	bne.n	8029f38 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8029f1c:	6878      	ldr	r0, [r7, #4]
 8029f1e:	f000 fdf1 	bl	802ab04 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8029f22:	e009      	b.n	8029f38 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8029f24:	6839      	ldr	r1, [r7, #0]
 8029f26:	6878      	ldr	r0, [r7, #4]
 8029f28:	f000 fd21 	bl	802a96e <USBD_CtlError>
          break;
 8029f2c:	e004      	b.n	8029f38 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8029f2e:	6839      	ldr	r1, [r7, #0]
 8029f30:	6878      	ldr	r0, [r7, #4]
 8029f32:	f000 fd1c 	bl	802a96e <USBD_CtlError>
          break;
 8029f36:	e000      	b.n	8029f3a <USBD_StdItfReq+0xc2>
          break;
 8029f38:	bf00      	nop
      }
      break;
 8029f3a:	e004      	b.n	8029f46 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8029f3c:	6839      	ldr	r1, [r7, #0]
 8029f3e:	6878      	ldr	r0, [r7, #4]
 8029f40:	f000 fd15 	bl	802a96e <USBD_CtlError>
      break;
 8029f44:	bf00      	nop
  }

  return ret;
 8029f46:	7bfb      	ldrb	r3, [r7, #15]
}
 8029f48:	4618      	mov	r0, r3
 8029f4a:	3710      	adds	r7, #16
 8029f4c:	46bd      	mov	sp, r7
 8029f4e:	bd80      	pop	{r7, pc}

08029f50 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8029f50:	b580      	push	{r7, lr}
 8029f52:	b084      	sub	sp, #16
 8029f54:	af00      	add	r7, sp, #0
 8029f56:	6078      	str	r0, [r7, #4]
 8029f58:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8029f5a:	2300      	movs	r3, #0
 8029f5c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8029f5e:	683b      	ldr	r3, [r7, #0]
 8029f60:	889b      	ldrh	r3, [r3, #4]
 8029f62:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8029f64:	683b      	ldr	r3, [r7, #0]
 8029f66:	781b      	ldrb	r3, [r3, #0]
 8029f68:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8029f6c:	2b40      	cmp	r3, #64	; 0x40
 8029f6e:	d007      	beq.n	8029f80 <USBD_StdEPReq+0x30>
 8029f70:	2b40      	cmp	r3, #64	; 0x40
 8029f72:	f200 817f 	bhi.w	802a274 <USBD_StdEPReq+0x324>
 8029f76:	2b00      	cmp	r3, #0
 8029f78:	d02a      	beq.n	8029fd0 <USBD_StdEPReq+0x80>
 8029f7a:	2b20      	cmp	r3, #32
 8029f7c:	f040 817a 	bne.w	802a274 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8029f80:	7bbb      	ldrb	r3, [r7, #14]
 8029f82:	4619      	mov	r1, r3
 8029f84:	6878      	ldr	r0, [r7, #4]
 8029f86:	f7ff fe82 	bl	8029c8e <USBD_CoreFindEP>
 8029f8a:	4603      	mov	r3, r0
 8029f8c:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8029f8e:	7b7b      	ldrb	r3, [r7, #13]
 8029f90:	2bff      	cmp	r3, #255	; 0xff
 8029f92:	f000 8174 	beq.w	802a27e <USBD_StdEPReq+0x32e>
 8029f96:	7b7b      	ldrb	r3, [r7, #13]
 8029f98:	2b00      	cmp	r3, #0
 8029f9a:	f040 8170 	bne.w	802a27e <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8029f9e:	7b7a      	ldrb	r2, [r7, #13]
 8029fa0:	687b      	ldr	r3, [r7, #4]
 8029fa2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8029fa6:	7b7a      	ldrb	r2, [r7, #13]
 8029fa8:	687b      	ldr	r3, [r7, #4]
 8029faa:	32ae      	adds	r2, #174	; 0xae
 8029fac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8029fb0:	689b      	ldr	r3, [r3, #8]
 8029fb2:	2b00      	cmp	r3, #0
 8029fb4:	f000 8163 	beq.w	802a27e <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8029fb8:	7b7a      	ldrb	r2, [r7, #13]
 8029fba:	687b      	ldr	r3, [r7, #4]
 8029fbc:	32ae      	adds	r2, #174	; 0xae
 8029fbe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8029fc2:	689b      	ldr	r3, [r3, #8]
 8029fc4:	6839      	ldr	r1, [r7, #0]
 8029fc6:	6878      	ldr	r0, [r7, #4]
 8029fc8:	4798      	blx	r3
 8029fca:	4603      	mov	r3, r0
 8029fcc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8029fce:	e156      	b.n	802a27e <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8029fd0:	683b      	ldr	r3, [r7, #0]
 8029fd2:	785b      	ldrb	r3, [r3, #1]
 8029fd4:	2b03      	cmp	r3, #3
 8029fd6:	d008      	beq.n	8029fea <USBD_StdEPReq+0x9a>
 8029fd8:	2b03      	cmp	r3, #3
 8029fda:	f300 8145 	bgt.w	802a268 <USBD_StdEPReq+0x318>
 8029fde:	2b00      	cmp	r3, #0
 8029fe0:	f000 809b 	beq.w	802a11a <USBD_StdEPReq+0x1ca>
 8029fe4:	2b01      	cmp	r3, #1
 8029fe6:	d03c      	beq.n	802a062 <USBD_StdEPReq+0x112>
 8029fe8:	e13e      	b.n	802a268 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8029fea:	687b      	ldr	r3, [r7, #4]
 8029fec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8029ff0:	b2db      	uxtb	r3, r3
 8029ff2:	2b02      	cmp	r3, #2
 8029ff4:	d002      	beq.n	8029ffc <USBD_StdEPReq+0xac>
 8029ff6:	2b03      	cmp	r3, #3
 8029ff8:	d016      	beq.n	802a028 <USBD_StdEPReq+0xd8>
 8029ffa:	e02c      	b.n	802a056 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8029ffc:	7bbb      	ldrb	r3, [r7, #14]
 8029ffe:	2b00      	cmp	r3, #0
 802a000:	d00d      	beq.n	802a01e <USBD_StdEPReq+0xce>
 802a002:	7bbb      	ldrb	r3, [r7, #14]
 802a004:	2b80      	cmp	r3, #128	; 0x80
 802a006:	d00a      	beq.n	802a01e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 802a008:	7bbb      	ldrb	r3, [r7, #14]
 802a00a:	4619      	mov	r1, r3
 802a00c:	6878      	ldr	r0, [r7, #4]
 802a00e:	f001 faa1 	bl	802b554 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 802a012:	2180      	movs	r1, #128	; 0x80
 802a014:	6878      	ldr	r0, [r7, #4]
 802a016:	f001 fa9d 	bl	802b554 <USBD_LL_StallEP>
 802a01a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 802a01c:	e020      	b.n	802a060 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 802a01e:	6839      	ldr	r1, [r7, #0]
 802a020:	6878      	ldr	r0, [r7, #4]
 802a022:	f000 fca4 	bl	802a96e <USBD_CtlError>
              break;
 802a026:	e01b      	b.n	802a060 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 802a028:	683b      	ldr	r3, [r7, #0]
 802a02a:	885b      	ldrh	r3, [r3, #2]
 802a02c:	2b00      	cmp	r3, #0
 802a02e:	d10e      	bne.n	802a04e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 802a030:	7bbb      	ldrb	r3, [r7, #14]
 802a032:	2b00      	cmp	r3, #0
 802a034:	d00b      	beq.n	802a04e <USBD_StdEPReq+0xfe>
 802a036:	7bbb      	ldrb	r3, [r7, #14]
 802a038:	2b80      	cmp	r3, #128	; 0x80
 802a03a:	d008      	beq.n	802a04e <USBD_StdEPReq+0xfe>
 802a03c:	683b      	ldr	r3, [r7, #0]
 802a03e:	88db      	ldrh	r3, [r3, #6]
 802a040:	2b00      	cmp	r3, #0
 802a042:	d104      	bne.n	802a04e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 802a044:	7bbb      	ldrb	r3, [r7, #14]
 802a046:	4619      	mov	r1, r3
 802a048:	6878      	ldr	r0, [r7, #4]
 802a04a:	f001 fa83 	bl	802b554 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 802a04e:	6878      	ldr	r0, [r7, #4]
 802a050:	f000 fd58 	bl	802ab04 <USBD_CtlSendStatus>

              break;
 802a054:	e004      	b.n	802a060 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 802a056:	6839      	ldr	r1, [r7, #0]
 802a058:	6878      	ldr	r0, [r7, #4]
 802a05a:	f000 fc88 	bl	802a96e <USBD_CtlError>
              break;
 802a05e:	bf00      	nop
          }
          break;
 802a060:	e107      	b.n	802a272 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 802a062:	687b      	ldr	r3, [r7, #4]
 802a064:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 802a068:	b2db      	uxtb	r3, r3
 802a06a:	2b02      	cmp	r3, #2
 802a06c:	d002      	beq.n	802a074 <USBD_StdEPReq+0x124>
 802a06e:	2b03      	cmp	r3, #3
 802a070:	d016      	beq.n	802a0a0 <USBD_StdEPReq+0x150>
 802a072:	e04b      	b.n	802a10c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 802a074:	7bbb      	ldrb	r3, [r7, #14]
 802a076:	2b00      	cmp	r3, #0
 802a078:	d00d      	beq.n	802a096 <USBD_StdEPReq+0x146>
 802a07a:	7bbb      	ldrb	r3, [r7, #14]
 802a07c:	2b80      	cmp	r3, #128	; 0x80
 802a07e:	d00a      	beq.n	802a096 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 802a080:	7bbb      	ldrb	r3, [r7, #14]
 802a082:	4619      	mov	r1, r3
 802a084:	6878      	ldr	r0, [r7, #4]
 802a086:	f001 fa65 	bl	802b554 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 802a08a:	2180      	movs	r1, #128	; 0x80
 802a08c:	6878      	ldr	r0, [r7, #4]
 802a08e:	f001 fa61 	bl	802b554 <USBD_LL_StallEP>
 802a092:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 802a094:	e040      	b.n	802a118 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 802a096:	6839      	ldr	r1, [r7, #0]
 802a098:	6878      	ldr	r0, [r7, #4]
 802a09a:	f000 fc68 	bl	802a96e <USBD_CtlError>
              break;
 802a09e:	e03b      	b.n	802a118 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 802a0a0:	683b      	ldr	r3, [r7, #0]
 802a0a2:	885b      	ldrh	r3, [r3, #2]
 802a0a4:	2b00      	cmp	r3, #0
 802a0a6:	d136      	bne.n	802a116 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 802a0a8:	7bbb      	ldrb	r3, [r7, #14]
 802a0aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 802a0ae:	2b00      	cmp	r3, #0
 802a0b0:	d004      	beq.n	802a0bc <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 802a0b2:	7bbb      	ldrb	r3, [r7, #14]
 802a0b4:	4619      	mov	r1, r3
 802a0b6:	6878      	ldr	r0, [r7, #4]
 802a0b8:	f001 fa6b 	bl	802b592 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 802a0bc:	6878      	ldr	r0, [r7, #4]
 802a0be:	f000 fd21 	bl	802ab04 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 802a0c2:	7bbb      	ldrb	r3, [r7, #14]
 802a0c4:	4619      	mov	r1, r3
 802a0c6:	6878      	ldr	r0, [r7, #4]
 802a0c8:	f7ff fde1 	bl	8029c8e <USBD_CoreFindEP>
 802a0cc:	4603      	mov	r3, r0
 802a0ce:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 802a0d0:	7b7b      	ldrb	r3, [r7, #13]
 802a0d2:	2bff      	cmp	r3, #255	; 0xff
 802a0d4:	d01f      	beq.n	802a116 <USBD_StdEPReq+0x1c6>
 802a0d6:	7b7b      	ldrb	r3, [r7, #13]
 802a0d8:	2b00      	cmp	r3, #0
 802a0da:	d11c      	bne.n	802a116 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 802a0dc:	7b7a      	ldrb	r2, [r7, #13]
 802a0de:	687b      	ldr	r3, [r7, #4]
 802a0e0:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 802a0e4:	7b7a      	ldrb	r2, [r7, #13]
 802a0e6:	687b      	ldr	r3, [r7, #4]
 802a0e8:	32ae      	adds	r2, #174	; 0xae
 802a0ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 802a0ee:	689b      	ldr	r3, [r3, #8]
 802a0f0:	2b00      	cmp	r3, #0
 802a0f2:	d010      	beq.n	802a116 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 802a0f4:	7b7a      	ldrb	r2, [r7, #13]
 802a0f6:	687b      	ldr	r3, [r7, #4]
 802a0f8:	32ae      	adds	r2, #174	; 0xae
 802a0fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 802a0fe:	689b      	ldr	r3, [r3, #8]
 802a100:	6839      	ldr	r1, [r7, #0]
 802a102:	6878      	ldr	r0, [r7, #4]
 802a104:	4798      	blx	r3
 802a106:	4603      	mov	r3, r0
 802a108:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 802a10a:	e004      	b.n	802a116 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 802a10c:	6839      	ldr	r1, [r7, #0]
 802a10e:	6878      	ldr	r0, [r7, #4]
 802a110:	f000 fc2d 	bl	802a96e <USBD_CtlError>
              break;
 802a114:	e000      	b.n	802a118 <USBD_StdEPReq+0x1c8>
              break;
 802a116:	bf00      	nop
          }
          break;
 802a118:	e0ab      	b.n	802a272 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 802a11a:	687b      	ldr	r3, [r7, #4]
 802a11c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 802a120:	b2db      	uxtb	r3, r3
 802a122:	2b02      	cmp	r3, #2
 802a124:	d002      	beq.n	802a12c <USBD_StdEPReq+0x1dc>
 802a126:	2b03      	cmp	r3, #3
 802a128:	d032      	beq.n	802a190 <USBD_StdEPReq+0x240>
 802a12a:	e097      	b.n	802a25c <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 802a12c:	7bbb      	ldrb	r3, [r7, #14]
 802a12e:	2b00      	cmp	r3, #0
 802a130:	d007      	beq.n	802a142 <USBD_StdEPReq+0x1f2>
 802a132:	7bbb      	ldrb	r3, [r7, #14]
 802a134:	2b80      	cmp	r3, #128	; 0x80
 802a136:	d004      	beq.n	802a142 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 802a138:	6839      	ldr	r1, [r7, #0]
 802a13a:	6878      	ldr	r0, [r7, #4]
 802a13c:	f000 fc17 	bl	802a96e <USBD_CtlError>
                break;
 802a140:	e091      	b.n	802a266 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 802a142:	f997 300e 	ldrsb.w	r3, [r7, #14]
 802a146:	2b00      	cmp	r3, #0
 802a148:	da0b      	bge.n	802a162 <USBD_StdEPReq+0x212>
 802a14a:	7bbb      	ldrb	r3, [r7, #14]
 802a14c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 802a150:	4613      	mov	r3, r2
 802a152:	009b      	lsls	r3, r3, #2
 802a154:	4413      	add	r3, r2
 802a156:	009b      	lsls	r3, r3, #2
 802a158:	3310      	adds	r3, #16
 802a15a:	687a      	ldr	r2, [r7, #4]
 802a15c:	4413      	add	r3, r2
 802a15e:	3304      	adds	r3, #4
 802a160:	e00b      	b.n	802a17a <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 802a162:	7bbb      	ldrb	r3, [r7, #14]
 802a164:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 802a168:	4613      	mov	r3, r2
 802a16a:	009b      	lsls	r3, r3, #2
 802a16c:	4413      	add	r3, r2
 802a16e:	009b      	lsls	r3, r3, #2
 802a170:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 802a174:	687a      	ldr	r2, [r7, #4]
 802a176:	4413      	add	r3, r2
 802a178:	3304      	adds	r3, #4
 802a17a:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 802a17c:	68bb      	ldr	r3, [r7, #8]
 802a17e:	2200      	movs	r2, #0
 802a180:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 802a182:	68bb      	ldr	r3, [r7, #8]
 802a184:	2202      	movs	r2, #2
 802a186:	4619      	mov	r1, r3
 802a188:	6878      	ldr	r0, [r7, #4]
 802a18a:	f000 fc61 	bl	802aa50 <USBD_CtlSendData>
              break;
 802a18e:	e06a      	b.n	802a266 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 802a190:	f997 300e 	ldrsb.w	r3, [r7, #14]
 802a194:	2b00      	cmp	r3, #0
 802a196:	da11      	bge.n	802a1bc <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 802a198:	7bbb      	ldrb	r3, [r7, #14]
 802a19a:	f003 020f 	and.w	r2, r3, #15
 802a19e:	6879      	ldr	r1, [r7, #4]
 802a1a0:	4613      	mov	r3, r2
 802a1a2:	009b      	lsls	r3, r3, #2
 802a1a4:	4413      	add	r3, r2
 802a1a6:	009b      	lsls	r3, r3, #2
 802a1a8:	440b      	add	r3, r1
 802a1aa:	3324      	adds	r3, #36	; 0x24
 802a1ac:	881b      	ldrh	r3, [r3, #0]
 802a1ae:	2b00      	cmp	r3, #0
 802a1b0:	d117      	bne.n	802a1e2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 802a1b2:	6839      	ldr	r1, [r7, #0]
 802a1b4:	6878      	ldr	r0, [r7, #4]
 802a1b6:	f000 fbda 	bl	802a96e <USBD_CtlError>
                  break;
 802a1ba:	e054      	b.n	802a266 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 802a1bc:	7bbb      	ldrb	r3, [r7, #14]
 802a1be:	f003 020f 	and.w	r2, r3, #15
 802a1c2:	6879      	ldr	r1, [r7, #4]
 802a1c4:	4613      	mov	r3, r2
 802a1c6:	009b      	lsls	r3, r3, #2
 802a1c8:	4413      	add	r3, r2
 802a1ca:	009b      	lsls	r3, r3, #2
 802a1cc:	440b      	add	r3, r1
 802a1ce:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 802a1d2:	881b      	ldrh	r3, [r3, #0]
 802a1d4:	2b00      	cmp	r3, #0
 802a1d6:	d104      	bne.n	802a1e2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 802a1d8:	6839      	ldr	r1, [r7, #0]
 802a1da:	6878      	ldr	r0, [r7, #4]
 802a1dc:	f000 fbc7 	bl	802a96e <USBD_CtlError>
                  break;
 802a1e0:	e041      	b.n	802a266 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 802a1e2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 802a1e6:	2b00      	cmp	r3, #0
 802a1e8:	da0b      	bge.n	802a202 <USBD_StdEPReq+0x2b2>
 802a1ea:	7bbb      	ldrb	r3, [r7, #14]
 802a1ec:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 802a1f0:	4613      	mov	r3, r2
 802a1f2:	009b      	lsls	r3, r3, #2
 802a1f4:	4413      	add	r3, r2
 802a1f6:	009b      	lsls	r3, r3, #2
 802a1f8:	3310      	adds	r3, #16
 802a1fa:	687a      	ldr	r2, [r7, #4]
 802a1fc:	4413      	add	r3, r2
 802a1fe:	3304      	adds	r3, #4
 802a200:	e00b      	b.n	802a21a <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 802a202:	7bbb      	ldrb	r3, [r7, #14]
 802a204:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 802a208:	4613      	mov	r3, r2
 802a20a:	009b      	lsls	r3, r3, #2
 802a20c:	4413      	add	r3, r2
 802a20e:	009b      	lsls	r3, r3, #2
 802a210:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 802a214:	687a      	ldr	r2, [r7, #4]
 802a216:	4413      	add	r3, r2
 802a218:	3304      	adds	r3, #4
 802a21a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 802a21c:	7bbb      	ldrb	r3, [r7, #14]
 802a21e:	2b00      	cmp	r3, #0
 802a220:	d002      	beq.n	802a228 <USBD_StdEPReq+0x2d8>
 802a222:	7bbb      	ldrb	r3, [r7, #14]
 802a224:	2b80      	cmp	r3, #128	; 0x80
 802a226:	d103      	bne.n	802a230 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 802a228:	68bb      	ldr	r3, [r7, #8]
 802a22a:	2200      	movs	r2, #0
 802a22c:	601a      	str	r2, [r3, #0]
 802a22e:	e00e      	b.n	802a24e <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 802a230:	7bbb      	ldrb	r3, [r7, #14]
 802a232:	4619      	mov	r1, r3
 802a234:	6878      	ldr	r0, [r7, #4]
 802a236:	f001 f9cb 	bl	802b5d0 <USBD_LL_IsStallEP>
 802a23a:	4603      	mov	r3, r0
 802a23c:	2b00      	cmp	r3, #0
 802a23e:	d003      	beq.n	802a248 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 802a240:	68bb      	ldr	r3, [r7, #8]
 802a242:	2201      	movs	r2, #1
 802a244:	601a      	str	r2, [r3, #0]
 802a246:	e002      	b.n	802a24e <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 802a248:	68bb      	ldr	r3, [r7, #8]
 802a24a:	2200      	movs	r2, #0
 802a24c:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 802a24e:	68bb      	ldr	r3, [r7, #8]
 802a250:	2202      	movs	r2, #2
 802a252:	4619      	mov	r1, r3
 802a254:	6878      	ldr	r0, [r7, #4]
 802a256:	f000 fbfb 	bl	802aa50 <USBD_CtlSendData>
              break;
 802a25a:	e004      	b.n	802a266 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 802a25c:	6839      	ldr	r1, [r7, #0]
 802a25e:	6878      	ldr	r0, [r7, #4]
 802a260:	f000 fb85 	bl	802a96e <USBD_CtlError>
              break;
 802a264:	bf00      	nop
          }
          break;
 802a266:	e004      	b.n	802a272 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 802a268:	6839      	ldr	r1, [r7, #0]
 802a26a:	6878      	ldr	r0, [r7, #4]
 802a26c:	f000 fb7f 	bl	802a96e <USBD_CtlError>
          break;
 802a270:	bf00      	nop
      }
      break;
 802a272:	e005      	b.n	802a280 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 802a274:	6839      	ldr	r1, [r7, #0]
 802a276:	6878      	ldr	r0, [r7, #4]
 802a278:	f000 fb79 	bl	802a96e <USBD_CtlError>
      break;
 802a27c:	e000      	b.n	802a280 <USBD_StdEPReq+0x330>
      break;
 802a27e:	bf00      	nop
  }

  return ret;
 802a280:	7bfb      	ldrb	r3, [r7, #15]
}
 802a282:	4618      	mov	r0, r3
 802a284:	3710      	adds	r7, #16
 802a286:	46bd      	mov	sp, r7
 802a288:	bd80      	pop	{r7, pc}
	...

0802a28c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 802a28c:	b580      	push	{r7, lr}
 802a28e:	b084      	sub	sp, #16
 802a290:	af00      	add	r7, sp, #0
 802a292:	6078      	str	r0, [r7, #4]
 802a294:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 802a296:	2300      	movs	r3, #0
 802a298:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 802a29a:	2300      	movs	r3, #0
 802a29c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 802a29e:	2300      	movs	r3, #0
 802a2a0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 802a2a2:	683b      	ldr	r3, [r7, #0]
 802a2a4:	885b      	ldrh	r3, [r3, #2]
 802a2a6:	0a1b      	lsrs	r3, r3, #8
 802a2a8:	b29b      	uxth	r3, r3
 802a2aa:	3b01      	subs	r3, #1
 802a2ac:	2b0e      	cmp	r3, #14
 802a2ae:	f200 8152 	bhi.w	802a556 <USBD_GetDescriptor+0x2ca>
 802a2b2:	a201      	add	r2, pc, #4	; (adr r2, 802a2b8 <USBD_GetDescriptor+0x2c>)
 802a2b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802a2b8:	0802a329 	.word	0x0802a329
 802a2bc:	0802a341 	.word	0x0802a341
 802a2c0:	0802a381 	.word	0x0802a381
 802a2c4:	0802a557 	.word	0x0802a557
 802a2c8:	0802a557 	.word	0x0802a557
 802a2cc:	0802a4f7 	.word	0x0802a4f7
 802a2d0:	0802a523 	.word	0x0802a523
 802a2d4:	0802a557 	.word	0x0802a557
 802a2d8:	0802a557 	.word	0x0802a557
 802a2dc:	0802a557 	.word	0x0802a557
 802a2e0:	0802a557 	.word	0x0802a557
 802a2e4:	0802a557 	.word	0x0802a557
 802a2e8:	0802a557 	.word	0x0802a557
 802a2ec:	0802a557 	.word	0x0802a557
 802a2f0:	0802a2f5 	.word	0x0802a2f5
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 802a2f4:	687b      	ldr	r3, [r7, #4]
 802a2f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 802a2fa:	69db      	ldr	r3, [r3, #28]
 802a2fc:	2b00      	cmp	r3, #0
 802a2fe:	d00b      	beq.n	802a318 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 802a300:	687b      	ldr	r3, [r7, #4]
 802a302:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 802a306:	69db      	ldr	r3, [r3, #28]
 802a308:	687a      	ldr	r2, [r7, #4]
 802a30a:	7c12      	ldrb	r2, [r2, #16]
 802a30c:	f107 0108 	add.w	r1, r7, #8
 802a310:	4610      	mov	r0, r2
 802a312:	4798      	blx	r3
 802a314:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 802a316:	e126      	b.n	802a566 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 802a318:	6839      	ldr	r1, [r7, #0]
 802a31a:	6878      	ldr	r0, [r7, #4]
 802a31c:	f000 fb27 	bl	802a96e <USBD_CtlError>
        err++;
 802a320:	7afb      	ldrb	r3, [r7, #11]
 802a322:	3301      	adds	r3, #1
 802a324:	72fb      	strb	r3, [r7, #11]
      break;
 802a326:	e11e      	b.n	802a566 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 802a328:	687b      	ldr	r3, [r7, #4]
 802a32a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 802a32e:	681b      	ldr	r3, [r3, #0]
 802a330:	687a      	ldr	r2, [r7, #4]
 802a332:	7c12      	ldrb	r2, [r2, #16]
 802a334:	f107 0108 	add.w	r1, r7, #8
 802a338:	4610      	mov	r0, r2
 802a33a:	4798      	blx	r3
 802a33c:	60f8      	str	r0, [r7, #12]
      break;
 802a33e:	e112      	b.n	802a566 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 802a340:	687b      	ldr	r3, [r7, #4]
 802a342:	7c1b      	ldrb	r3, [r3, #16]
 802a344:	2b00      	cmp	r3, #0
 802a346:	d10d      	bne.n	802a364 <USBD_GetDescriptor+0xd8>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 802a348:	687b      	ldr	r3, [r7, #4]
 802a34a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 802a34e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802a350:	f107 0208 	add.w	r2, r7, #8
 802a354:	4610      	mov	r0, r2
 802a356:	4798      	blx	r3
 802a358:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 802a35a:	68fb      	ldr	r3, [r7, #12]
 802a35c:	3301      	adds	r3, #1
 802a35e:	2202      	movs	r2, #2
 802a360:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 802a362:	e100      	b.n	802a566 <USBD_GetDescriptor+0x2da>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 802a364:	687b      	ldr	r3, [r7, #4]
 802a366:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 802a36a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802a36c:	f107 0208 	add.w	r2, r7, #8
 802a370:	4610      	mov	r0, r2
 802a372:	4798      	blx	r3
 802a374:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 802a376:	68fb      	ldr	r3, [r7, #12]
 802a378:	3301      	adds	r3, #1
 802a37a:	2202      	movs	r2, #2
 802a37c:	701a      	strb	r2, [r3, #0]
      break;
 802a37e:	e0f2      	b.n	802a566 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 802a380:	683b      	ldr	r3, [r7, #0]
 802a382:	885b      	ldrh	r3, [r3, #2]
 802a384:	b2db      	uxtb	r3, r3
 802a386:	2b05      	cmp	r3, #5
 802a388:	f200 80ac 	bhi.w	802a4e4 <USBD_GetDescriptor+0x258>
 802a38c:	a201      	add	r2, pc, #4	; (adr r2, 802a394 <USBD_GetDescriptor+0x108>)
 802a38e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802a392:	bf00      	nop
 802a394:	0802a3ad 	.word	0x0802a3ad
 802a398:	0802a3e1 	.word	0x0802a3e1
 802a39c:	0802a415 	.word	0x0802a415
 802a3a0:	0802a449 	.word	0x0802a449
 802a3a4:	0802a47d 	.word	0x0802a47d
 802a3a8:	0802a4b1 	.word	0x0802a4b1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 802a3ac:	687b      	ldr	r3, [r7, #4]
 802a3ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 802a3b2:	685b      	ldr	r3, [r3, #4]
 802a3b4:	2b00      	cmp	r3, #0
 802a3b6:	d00b      	beq.n	802a3d0 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 802a3b8:	687b      	ldr	r3, [r7, #4]
 802a3ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 802a3be:	685b      	ldr	r3, [r3, #4]
 802a3c0:	687a      	ldr	r2, [r7, #4]
 802a3c2:	7c12      	ldrb	r2, [r2, #16]
 802a3c4:	f107 0108 	add.w	r1, r7, #8
 802a3c8:	4610      	mov	r0, r2
 802a3ca:	4798      	blx	r3
 802a3cc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 802a3ce:	e091      	b.n	802a4f4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 802a3d0:	6839      	ldr	r1, [r7, #0]
 802a3d2:	6878      	ldr	r0, [r7, #4]
 802a3d4:	f000 facb 	bl	802a96e <USBD_CtlError>
            err++;
 802a3d8:	7afb      	ldrb	r3, [r7, #11]
 802a3da:	3301      	adds	r3, #1
 802a3dc:	72fb      	strb	r3, [r7, #11]
          break;
 802a3de:	e089      	b.n	802a4f4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 802a3e0:	687b      	ldr	r3, [r7, #4]
 802a3e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 802a3e6:	689b      	ldr	r3, [r3, #8]
 802a3e8:	2b00      	cmp	r3, #0
 802a3ea:	d00b      	beq.n	802a404 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 802a3ec:	687b      	ldr	r3, [r7, #4]
 802a3ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 802a3f2:	689b      	ldr	r3, [r3, #8]
 802a3f4:	687a      	ldr	r2, [r7, #4]
 802a3f6:	7c12      	ldrb	r2, [r2, #16]
 802a3f8:	f107 0108 	add.w	r1, r7, #8
 802a3fc:	4610      	mov	r0, r2
 802a3fe:	4798      	blx	r3
 802a400:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 802a402:	e077      	b.n	802a4f4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 802a404:	6839      	ldr	r1, [r7, #0]
 802a406:	6878      	ldr	r0, [r7, #4]
 802a408:	f000 fab1 	bl	802a96e <USBD_CtlError>
            err++;
 802a40c:	7afb      	ldrb	r3, [r7, #11]
 802a40e:	3301      	adds	r3, #1
 802a410:	72fb      	strb	r3, [r7, #11]
          break;
 802a412:	e06f      	b.n	802a4f4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 802a414:	687b      	ldr	r3, [r7, #4]
 802a416:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 802a41a:	68db      	ldr	r3, [r3, #12]
 802a41c:	2b00      	cmp	r3, #0
 802a41e:	d00b      	beq.n	802a438 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 802a420:	687b      	ldr	r3, [r7, #4]
 802a422:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 802a426:	68db      	ldr	r3, [r3, #12]
 802a428:	687a      	ldr	r2, [r7, #4]
 802a42a:	7c12      	ldrb	r2, [r2, #16]
 802a42c:	f107 0108 	add.w	r1, r7, #8
 802a430:	4610      	mov	r0, r2
 802a432:	4798      	blx	r3
 802a434:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 802a436:	e05d      	b.n	802a4f4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 802a438:	6839      	ldr	r1, [r7, #0]
 802a43a:	6878      	ldr	r0, [r7, #4]
 802a43c:	f000 fa97 	bl	802a96e <USBD_CtlError>
            err++;
 802a440:	7afb      	ldrb	r3, [r7, #11]
 802a442:	3301      	adds	r3, #1
 802a444:	72fb      	strb	r3, [r7, #11]
          break;
 802a446:	e055      	b.n	802a4f4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 802a448:	687b      	ldr	r3, [r7, #4]
 802a44a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 802a44e:	691b      	ldr	r3, [r3, #16]
 802a450:	2b00      	cmp	r3, #0
 802a452:	d00b      	beq.n	802a46c <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 802a454:	687b      	ldr	r3, [r7, #4]
 802a456:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 802a45a:	691b      	ldr	r3, [r3, #16]
 802a45c:	687a      	ldr	r2, [r7, #4]
 802a45e:	7c12      	ldrb	r2, [r2, #16]
 802a460:	f107 0108 	add.w	r1, r7, #8
 802a464:	4610      	mov	r0, r2
 802a466:	4798      	blx	r3
 802a468:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 802a46a:	e043      	b.n	802a4f4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 802a46c:	6839      	ldr	r1, [r7, #0]
 802a46e:	6878      	ldr	r0, [r7, #4]
 802a470:	f000 fa7d 	bl	802a96e <USBD_CtlError>
            err++;
 802a474:	7afb      	ldrb	r3, [r7, #11]
 802a476:	3301      	adds	r3, #1
 802a478:	72fb      	strb	r3, [r7, #11]
          break;
 802a47a:	e03b      	b.n	802a4f4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 802a47c:	687b      	ldr	r3, [r7, #4]
 802a47e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 802a482:	695b      	ldr	r3, [r3, #20]
 802a484:	2b00      	cmp	r3, #0
 802a486:	d00b      	beq.n	802a4a0 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 802a488:	687b      	ldr	r3, [r7, #4]
 802a48a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 802a48e:	695b      	ldr	r3, [r3, #20]
 802a490:	687a      	ldr	r2, [r7, #4]
 802a492:	7c12      	ldrb	r2, [r2, #16]
 802a494:	f107 0108 	add.w	r1, r7, #8
 802a498:	4610      	mov	r0, r2
 802a49a:	4798      	blx	r3
 802a49c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 802a49e:	e029      	b.n	802a4f4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 802a4a0:	6839      	ldr	r1, [r7, #0]
 802a4a2:	6878      	ldr	r0, [r7, #4]
 802a4a4:	f000 fa63 	bl	802a96e <USBD_CtlError>
            err++;
 802a4a8:	7afb      	ldrb	r3, [r7, #11]
 802a4aa:	3301      	adds	r3, #1
 802a4ac:	72fb      	strb	r3, [r7, #11]
          break;
 802a4ae:	e021      	b.n	802a4f4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 802a4b0:	687b      	ldr	r3, [r7, #4]
 802a4b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 802a4b6:	699b      	ldr	r3, [r3, #24]
 802a4b8:	2b00      	cmp	r3, #0
 802a4ba:	d00b      	beq.n	802a4d4 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 802a4bc:	687b      	ldr	r3, [r7, #4]
 802a4be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 802a4c2:	699b      	ldr	r3, [r3, #24]
 802a4c4:	687a      	ldr	r2, [r7, #4]
 802a4c6:	7c12      	ldrb	r2, [r2, #16]
 802a4c8:	f107 0108 	add.w	r1, r7, #8
 802a4cc:	4610      	mov	r0, r2
 802a4ce:	4798      	blx	r3
 802a4d0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 802a4d2:	e00f      	b.n	802a4f4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 802a4d4:	6839      	ldr	r1, [r7, #0]
 802a4d6:	6878      	ldr	r0, [r7, #4]
 802a4d8:	f000 fa49 	bl	802a96e <USBD_CtlError>
            err++;
 802a4dc:	7afb      	ldrb	r3, [r7, #11]
 802a4de:	3301      	adds	r3, #1
 802a4e0:	72fb      	strb	r3, [r7, #11]
          break;
 802a4e2:	e007      	b.n	802a4f4 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 802a4e4:	6839      	ldr	r1, [r7, #0]
 802a4e6:	6878      	ldr	r0, [r7, #4]
 802a4e8:	f000 fa41 	bl	802a96e <USBD_CtlError>
          err++;
 802a4ec:	7afb      	ldrb	r3, [r7, #11]
 802a4ee:	3301      	adds	r3, #1
 802a4f0:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 802a4f2:	bf00      	nop
      }
      break;
 802a4f4:	e037      	b.n	802a566 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 802a4f6:	687b      	ldr	r3, [r7, #4]
 802a4f8:	7c1b      	ldrb	r3, [r3, #16]
 802a4fa:	2b00      	cmp	r3, #0
 802a4fc:	d109      	bne.n	802a512 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 802a4fe:	687b      	ldr	r3, [r7, #4]
 802a500:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 802a504:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 802a506:	f107 0208 	add.w	r2, r7, #8
 802a50a:	4610      	mov	r0, r2
 802a50c:	4798      	blx	r3
 802a50e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 802a510:	e029      	b.n	802a566 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 802a512:	6839      	ldr	r1, [r7, #0]
 802a514:	6878      	ldr	r0, [r7, #4]
 802a516:	f000 fa2a 	bl	802a96e <USBD_CtlError>
        err++;
 802a51a:	7afb      	ldrb	r3, [r7, #11]
 802a51c:	3301      	adds	r3, #1
 802a51e:	72fb      	strb	r3, [r7, #11]
      break;
 802a520:	e021      	b.n	802a566 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 802a522:	687b      	ldr	r3, [r7, #4]
 802a524:	7c1b      	ldrb	r3, [r3, #16]
 802a526:	2b00      	cmp	r3, #0
 802a528:	d10d      	bne.n	802a546 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 802a52a:	687b      	ldr	r3, [r7, #4]
 802a52c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 802a530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802a532:	f107 0208 	add.w	r2, r7, #8
 802a536:	4610      	mov	r0, r2
 802a538:	4798      	blx	r3
 802a53a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 802a53c:	68fb      	ldr	r3, [r7, #12]
 802a53e:	3301      	adds	r3, #1
 802a540:	2207      	movs	r2, #7
 802a542:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 802a544:	e00f      	b.n	802a566 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 802a546:	6839      	ldr	r1, [r7, #0]
 802a548:	6878      	ldr	r0, [r7, #4]
 802a54a:	f000 fa10 	bl	802a96e <USBD_CtlError>
        err++;
 802a54e:	7afb      	ldrb	r3, [r7, #11]
 802a550:	3301      	adds	r3, #1
 802a552:	72fb      	strb	r3, [r7, #11]
      break;
 802a554:	e007      	b.n	802a566 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 802a556:	6839      	ldr	r1, [r7, #0]
 802a558:	6878      	ldr	r0, [r7, #4]
 802a55a:	f000 fa08 	bl	802a96e <USBD_CtlError>
      err++;
 802a55e:	7afb      	ldrb	r3, [r7, #11]
 802a560:	3301      	adds	r3, #1
 802a562:	72fb      	strb	r3, [r7, #11]
      break;
 802a564:	bf00      	nop
  }

  if (err != 0U)
 802a566:	7afb      	ldrb	r3, [r7, #11]
 802a568:	2b00      	cmp	r3, #0
 802a56a:	d11e      	bne.n	802a5aa <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 802a56c:	683b      	ldr	r3, [r7, #0]
 802a56e:	88db      	ldrh	r3, [r3, #6]
 802a570:	2b00      	cmp	r3, #0
 802a572:	d016      	beq.n	802a5a2 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 802a574:	893b      	ldrh	r3, [r7, #8]
 802a576:	2b00      	cmp	r3, #0
 802a578:	d00e      	beq.n	802a598 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 802a57a:	683b      	ldr	r3, [r7, #0]
 802a57c:	88da      	ldrh	r2, [r3, #6]
 802a57e:	893b      	ldrh	r3, [r7, #8]
 802a580:	4293      	cmp	r3, r2
 802a582:	bf28      	it	cs
 802a584:	4613      	movcs	r3, r2
 802a586:	b29b      	uxth	r3, r3
 802a588:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 802a58a:	893b      	ldrh	r3, [r7, #8]
 802a58c:	461a      	mov	r2, r3
 802a58e:	68f9      	ldr	r1, [r7, #12]
 802a590:	6878      	ldr	r0, [r7, #4]
 802a592:	f000 fa5d 	bl	802aa50 <USBD_CtlSendData>
 802a596:	e009      	b.n	802a5ac <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 802a598:	6839      	ldr	r1, [r7, #0]
 802a59a:	6878      	ldr	r0, [r7, #4]
 802a59c:	f000 f9e7 	bl	802a96e <USBD_CtlError>
 802a5a0:	e004      	b.n	802a5ac <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 802a5a2:	6878      	ldr	r0, [r7, #4]
 802a5a4:	f000 faae 	bl	802ab04 <USBD_CtlSendStatus>
 802a5a8:	e000      	b.n	802a5ac <USBD_GetDescriptor+0x320>
    return;
 802a5aa:	bf00      	nop
  }
}
 802a5ac:	3710      	adds	r7, #16
 802a5ae:	46bd      	mov	sp, r7
 802a5b0:	bd80      	pop	{r7, pc}
 802a5b2:	bf00      	nop

0802a5b4 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 802a5b4:	b580      	push	{r7, lr}
 802a5b6:	b084      	sub	sp, #16
 802a5b8:	af00      	add	r7, sp, #0
 802a5ba:	6078      	str	r0, [r7, #4]
 802a5bc:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 802a5be:	683b      	ldr	r3, [r7, #0]
 802a5c0:	889b      	ldrh	r3, [r3, #4]
 802a5c2:	2b00      	cmp	r3, #0
 802a5c4:	d131      	bne.n	802a62a <USBD_SetAddress+0x76>
 802a5c6:	683b      	ldr	r3, [r7, #0]
 802a5c8:	88db      	ldrh	r3, [r3, #6]
 802a5ca:	2b00      	cmp	r3, #0
 802a5cc:	d12d      	bne.n	802a62a <USBD_SetAddress+0x76>
 802a5ce:	683b      	ldr	r3, [r7, #0]
 802a5d0:	885b      	ldrh	r3, [r3, #2]
 802a5d2:	2b7f      	cmp	r3, #127	; 0x7f
 802a5d4:	d829      	bhi.n	802a62a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 802a5d6:	683b      	ldr	r3, [r7, #0]
 802a5d8:	885b      	ldrh	r3, [r3, #2]
 802a5da:	b2db      	uxtb	r3, r3
 802a5dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 802a5e0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 802a5e2:	687b      	ldr	r3, [r7, #4]
 802a5e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 802a5e8:	b2db      	uxtb	r3, r3
 802a5ea:	2b03      	cmp	r3, #3
 802a5ec:	d104      	bne.n	802a5f8 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 802a5ee:	6839      	ldr	r1, [r7, #0]
 802a5f0:	6878      	ldr	r0, [r7, #4]
 802a5f2:	f000 f9bc 	bl	802a96e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 802a5f6:	e01d      	b.n	802a634 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 802a5f8:	687b      	ldr	r3, [r7, #4]
 802a5fa:	7bfa      	ldrb	r2, [r7, #15]
 802a5fc:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 802a600:	7bfb      	ldrb	r3, [r7, #15]
 802a602:	4619      	mov	r1, r3
 802a604:	6878      	ldr	r0, [r7, #4]
 802a606:	f001 f80f 	bl	802b628 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 802a60a:	6878      	ldr	r0, [r7, #4]
 802a60c:	f000 fa7a 	bl	802ab04 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 802a610:	7bfb      	ldrb	r3, [r7, #15]
 802a612:	2b00      	cmp	r3, #0
 802a614:	d004      	beq.n	802a620 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 802a616:	687b      	ldr	r3, [r7, #4]
 802a618:	2202      	movs	r2, #2
 802a61a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 802a61e:	e009      	b.n	802a634 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 802a620:	687b      	ldr	r3, [r7, #4]
 802a622:	2201      	movs	r2, #1
 802a624:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 802a628:	e004      	b.n	802a634 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 802a62a:	6839      	ldr	r1, [r7, #0]
 802a62c:	6878      	ldr	r0, [r7, #4]
 802a62e:	f000 f99e 	bl	802a96e <USBD_CtlError>
  }
}
 802a632:	bf00      	nop
 802a634:	bf00      	nop
 802a636:	3710      	adds	r7, #16
 802a638:	46bd      	mov	sp, r7
 802a63a:	bd80      	pop	{r7, pc}

0802a63c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 802a63c:	b580      	push	{r7, lr}
 802a63e:	b084      	sub	sp, #16
 802a640:	af00      	add	r7, sp, #0
 802a642:	6078      	str	r0, [r7, #4]
 802a644:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 802a646:	2300      	movs	r3, #0
 802a648:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 802a64a:	683b      	ldr	r3, [r7, #0]
 802a64c:	885b      	ldrh	r3, [r3, #2]
 802a64e:	b2da      	uxtb	r2, r3
 802a650:	4b4e      	ldr	r3, [pc, #312]	; (802a78c <USBD_SetConfig+0x150>)
 802a652:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 802a654:	4b4d      	ldr	r3, [pc, #308]	; (802a78c <USBD_SetConfig+0x150>)
 802a656:	781b      	ldrb	r3, [r3, #0]
 802a658:	2b01      	cmp	r3, #1
 802a65a:	d905      	bls.n	802a668 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 802a65c:	6839      	ldr	r1, [r7, #0]
 802a65e:	6878      	ldr	r0, [r7, #4]
 802a660:	f000 f985 	bl	802a96e <USBD_CtlError>
    return USBD_FAIL;
 802a664:	2303      	movs	r3, #3
 802a666:	e08c      	b.n	802a782 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 802a668:	687b      	ldr	r3, [r7, #4]
 802a66a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 802a66e:	b2db      	uxtb	r3, r3
 802a670:	2b02      	cmp	r3, #2
 802a672:	d002      	beq.n	802a67a <USBD_SetConfig+0x3e>
 802a674:	2b03      	cmp	r3, #3
 802a676:	d029      	beq.n	802a6cc <USBD_SetConfig+0x90>
 802a678:	e075      	b.n	802a766 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 802a67a:	4b44      	ldr	r3, [pc, #272]	; (802a78c <USBD_SetConfig+0x150>)
 802a67c:	781b      	ldrb	r3, [r3, #0]
 802a67e:	2b00      	cmp	r3, #0
 802a680:	d020      	beq.n	802a6c4 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 802a682:	4b42      	ldr	r3, [pc, #264]	; (802a78c <USBD_SetConfig+0x150>)
 802a684:	781b      	ldrb	r3, [r3, #0]
 802a686:	461a      	mov	r2, r3
 802a688:	687b      	ldr	r3, [r7, #4]
 802a68a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 802a68c:	4b3f      	ldr	r3, [pc, #252]	; (802a78c <USBD_SetConfig+0x150>)
 802a68e:	781b      	ldrb	r3, [r3, #0]
 802a690:	4619      	mov	r1, r3
 802a692:	6878      	ldr	r0, [r7, #4]
 802a694:	f7fe ffbc 	bl	8029610 <USBD_SetClassConfig>
 802a698:	4603      	mov	r3, r0
 802a69a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 802a69c:	7bfb      	ldrb	r3, [r7, #15]
 802a69e:	2b00      	cmp	r3, #0
 802a6a0:	d008      	beq.n	802a6b4 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 802a6a2:	6839      	ldr	r1, [r7, #0]
 802a6a4:	6878      	ldr	r0, [r7, #4]
 802a6a6:	f000 f962 	bl	802a96e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 802a6aa:	687b      	ldr	r3, [r7, #4]
 802a6ac:	2202      	movs	r2, #2
 802a6ae:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 802a6b2:	e065      	b.n	802a780 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 802a6b4:	6878      	ldr	r0, [r7, #4]
 802a6b6:	f000 fa25 	bl	802ab04 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 802a6ba:	687b      	ldr	r3, [r7, #4]
 802a6bc:	2203      	movs	r2, #3
 802a6be:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 802a6c2:	e05d      	b.n	802a780 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 802a6c4:	6878      	ldr	r0, [r7, #4]
 802a6c6:	f000 fa1d 	bl	802ab04 <USBD_CtlSendStatus>
      break;
 802a6ca:	e059      	b.n	802a780 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 802a6cc:	4b2f      	ldr	r3, [pc, #188]	; (802a78c <USBD_SetConfig+0x150>)
 802a6ce:	781b      	ldrb	r3, [r3, #0]
 802a6d0:	2b00      	cmp	r3, #0
 802a6d2:	d112      	bne.n	802a6fa <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 802a6d4:	687b      	ldr	r3, [r7, #4]
 802a6d6:	2202      	movs	r2, #2
 802a6d8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 802a6dc:	4b2b      	ldr	r3, [pc, #172]	; (802a78c <USBD_SetConfig+0x150>)
 802a6de:	781b      	ldrb	r3, [r3, #0]
 802a6e0:	461a      	mov	r2, r3
 802a6e2:	687b      	ldr	r3, [r7, #4]
 802a6e4:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 802a6e6:	4b29      	ldr	r3, [pc, #164]	; (802a78c <USBD_SetConfig+0x150>)
 802a6e8:	781b      	ldrb	r3, [r3, #0]
 802a6ea:	4619      	mov	r1, r3
 802a6ec:	6878      	ldr	r0, [r7, #4]
 802a6ee:	f7fe ffab 	bl	8029648 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 802a6f2:	6878      	ldr	r0, [r7, #4]
 802a6f4:	f000 fa06 	bl	802ab04 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 802a6f8:	e042      	b.n	802a780 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 802a6fa:	4b24      	ldr	r3, [pc, #144]	; (802a78c <USBD_SetConfig+0x150>)
 802a6fc:	781b      	ldrb	r3, [r3, #0]
 802a6fe:	461a      	mov	r2, r3
 802a700:	687b      	ldr	r3, [r7, #4]
 802a702:	685b      	ldr	r3, [r3, #4]
 802a704:	429a      	cmp	r2, r3
 802a706:	d02a      	beq.n	802a75e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 802a708:	687b      	ldr	r3, [r7, #4]
 802a70a:	685b      	ldr	r3, [r3, #4]
 802a70c:	b2db      	uxtb	r3, r3
 802a70e:	4619      	mov	r1, r3
 802a710:	6878      	ldr	r0, [r7, #4]
 802a712:	f7fe ff99 	bl	8029648 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 802a716:	4b1d      	ldr	r3, [pc, #116]	; (802a78c <USBD_SetConfig+0x150>)
 802a718:	781b      	ldrb	r3, [r3, #0]
 802a71a:	461a      	mov	r2, r3
 802a71c:	687b      	ldr	r3, [r7, #4]
 802a71e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 802a720:	4b1a      	ldr	r3, [pc, #104]	; (802a78c <USBD_SetConfig+0x150>)
 802a722:	781b      	ldrb	r3, [r3, #0]
 802a724:	4619      	mov	r1, r3
 802a726:	6878      	ldr	r0, [r7, #4]
 802a728:	f7fe ff72 	bl	8029610 <USBD_SetClassConfig>
 802a72c:	4603      	mov	r3, r0
 802a72e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 802a730:	7bfb      	ldrb	r3, [r7, #15]
 802a732:	2b00      	cmp	r3, #0
 802a734:	d00f      	beq.n	802a756 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 802a736:	6839      	ldr	r1, [r7, #0]
 802a738:	6878      	ldr	r0, [r7, #4]
 802a73a:	f000 f918 	bl	802a96e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 802a73e:	687b      	ldr	r3, [r7, #4]
 802a740:	685b      	ldr	r3, [r3, #4]
 802a742:	b2db      	uxtb	r3, r3
 802a744:	4619      	mov	r1, r3
 802a746:	6878      	ldr	r0, [r7, #4]
 802a748:	f7fe ff7e 	bl	8029648 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 802a74c:	687b      	ldr	r3, [r7, #4]
 802a74e:	2202      	movs	r2, #2
 802a750:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 802a754:	e014      	b.n	802a780 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 802a756:	6878      	ldr	r0, [r7, #4]
 802a758:	f000 f9d4 	bl	802ab04 <USBD_CtlSendStatus>
      break;
 802a75c:	e010      	b.n	802a780 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 802a75e:	6878      	ldr	r0, [r7, #4]
 802a760:	f000 f9d0 	bl	802ab04 <USBD_CtlSendStatus>
      break;
 802a764:	e00c      	b.n	802a780 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 802a766:	6839      	ldr	r1, [r7, #0]
 802a768:	6878      	ldr	r0, [r7, #4]
 802a76a:	f000 f900 	bl	802a96e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 802a76e:	4b07      	ldr	r3, [pc, #28]	; (802a78c <USBD_SetConfig+0x150>)
 802a770:	781b      	ldrb	r3, [r3, #0]
 802a772:	4619      	mov	r1, r3
 802a774:	6878      	ldr	r0, [r7, #4]
 802a776:	f7fe ff67 	bl	8029648 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 802a77a:	2303      	movs	r3, #3
 802a77c:	73fb      	strb	r3, [r7, #15]
      break;
 802a77e:	bf00      	nop
  }

  return ret;
 802a780:	7bfb      	ldrb	r3, [r7, #15]
}
 802a782:	4618      	mov	r0, r3
 802a784:	3710      	adds	r7, #16
 802a786:	46bd      	mov	sp, r7
 802a788:	bd80      	pop	{r7, pc}
 802a78a:	bf00      	nop
 802a78c:	2000ba7c 	.word	0x2000ba7c

0802a790 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 802a790:	b580      	push	{r7, lr}
 802a792:	b082      	sub	sp, #8
 802a794:	af00      	add	r7, sp, #0
 802a796:	6078      	str	r0, [r7, #4]
 802a798:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 802a79a:	683b      	ldr	r3, [r7, #0]
 802a79c:	88db      	ldrh	r3, [r3, #6]
 802a79e:	2b01      	cmp	r3, #1
 802a7a0:	d004      	beq.n	802a7ac <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 802a7a2:	6839      	ldr	r1, [r7, #0]
 802a7a4:	6878      	ldr	r0, [r7, #4]
 802a7a6:	f000 f8e2 	bl	802a96e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 802a7aa:	e023      	b.n	802a7f4 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 802a7ac:	687b      	ldr	r3, [r7, #4]
 802a7ae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 802a7b2:	b2db      	uxtb	r3, r3
 802a7b4:	2b02      	cmp	r3, #2
 802a7b6:	dc02      	bgt.n	802a7be <USBD_GetConfig+0x2e>
 802a7b8:	2b00      	cmp	r3, #0
 802a7ba:	dc03      	bgt.n	802a7c4 <USBD_GetConfig+0x34>
 802a7bc:	e015      	b.n	802a7ea <USBD_GetConfig+0x5a>
 802a7be:	2b03      	cmp	r3, #3
 802a7c0:	d00b      	beq.n	802a7da <USBD_GetConfig+0x4a>
 802a7c2:	e012      	b.n	802a7ea <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 802a7c4:	687b      	ldr	r3, [r7, #4]
 802a7c6:	2200      	movs	r2, #0
 802a7c8:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 802a7ca:	687b      	ldr	r3, [r7, #4]
 802a7cc:	3308      	adds	r3, #8
 802a7ce:	2201      	movs	r2, #1
 802a7d0:	4619      	mov	r1, r3
 802a7d2:	6878      	ldr	r0, [r7, #4]
 802a7d4:	f000 f93c 	bl	802aa50 <USBD_CtlSendData>
        break;
 802a7d8:	e00c      	b.n	802a7f4 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 802a7da:	687b      	ldr	r3, [r7, #4]
 802a7dc:	3304      	adds	r3, #4
 802a7de:	2201      	movs	r2, #1
 802a7e0:	4619      	mov	r1, r3
 802a7e2:	6878      	ldr	r0, [r7, #4]
 802a7e4:	f000 f934 	bl	802aa50 <USBD_CtlSendData>
        break;
 802a7e8:	e004      	b.n	802a7f4 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 802a7ea:	6839      	ldr	r1, [r7, #0]
 802a7ec:	6878      	ldr	r0, [r7, #4]
 802a7ee:	f000 f8be 	bl	802a96e <USBD_CtlError>
        break;
 802a7f2:	bf00      	nop
}
 802a7f4:	bf00      	nop
 802a7f6:	3708      	adds	r7, #8
 802a7f8:	46bd      	mov	sp, r7
 802a7fa:	bd80      	pop	{r7, pc}

0802a7fc <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 802a7fc:	b580      	push	{r7, lr}
 802a7fe:	b082      	sub	sp, #8
 802a800:	af00      	add	r7, sp, #0
 802a802:	6078      	str	r0, [r7, #4]
 802a804:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 802a806:	687b      	ldr	r3, [r7, #4]
 802a808:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 802a80c:	b2db      	uxtb	r3, r3
 802a80e:	3b01      	subs	r3, #1
 802a810:	2b02      	cmp	r3, #2
 802a812:	d81e      	bhi.n	802a852 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 802a814:	683b      	ldr	r3, [r7, #0]
 802a816:	88db      	ldrh	r3, [r3, #6]
 802a818:	2b02      	cmp	r3, #2
 802a81a:	d004      	beq.n	802a826 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 802a81c:	6839      	ldr	r1, [r7, #0]
 802a81e:	6878      	ldr	r0, [r7, #4]
 802a820:	f000 f8a5 	bl	802a96e <USBD_CtlError>
        break;
 802a824:	e01a      	b.n	802a85c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 802a826:	687b      	ldr	r3, [r7, #4]
 802a828:	2201      	movs	r2, #1
 802a82a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 802a82c:	687b      	ldr	r3, [r7, #4]
 802a82e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 802a832:	2b00      	cmp	r3, #0
 802a834:	d005      	beq.n	802a842 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 802a836:	687b      	ldr	r3, [r7, #4]
 802a838:	68db      	ldr	r3, [r3, #12]
 802a83a:	f043 0202 	orr.w	r2, r3, #2
 802a83e:	687b      	ldr	r3, [r7, #4]
 802a840:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 802a842:	687b      	ldr	r3, [r7, #4]
 802a844:	330c      	adds	r3, #12
 802a846:	2202      	movs	r2, #2
 802a848:	4619      	mov	r1, r3
 802a84a:	6878      	ldr	r0, [r7, #4]
 802a84c:	f000 f900 	bl	802aa50 <USBD_CtlSendData>
      break;
 802a850:	e004      	b.n	802a85c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 802a852:	6839      	ldr	r1, [r7, #0]
 802a854:	6878      	ldr	r0, [r7, #4]
 802a856:	f000 f88a 	bl	802a96e <USBD_CtlError>
      break;
 802a85a:	bf00      	nop
  }
}
 802a85c:	bf00      	nop
 802a85e:	3708      	adds	r7, #8
 802a860:	46bd      	mov	sp, r7
 802a862:	bd80      	pop	{r7, pc}

0802a864 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 802a864:	b580      	push	{r7, lr}
 802a866:	b082      	sub	sp, #8
 802a868:	af00      	add	r7, sp, #0
 802a86a:	6078      	str	r0, [r7, #4]
 802a86c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 802a86e:	683b      	ldr	r3, [r7, #0]
 802a870:	885b      	ldrh	r3, [r3, #2]
 802a872:	2b01      	cmp	r3, #1
 802a874:	d107      	bne.n	802a886 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 802a876:	687b      	ldr	r3, [r7, #4]
 802a878:	2201      	movs	r2, #1
 802a87a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 802a87e:	6878      	ldr	r0, [r7, #4]
 802a880:	f000 f940 	bl	802ab04 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 802a884:	e013      	b.n	802a8ae <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 802a886:	683b      	ldr	r3, [r7, #0]
 802a888:	885b      	ldrh	r3, [r3, #2]
 802a88a:	2b02      	cmp	r3, #2
 802a88c:	d10b      	bne.n	802a8a6 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 802a88e:	683b      	ldr	r3, [r7, #0]
 802a890:	889b      	ldrh	r3, [r3, #4]
 802a892:	0a1b      	lsrs	r3, r3, #8
 802a894:	b29b      	uxth	r3, r3
 802a896:	b2da      	uxtb	r2, r3
 802a898:	687b      	ldr	r3, [r7, #4]
 802a89a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 802a89e:	6878      	ldr	r0, [r7, #4]
 802a8a0:	f000 f930 	bl	802ab04 <USBD_CtlSendStatus>
}
 802a8a4:	e003      	b.n	802a8ae <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 802a8a6:	6839      	ldr	r1, [r7, #0]
 802a8a8:	6878      	ldr	r0, [r7, #4]
 802a8aa:	f000 f860 	bl	802a96e <USBD_CtlError>
}
 802a8ae:	bf00      	nop
 802a8b0:	3708      	adds	r7, #8
 802a8b2:	46bd      	mov	sp, r7
 802a8b4:	bd80      	pop	{r7, pc}

0802a8b6 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 802a8b6:	b580      	push	{r7, lr}
 802a8b8:	b082      	sub	sp, #8
 802a8ba:	af00      	add	r7, sp, #0
 802a8bc:	6078      	str	r0, [r7, #4]
 802a8be:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 802a8c0:	687b      	ldr	r3, [r7, #4]
 802a8c2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 802a8c6:	b2db      	uxtb	r3, r3
 802a8c8:	3b01      	subs	r3, #1
 802a8ca:	2b02      	cmp	r3, #2
 802a8cc:	d80b      	bhi.n	802a8e6 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 802a8ce:	683b      	ldr	r3, [r7, #0]
 802a8d0:	885b      	ldrh	r3, [r3, #2]
 802a8d2:	2b01      	cmp	r3, #1
 802a8d4:	d10c      	bne.n	802a8f0 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 802a8d6:	687b      	ldr	r3, [r7, #4]
 802a8d8:	2200      	movs	r2, #0
 802a8da:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 802a8de:	6878      	ldr	r0, [r7, #4]
 802a8e0:	f000 f910 	bl	802ab04 <USBD_CtlSendStatus>
      }
      break;
 802a8e4:	e004      	b.n	802a8f0 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 802a8e6:	6839      	ldr	r1, [r7, #0]
 802a8e8:	6878      	ldr	r0, [r7, #4]
 802a8ea:	f000 f840 	bl	802a96e <USBD_CtlError>
      break;
 802a8ee:	e000      	b.n	802a8f2 <USBD_ClrFeature+0x3c>
      break;
 802a8f0:	bf00      	nop
  }
}
 802a8f2:	bf00      	nop
 802a8f4:	3708      	adds	r7, #8
 802a8f6:	46bd      	mov	sp, r7
 802a8f8:	bd80      	pop	{r7, pc}

0802a8fa <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 802a8fa:	b580      	push	{r7, lr}
 802a8fc:	b084      	sub	sp, #16
 802a8fe:	af00      	add	r7, sp, #0
 802a900:	6078      	str	r0, [r7, #4]
 802a902:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 802a904:	683b      	ldr	r3, [r7, #0]
 802a906:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 802a908:	68fb      	ldr	r3, [r7, #12]
 802a90a:	781a      	ldrb	r2, [r3, #0]
 802a90c:	687b      	ldr	r3, [r7, #4]
 802a90e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 802a910:	68fb      	ldr	r3, [r7, #12]
 802a912:	3301      	adds	r3, #1
 802a914:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 802a916:	68fb      	ldr	r3, [r7, #12]
 802a918:	781a      	ldrb	r2, [r3, #0]
 802a91a:	687b      	ldr	r3, [r7, #4]
 802a91c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 802a91e:	68fb      	ldr	r3, [r7, #12]
 802a920:	3301      	adds	r3, #1
 802a922:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 802a924:	68f8      	ldr	r0, [r7, #12]
 802a926:	f7ff fa16 	bl	8029d56 <SWAPBYTE>
 802a92a:	4603      	mov	r3, r0
 802a92c:	461a      	mov	r2, r3
 802a92e:	687b      	ldr	r3, [r7, #4]
 802a930:	805a      	strh	r2, [r3, #2]

  pbuff++;
 802a932:	68fb      	ldr	r3, [r7, #12]
 802a934:	3301      	adds	r3, #1
 802a936:	60fb      	str	r3, [r7, #12]
  pbuff++;
 802a938:	68fb      	ldr	r3, [r7, #12]
 802a93a:	3301      	adds	r3, #1
 802a93c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 802a93e:	68f8      	ldr	r0, [r7, #12]
 802a940:	f7ff fa09 	bl	8029d56 <SWAPBYTE>
 802a944:	4603      	mov	r3, r0
 802a946:	461a      	mov	r2, r3
 802a948:	687b      	ldr	r3, [r7, #4]
 802a94a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 802a94c:	68fb      	ldr	r3, [r7, #12]
 802a94e:	3301      	adds	r3, #1
 802a950:	60fb      	str	r3, [r7, #12]
  pbuff++;
 802a952:	68fb      	ldr	r3, [r7, #12]
 802a954:	3301      	adds	r3, #1
 802a956:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 802a958:	68f8      	ldr	r0, [r7, #12]
 802a95a:	f7ff f9fc 	bl	8029d56 <SWAPBYTE>
 802a95e:	4603      	mov	r3, r0
 802a960:	461a      	mov	r2, r3
 802a962:	687b      	ldr	r3, [r7, #4]
 802a964:	80da      	strh	r2, [r3, #6]
}
 802a966:	bf00      	nop
 802a968:	3710      	adds	r7, #16
 802a96a:	46bd      	mov	sp, r7
 802a96c:	bd80      	pop	{r7, pc}

0802a96e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 802a96e:	b580      	push	{r7, lr}
 802a970:	b082      	sub	sp, #8
 802a972:	af00      	add	r7, sp, #0
 802a974:	6078      	str	r0, [r7, #4]
 802a976:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 802a978:	2180      	movs	r1, #128	; 0x80
 802a97a:	6878      	ldr	r0, [r7, #4]
 802a97c:	f000 fdea 	bl	802b554 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 802a980:	2100      	movs	r1, #0
 802a982:	6878      	ldr	r0, [r7, #4]
 802a984:	f000 fde6 	bl	802b554 <USBD_LL_StallEP>
}
 802a988:	bf00      	nop
 802a98a:	3708      	adds	r7, #8
 802a98c:	46bd      	mov	sp, r7
 802a98e:	bd80      	pop	{r7, pc}

0802a990 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 802a990:	b580      	push	{r7, lr}
 802a992:	b086      	sub	sp, #24
 802a994:	af00      	add	r7, sp, #0
 802a996:	60f8      	str	r0, [r7, #12]
 802a998:	60b9      	str	r1, [r7, #8]
 802a99a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 802a99c:	2300      	movs	r3, #0
 802a99e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 802a9a0:	68fb      	ldr	r3, [r7, #12]
 802a9a2:	2b00      	cmp	r3, #0
 802a9a4:	d036      	beq.n	802aa14 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 802a9a6:	68fb      	ldr	r3, [r7, #12]
 802a9a8:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 802a9aa:	6938      	ldr	r0, [r7, #16]
 802a9ac:	f000 f836 	bl	802aa1c <USBD_GetLen>
 802a9b0:	4603      	mov	r3, r0
 802a9b2:	3301      	adds	r3, #1
 802a9b4:	b29b      	uxth	r3, r3
 802a9b6:	005b      	lsls	r3, r3, #1
 802a9b8:	b29a      	uxth	r2, r3
 802a9ba:	687b      	ldr	r3, [r7, #4]
 802a9bc:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 802a9be:	7dfb      	ldrb	r3, [r7, #23]
 802a9c0:	68ba      	ldr	r2, [r7, #8]
 802a9c2:	4413      	add	r3, r2
 802a9c4:	687a      	ldr	r2, [r7, #4]
 802a9c6:	7812      	ldrb	r2, [r2, #0]
 802a9c8:	701a      	strb	r2, [r3, #0]
  idx++;
 802a9ca:	7dfb      	ldrb	r3, [r7, #23]
 802a9cc:	3301      	adds	r3, #1
 802a9ce:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 802a9d0:	7dfb      	ldrb	r3, [r7, #23]
 802a9d2:	68ba      	ldr	r2, [r7, #8]
 802a9d4:	4413      	add	r3, r2
 802a9d6:	2203      	movs	r2, #3
 802a9d8:	701a      	strb	r2, [r3, #0]
  idx++;
 802a9da:	7dfb      	ldrb	r3, [r7, #23]
 802a9dc:	3301      	adds	r3, #1
 802a9de:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 802a9e0:	e013      	b.n	802aa0a <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 802a9e2:	7dfb      	ldrb	r3, [r7, #23]
 802a9e4:	68ba      	ldr	r2, [r7, #8]
 802a9e6:	4413      	add	r3, r2
 802a9e8:	693a      	ldr	r2, [r7, #16]
 802a9ea:	7812      	ldrb	r2, [r2, #0]
 802a9ec:	701a      	strb	r2, [r3, #0]
    pdesc++;
 802a9ee:	693b      	ldr	r3, [r7, #16]
 802a9f0:	3301      	adds	r3, #1
 802a9f2:	613b      	str	r3, [r7, #16]
    idx++;
 802a9f4:	7dfb      	ldrb	r3, [r7, #23]
 802a9f6:	3301      	adds	r3, #1
 802a9f8:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 802a9fa:	7dfb      	ldrb	r3, [r7, #23]
 802a9fc:	68ba      	ldr	r2, [r7, #8]
 802a9fe:	4413      	add	r3, r2
 802aa00:	2200      	movs	r2, #0
 802aa02:	701a      	strb	r2, [r3, #0]
    idx++;
 802aa04:	7dfb      	ldrb	r3, [r7, #23]
 802aa06:	3301      	adds	r3, #1
 802aa08:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 802aa0a:	693b      	ldr	r3, [r7, #16]
 802aa0c:	781b      	ldrb	r3, [r3, #0]
 802aa0e:	2b00      	cmp	r3, #0
 802aa10:	d1e7      	bne.n	802a9e2 <USBD_GetString+0x52>
 802aa12:	e000      	b.n	802aa16 <USBD_GetString+0x86>
    return;
 802aa14:	bf00      	nop
  }
}
 802aa16:	3718      	adds	r7, #24
 802aa18:	46bd      	mov	sp, r7
 802aa1a:	bd80      	pop	{r7, pc}

0802aa1c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 802aa1c:	b480      	push	{r7}
 802aa1e:	b085      	sub	sp, #20
 802aa20:	af00      	add	r7, sp, #0
 802aa22:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 802aa24:	2300      	movs	r3, #0
 802aa26:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 802aa28:	687b      	ldr	r3, [r7, #4]
 802aa2a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 802aa2c:	e005      	b.n	802aa3a <USBD_GetLen+0x1e>
  {
    len++;
 802aa2e:	7bfb      	ldrb	r3, [r7, #15]
 802aa30:	3301      	adds	r3, #1
 802aa32:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 802aa34:	68bb      	ldr	r3, [r7, #8]
 802aa36:	3301      	adds	r3, #1
 802aa38:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 802aa3a:	68bb      	ldr	r3, [r7, #8]
 802aa3c:	781b      	ldrb	r3, [r3, #0]
 802aa3e:	2b00      	cmp	r3, #0
 802aa40:	d1f5      	bne.n	802aa2e <USBD_GetLen+0x12>
  }

  return len;
 802aa42:	7bfb      	ldrb	r3, [r7, #15]
}
 802aa44:	4618      	mov	r0, r3
 802aa46:	3714      	adds	r7, #20
 802aa48:	46bd      	mov	sp, r7
 802aa4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802aa4e:	4770      	bx	lr

0802aa50 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 802aa50:	b580      	push	{r7, lr}
 802aa52:	b084      	sub	sp, #16
 802aa54:	af00      	add	r7, sp, #0
 802aa56:	60f8      	str	r0, [r7, #12]
 802aa58:	60b9      	str	r1, [r7, #8]
 802aa5a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 802aa5c:	68fb      	ldr	r3, [r7, #12]
 802aa5e:	2202      	movs	r2, #2
 802aa60:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 802aa64:	68fb      	ldr	r3, [r7, #12]
 802aa66:	687a      	ldr	r2, [r7, #4]
 802aa68:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 802aa6a:	68fb      	ldr	r3, [r7, #12]
 802aa6c:	687a      	ldr	r2, [r7, #4]
 802aa6e:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 802aa70:	687b      	ldr	r3, [r7, #4]
 802aa72:	68ba      	ldr	r2, [r7, #8]
 802aa74:	2100      	movs	r1, #0
 802aa76:	68f8      	ldr	r0, [r7, #12]
 802aa78:	f000 fdf5 	bl	802b666 <USBD_LL_Transmit>

  return USBD_OK;
 802aa7c:	2300      	movs	r3, #0
}
 802aa7e:	4618      	mov	r0, r3
 802aa80:	3710      	adds	r7, #16
 802aa82:	46bd      	mov	sp, r7
 802aa84:	bd80      	pop	{r7, pc}

0802aa86 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 802aa86:	b580      	push	{r7, lr}
 802aa88:	b084      	sub	sp, #16
 802aa8a:	af00      	add	r7, sp, #0
 802aa8c:	60f8      	str	r0, [r7, #12]
 802aa8e:	60b9      	str	r1, [r7, #8]
 802aa90:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 802aa92:	687b      	ldr	r3, [r7, #4]
 802aa94:	68ba      	ldr	r2, [r7, #8]
 802aa96:	2100      	movs	r1, #0
 802aa98:	68f8      	ldr	r0, [r7, #12]
 802aa9a:	f000 fde4 	bl	802b666 <USBD_LL_Transmit>

  return USBD_OK;
 802aa9e:	2300      	movs	r3, #0
}
 802aaa0:	4618      	mov	r0, r3
 802aaa2:	3710      	adds	r7, #16
 802aaa4:	46bd      	mov	sp, r7
 802aaa6:	bd80      	pop	{r7, pc}

0802aaa8 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 802aaa8:	b580      	push	{r7, lr}
 802aaaa:	b084      	sub	sp, #16
 802aaac:	af00      	add	r7, sp, #0
 802aaae:	60f8      	str	r0, [r7, #12]
 802aab0:	60b9      	str	r1, [r7, #8]
 802aab2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 802aab4:	68fb      	ldr	r3, [r7, #12]
 802aab6:	2203      	movs	r2, #3
 802aab8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 802aabc:	68fb      	ldr	r3, [r7, #12]
 802aabe:	687a      	ldr	r2, [r7, #4]
 802aac0:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 802aac4:	68fb      	ldr	r3, [r7, #12]
 802aac6:	687a      	ldr	r2, [r7, #4]
 802aac8:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 802aacc:	687b      	ldr	r3, [r7, #4]
 802aace:	68ba      	ldr	r2, [r7, #8]
 802aad0:	2100      	movs	r1, #0
 802aad2:	68f8      	ldr	r0, [r7, #12]
 802aad4:	f000 fde8 	bl	802b6a8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 802aad8:	2300      	movs	r3, #0
}
 802aada:	4618      	mov	r0, r3
 802aadc:	3710      	adds	r7, #16
 802aade:	46bd      	mov	sp, r7
 802aae0:	bd80      	pop	{r7, pc}

0802aae2 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 802aae2:	b580      	push	{r7, lr}
 802aae4:	b084      	sub	sp, #16
 802aae6:	af00      	add	r7, sp, #0
 802aae8:	60f8      	str	r0, [r7, #12]
 802aaea:	60b9      	str	r1, [r7, #8]
 802aaec:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 802aaee:	687b      	ldr	r3, [r7, #4]
 802aaf0:	68ba      	ldr	r2, [r7, #8]
 802aaf2:	2100      	movs	r1, #0
 802aaf4:	68f8      	ldr	r0, [r7, #12]
 802aaf6:	f000 fdd7 	bl	802b6a8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 802aafa:	2300      	movs	r3, #0
}
 802aafc:	4618      	mov	r0, r3
 802aafe:	3710      	adds	r7, #16
 802ab00:	46bd      	mov	sp, r7
 802ab02:	bd80      	pop	{r7, pc}

0802ab04 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 802ab04:	b580      	push	{r7, lr}
 802ab06:	b082      	sub	sp, #8
 802ab08:	af00      	add	r7, sp, #0
 802ab0a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 802ab0c:	687b      	ldr	r3, [r7, #4]
 802ab0e:	2204      	movs	r2, #4
 802ab10:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 802ab14:	2300      	movs	r3, #0
 802ab16:	2200      	movs	r2, #0
 802ab18:	2100      	movs	r1, #0
 802ab1a:	6878      	ldr	r0, [r7, #4]
 802ab1c:	f000 fda3 	bl	802b666 <USBD_LL_Transmit>

  return USBD_OK;
 802ab20:	2300      	movs	r3, #0
}
 802ab22:	4618      	mov	r0, r3
 802ab24:	3708      	adds	r7, #8
 802ab26:	46bd      	mov	sp, r7
 802ab28:	bd80      	pop	{r7, pc}

0802ab2a <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 802ab2a:	b580      	push	{r7, lr}
 802ab2c:	b082      	sub	sp, #8
 802ab2e:	af00      	add	r7, sp, #0
 802ab30:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 802ab32:	687b      	ldr	r3, [r7, #4]
 802ab34:	2205      	movs	r2, #5
 802ab36:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 802ab3a:	2300      	movs	r3, #0
 802ab3c:	2200      	movs	r2, #0
 802ab3e:	2100      	movs	r1, #0
 802ab40:	6878      	ldr	r0, [r7, #4]
 802ab42:	f000 fdb1 	bl	802b6a8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 802ab46:	2300      	movs	r3, #0
}
 802ab48:	4618      	mov	r0, r3
 802ab4a:	3708      	adds	r7, #8
 802ab4c:	46bd      	mov	sp, r7
 802ab4e:	bd80      	pop	{r7, pc}

0802ab50 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 802ab50:	b580      	push	{r7, lr}
 802ab52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 802ab54:	2200      	movs	r2, #0
 802ab56:	4912      	ldr	r1, [pc, #72]	; (802aba0 <MX_USB_DEVICE_Init+0x50>)
 802ab58:	4812      	ldr	r0, [pc, #72]	; (802aba4 <MX_USB_DEVICE_Init+0x54>)
 802ab5a:	f7fe fc91 	bl	8029480 <USBD_Init>
 802ab5e:	4603      	mov	r3, r0
 802ab60:	2b00      	cmp	r3, #0
 802ab62:	d001      	beq.n	802ab68 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 802ab64:	f7f6 ff4c 	bl	8021a00 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 802ab68:	490f      	ldr	r1, [pc, #60]	; (802aba8 <MX_USB_DEVICE_Init+0x58>)
 802ab6a:	480e      	ldr	r0, [pc, #56]	; (802aba4 <MX_USB_DEVICE_Init+0x54>)
 802ab6c:	f7fe fce8 	bl	8029540 <USBD_RegisterClass>
 802ab70:	4603      	mov	r3, r0
 802ab72:	2b00      	cmp	r3, #0
 802ab74:	d001      	beq.n	802ab7a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 802ab76:	f7f6 ff43 	bl	8021a00 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 802ab7a:	490c      	ldr	r1, [pc, #48]	; (802abac <MX_USB_DEVICE_Init+0x5c>)
 802ab7c:	4809      	ldr	r0, [pc, #36]	; (802aba4 <MX_USB_DEVICE_Init+0x54>)
 802ab7e:	f7fe fbaf 	bl	80292e0 <USBD_CDC_RegisterInterface>
 802ab82:	4603      	mov	r3, r0
 802ab84:	2b00      	cmp	r3, #0
 802ab86:	d001      	beq.n	802ab8c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 802ab88:	f7f6 ff3a 	bl	8021a00 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 802ab8c:	4805      	ldr	r0, [pc, #20]	; (802aba4 <MX_USB_DEVICE_Init+0x54>)
 802ab8e:	f7fe fd0d 	bl	80295ac <USBD_Start>
 802ab92:	4603      	mov	r3, r0
 802ab94:	2b00      	cmp	r3, #0
 802ab96:	d001      	beq.n	802ab9c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 802ab98:	f7f6 ff32 	bl	8021a00 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 802ab9c:	bf00      	nop
 802ab9e:	bd80      	pop	{r7, pc}
 802aba0:	200000b4 	.word	0x200000b4
 802aba4:	2000ba80 	.word	0x2000ba80
 802aba8:	20000018 	.word	0x20000018
 802abac:	200000a0 	.word	0x200000a0

0802abb0 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 802abb0:	b580      	push	{r7, lr}
 802abb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  nCdcRxIdx = 0;
 802abb4:	4b07      	ldr	r3, [pc, #28]	; (802abd4 <CDC_Init_FS+0x24>)
 802abb6:	2200      	movs	r2, #0
 802abb8:	601a      	str	r2, [r3, #0]

  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 802abba:	2200      	movs	r2, #0
 802abbc:	4906      	ldr	r1, [pc, #24]	; (802abd8 <CDC_Init_FS+0x28>)
 802abbe:	4807      	ldr	r0, [pc, #28]	; (802abdc <CDC_Init_FS+0x2c>)
 802abc0:	f7fe fba8 	bl	8029314 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 802abc4:	4906      	ldr	r1, [pc, #24]	; (802abe0 <CDC_Init_FS+0x30>)
 802abc6:	4805      	ldr	r0, [pc, #20]	; (802abdc <CDC_Init_FS+0x2c>)
 802abc8:	f7fe fbc6 	bl	8029358 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 802abcc:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 802abce:	4618      	mov	r0, r3
 802abd0:	bd80      	pop	{r7, pc}
 802abd2:	bf00      	nop
 802abd4:	2000bd5c 	.word	0x2000bd5c
 802abd8:	2000c560 	.word	0x2000c560
 802abdc:	2000ba80 	.word	0x2000ba80
 802abe0:	2000bd60 	.word	0x2000bd60

0802abe4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 802abe4:	b480      	push	{r7}
 802abe6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 802abe8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 802abea:	4618      	mov	r0, r3
 802abec:	46bd      	mov	sp, r7
 802abee:	f85d 7b04 	ldr.w	r7, [sp], #4
 802abf2:	4770      	bx	lr

0802abf4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 802abf4:	b480      	push	{r7}
 802abf6:	b083      	sub	sp, #12
 802abf8:	af00      	add	r7, sp, #0
 802abfa:	4603      	mov	r3, r0
 802abfc:	6039      	str	r1, [r7, #0]
 802abfe:	71fb      	strb	r3, [r7, #7]
 802ac00:	4613      	mov	r3, r2
 802ac02:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 802ac04:	79fb      	ldrb	r3, [r7, #7]
 802ac06:	2b23      	cmp	r3, #35	; 0x23
 802ac08:	f200 8098 	bhi.w	802ad3c <CDC_Control_FS+0x148>
 802ac0c:	a201      	add	r2, pc, #4	; (adr r2, 802ac14 <CDC_Control_FS+0x20>)
 802ac0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802ac12:	bf00      	nop
 802ac14:	0802ad3d 	.word	0x0802ad3d
 802ac18:	0802ad3d 	.word	0x0802ad3d
 802ac1c:	0802ad3d 	.word	0x0802ad3d
 802ac20:	0802ad3d 	.word	0x0802ad3d
 802ac24:	0802ad3d 	.word	0x0802ad3d
 802ac28:	0802ad3d 	.word	0x0802ad3d
 802ac2c:	0802ad3d 	.word	0x0802ad3d
 802ac30:	0802ad3d 	.word	0x0802ad3d
 802ac34:	0802ad3d 	.word	0x0802ad3d
 802ac38:	0802ad3d 	.word	0x0802ad3d
 802ac3c:	0802ad3d 	.word	0x0802ad3d
 802ac40:	0802ad3d 	.word	0x0802ad3d
 802ac44:	0802ad3d 	.word	0x0802ad3d
 802ac48:	0802ad3d 	.word	0x0802ad3d
 802ac4c:	0802ad3d 	.word	0x0802ad3d
 802ac50:	0802ad3d 	.word	0x0802ad3d
 802ac54:	0802ad3d 	.word	0x0802ad3d
 802ac58:	0802ad3d 	.word	0x0802ad3d
 802ac5c:	0802ad3d 	.word	0x0802ad3d
 802ac60:	0802ad3d 	.word	0x0802ad3d
 802ac64:	0802ad3d 	.word	0x0802ad3d
 802ac68:	0802ad3d 	.word	0x0802ad3d
 802ac6c:	0802ad3d 	.word	0x0802ad3d
 802ac70:	0802ad3d 	.word	0x0802ad3d
 802ac74:	0802ad3d 	.word	0x0802ad3d
 802ac78:	0802ad3d 	.word	0x0802ad3d
 802ac7c:	0802ad3d 	.word	0x0802ad3d
 802ac80:	0802ad3d 	.word	0x0802ad3d
 802ac84:	0802ad3d 	.word	0x0802ad3d
 802ac88:	0802ad3d 	.word	0x0802ad3d
 802ac8c:	0802ad3d 	.word	0x0802ad3d
 802ac90:	0802ad3d 	.word	0x0802ad3d
 802ac94:	0802aca5 	.word	0x0802aca5
 802ac98:	0802ace9 	.word	0x0802ace9
 802ac9c:	0802ad3d 	.word	0x0802ad3d
 802aca0:	0802ad3d 	.word	0x0802ad3d
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:

        /* set the line coding from the host */
        LineCoding.bitrate = (uint32_t)(pbuf[0] | (pbuf[1] << 8) |\
 802aca4:	683b      	ldr	r3, [r7, #0]
 802aca6:	781b      	ldrb	r3, [r3, #0]
 802aca8:	461a      	mov	r2, r3
 802acaa:	683b      	ldr	r3, [r7, #0]
 802acac:	3301      	adds	r3, #1
 802acae:	781b      	ldrb	r3, [r3, #0]
 802acb0:	021b      	lsls	r3, r3, #8
 802acb2:	431a      	orrs	r2, r3
                (pbuf[2] << 16) | (pbuf[3] << 24));
 802acb4:	683b      	ldr	r3, [r7, #0]
 802acb6:	3302      	adds	r3, #2
 802acb8:	781b      	ldrb	r3, [r3, #0]
 802acba:	041b      	lsls	r3, r3, #16
        LineCoding.bitrate = (uint32_t)(pbuf[0] | (pbuf[1] << 8) |\
 802acbc:	431a      	orrs	r2, r3
                (pbuf[2] << 16) | (pbuf[3] << 24));
 802acbe:	683b      	ldr	r3, [r7, #0]
 802acc0:	3303      	adds	r3, #3
 802acc2:	781b      	ldrb	r3, [r3, #0]
 802acc4:	061b      	lsls	r3, r3, #24
 802acc6:	4313      	orrs	r3, r2
        LineCoding.bitrate = (uint32_t)(pbuf[0] | (pbuf[1] << 8) |\
 802acc8:	461a      	mov	r2, r3
 802acca:	4b20      	ldr	r3, [pc, #128]	; (802ad4c <CDC_Control_FS+0x158>)
 802accc:	601a      	str	r2, [r3, #0]
        LineCoding.format = pbuf[4];
 802acce:	683b      	ldr	r3, [r7, #0]
 802acd0:	791a      	ldrb	r2, [r3, #4]
 802acd2:	4b1e      	ldr	r3, [pc, #120]	; (802ad4c <CDC_Control_FS+0x158>)
 802acd4:	711a      	strb	r2, [r3, #4]
        LineCoding.paritytype = pbuf[5];
 802acd6:	683b      	ldr	r3, [r7, #0]
 802acd8:	795a      	ldrb	r2, [r3, #5]
 802acda:	4b1c      	ldr	r3, [pc, #112]	; (802ad4c <CDC_Control_FS+0x158>)
 802acdc:	715a      	strb	r2, [r3, #5]
        LineCoding.datatype = pbuf[6];
 802acde:	683b      	ldr	r3, [r7, #0]
 802ace0:	799a      	ldrb	r2, [r3, #6]
 802ace2:	4b1a      	ldr	r3, [pc, #104]	; (802ad4c <CDC_Control_FS+0x158>)
 802ace4:	719a      	strb	r2, [r3, #6]
        /** TODO: check if we need to do extra config here to make
         *        sure the line coding will be applied correctly
         */
    break;
 802ace6:	e02a      	b.n	802ad3e <CDC_Control_FS+0x14a>

    case CDC_GET_LINE_CODING:

        /* report the current line coding to the host */
        pbuf[0] = (uint8_t)(LineCoding.bitrate);
 802ace8:	4b18      	ldr	r3, [pc, #96]	; (802ad4c <CDC_Control_FS+0x158>)
 802acea:	681b      	ldr	r3, [r3, #0]
 802acec:	b2da      	uxtb	r2, r3
 802acee:	683b      	ldr	r3, [r7, #0]
 802acf0:	701a      	strb	r2, [r3, #0]
        pbuf[1] = (uint8_t)(LineCoding.bitrate >> 8);
 802acf2:	4b16      	ldr	r3, [pc, #88]	; (802ad4c <CDC_Control_FS+0x158>)
 802acf4:	681b      	ldr	r3, [r3, #0]
 802acf6:	0a1a      	lsrs	r2, r3, #8
 802acf8:	683b      	ldr	r3, [r7, #0]
 802acfa:	3301      	adds	r3, #1
 802acfc:	b2d2      	uxtb	r2, r2
 802acfe:	701a      	strb	r2, [r3, #0]
        pbuf[2] = (uint8_t)(LineCoding.bitrate >> 16);
 802ad00:	4b12      	ldr	r3, [pc, #72]	; (802ad4c <CDC_Control_FS+0x158>)
 802ad02:	681b      	ldr	r3, [r3, #0]
 802ad04:	0c1a      	lsrs	r2, r3, #16
 802ad06:	683b      	ldr	r3, [r7, #0]
 802ad08:	3302      	adds	r3, #2
 802ad0a:	b2d2      	uxtb	r2, r2
 802ad0c:	701a      	strb	r2, [r3, #0]
        pbuf[3] = (uint8_t)(LineCoding.bitrate >> 24);
 802ad0e:	4b0f      	ldr	r3, [pc, #60]	; (802ad4c <CDC_Control_FS+0x158>)
 802ad10:	681b      	ldr	r3, [r3, #0]
 802ad12:	0e1a      	lsrs	r2, r3, #24
 802ad14:	683b      	ldr	r3, [r7, #0]
 802ad16:	3303      	adds	r3, #3
 802ad18:	b2d2      	uxtb	r2, r2
 802ad1a:	701a      	strb	r2, [r3, #0]
        pbuf[4] = LineCoding.format;
 802ad1c:	683b      	ldr	r3, [r7, #0]
 802ad1e:	3304      	adds	r3, #4
 802ad20:	4a0a      	ldr	r2, [pc, #40]	; (802ad4c <CDC_Control_FS+0x158>)
 802ad22:	7912      	ldrb	r2, [r2, #4]
 802ad24:	701a      	strb	r2, [r3, #0]
        pbuf[5] = LineCoding.paritytype;
 802ad26:	683b      	ldr	r3, [r7, #0]
 802ad28:	3305      	adds	r3, #5
 802ad2a:	4a08      	ldr	r2, [pc, #32]	; (802ad4c <CDC_Control_FS+0x158>)
 802ad2c:	7952      	ldrb	r2, [r2, #5]
 802ad2e:	701a      	strb	r2, [r3, #0]
        pbuf[6] = LineCoding.datatype;
 802ad30:	683b      	ldr	r3, [r7, #0]
 802ad32:	3306      	adds	r3, #6
 802ad34:	4a05      	ldr	r2, [pc, #20]	; (802ad4c <CDC_Control_FS+0x158>)
 802ad36:	7992      	ldrb	r2, [r2, #6]
 802ad38:	701a      	strb	r2, [r3, #0]
    break;
 802ad3a:	e000      	b.n	802ad3e <CDC_Control_FS+0x14a>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 802ad3c:	bf00      	nop
  }

  return (USBD_OK);
 802ad3e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 802ad40:	4618      	mov	r0, r3
 802ad42:	370c      	adds	r7, #12
 802ad44:	46bd      	mov	sp, r7
 802ad46:	f85d 7b04 	ldr.w	r7, [sp], #4
 802ad4a:	4770      	bx	lr
 802ad4c:	20000098 	.word	0x20000098

0802ad50 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 802ad50:	b580      	push	{r7, lr}
 802ad52:	b082      	sub	sp, #8
 802ad54:	af00      	add	r7, sp, #0
 802ad56:	6078      	str	r0, [r7, #4]
 802ad58:	6039      	str	r1, [r7, #0]
//
//      usbSendMessageISR( pMsg);
//  }

  // start the next receive process
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 802ad5a:	6879      	ldr	r1, [r7, #4]
 802ad5c:	4805      	ldr	r0, [pc, #20]	; (802ad74 <CDC_Receive_FS+0x24>)
 802ad5e:	f7fe fafb 	bl	8029358 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 802ad62:	4804      	ldr	r0, [pc, #16]	; (802ad74 <CDC_Receive_FS+0x24>)
 802ad64:	f7fe fb56 	bl	8029414 <USBD_CDC_ReceivePacket>
  /* deal.                                                     */
  /*************************************************************/
  cdc_cmd_handler( Buf, *Len);
  #endif

  return (USBD_OK);
 802ad68:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 802ad6a:	4618      	mov	r0, r3
 802ad6c:	3708      	adds	r7, #8
 802ad6e:	46bd      	mov	sp, r7
 802ad70:	bd80      	pop	{r7, pc}
 802ad72:	bf00      	nop
 802ad74:	2000ba80 	.word	0x2000ba80

0802ad78 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 802ad78:	b580      	push	{r7, lr}
 802ad7a:	b084      	sub	sp, #16
 802ad7c:	af00      	add	r7, sp, #0
 802ad7e:	6078      	str	r0, [r7, #4]
 802ad80:	460b      	mov	r3, r1
 802ad82:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 802ad84:	2300      	movs	r3, #0
 802ad86:	73fb      	strb	r3, [r7, #15]
  /* NOTE:
   * We need manually switch the USB interface during the Tx data preparation
   * because this process is not part of operations in USBD_COMPOSITE.
   */
//  USBD_Composite_Switch_Itf(&hUsbDeviceFS, USBD_CDC_INTERFACE);
  hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 802ad88:	4b0d      	ldr	r3, [pc, #52]	; (802adc0 <CDC_Transmit_FS+0x48>)
 802ad8a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 802ad8e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 802ad90:	68bb      	ldr	r3, [r7, #8]
 802ad92:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 802ad96:	2b00      	cmp	r3, #0
 802ad98:	d001      	beq.n	802ad9e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 802ad9a:	2301      	movs	r3, #1
 802ad9c:	e00b      	b.n	802adb6 <CDC_Transmit_FS+0x3e>
  }

  //if (!CDC_Echo_Ctrl_Flag || !RxBuffIsSwapped) {
    USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 802ad9e:	887b      	ldrh	r3, [r7, #2]
 802ada0:	461a      	mov	r2, r3
 802ada2:	6879      	ldr	r1, [r7, #4]
 802ada4:	4806      	ldr	r0, [pc, #24]	; (802adc0 <CDC_Transmit_FS+0x48>)
 802ada6:	f7fe fab5 	bl	8029314 <USBD_CDC_SetTxBuffer>
    result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 802adaa:	4805      	ldr	r0, [pc, #20]	; (802adc0 <CDC_Transmit_FS+0x48>)
 802adac:	f7fe faf2 	bl	8029394 <USBD_CDC_TransmitPacket>
 802adb0:	4603      	mov	r3, r0
 802adb2:	73fb      	strb	r3, [r7, #15]
    USBD_CDC_SetTxBuffer(&hUsbDeviceHS, new_buf, new_len);
    result = USBD_CDC_TransmitPacket(&hUsbDeviceHS);
    RxBuffIsSwapped = false;
  }*/
  /* USER CODE END 7 */
  return result;
 802adb4:	7bfb      	ldrb	r3, [r7, #15]
}
 802adb6:	4618      	mov	r0, r3
 802adb8:	3710      	adds	r7, #16
 802adba:	46bd      	mov	sp, r7
 802adbc:	bd80      	pop	{r7, pc}
 802adbe:	bf00      	nop
 802adc0:	2000ba80 	.word	0x2000ba80

0802adc4 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 802adc4:	b480      	push	{r7}
 802adc6:	b087      	sub	sp, #28
 802adc8:	af00      	add	r7, sp, #0
 802adca:	60f8      	str	r0, [r7, #12]
 802adcc:	60b9      	str	r1, [r7, #8]
 802adce:	4613      	mov	r3, r2
 802add0:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 802add2:	2300      	movs	r3, #0
 802add4:	75fb      	strb	r3, [r7, #23]

//  cdcTxCpltMsg.type = USB_CDC_TX_COMPLETE_MSG;
//  usbSendMessageISR( &cdcTxCpltMsg);

  /* USER CODE END 13 */
  return result;
 802add6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 802adda:	4618      	mov	r0, r3
 802addc:	371c      	adds	r7, #28
 802adde:	46bd      	mov	sp, r7
 802ade0:	f85d 7b04 	ldr.w	r7, [sp], #4
 802ade4:	4770      	bx	lr
	...

0802ade8 <usb_printf>:

/* USER CODE BEGIN PRIVATE_FUNCTIONS_IMPLEMENTATION */

void usb_printf(const char *format, ...)
{
 802ade8:	b40f      	push	{r0, r1, r2, r3}
 802adea:	b580      	push	{r7, lr}
 802adec:	b084      	sub	sp, #16
 802adee:	af00      	add	r7, sp, #0
    va_list args;
    uint32_t length;
#define MAX_RETRY       100
    uint32_t nRetry;

    va_start(args, format);
 802adf0:	f107 031c 	add.w	r3, r7, #28
 802adf4:	607b      	str	r3, [r7, #4]
    length = vsnprintf((char *)UserTxBufferFS, APP_TX_DATA_SIZE, (char *)format, args);
 802adf6:	687b      	ldr	r3, [r7, #4]
 802adf8:	69ba      	ldr	r2, [r7, #24]
 802adfa:	f44f 6100 	mov.w	r1, #2048	; 0x800
 802adfe:	4810      	ldr	r0, [pc, #64]	; (802ae40 <usb_printf+0x58>)
 802ae00:	f000 fdee 	bl	802b9e0 <vsniprintf>
 802ae04:	4603      	mov	r3, r0
 802ae06:	60bb      	str	r3, [r7, #8]
    va_end(args);

    nRetry = 0;
 802ae08:	2300      	movs	r3, #0
 802ae0a:	60fb      	str	r3, [r7, #12]
    while( (USBD_OK !=  CDC_Transmit_FS(UserTxBufferFS, length)) &&
 802ae0c:	e005      	b.n	802ae1a <usb_printf+0x32>
           (nRetry < MAX_RETRY) )
    {
        HAL_Delay(1);
 802ae0e:	2001      	movs	r0, #1
 802ae10:	f7f7 f882 	bl	8021f18 <HAL_Delay>
        nRetry += 1;
 802ae14:	68fb      	ldr	r3, [r7, #12]
 802ae16:	3301      	adds	r3, #1
 802ae18:	60fb      	str	r3, [r7, #12]
    while( (USBD_OK !=  CDC_Transmit_FS(UserTxBufferFS, length)) &&
 802ae1a:	68bb      	ldr	r3, [r7, #8]
 802ae1c:	b29b      	uxth	r3, r3
 802ae1e:	4619      	mov	r1, r3
 802ae20:	4807      	ldr	r0, [pc, #28]	; (802ae40 <usb_printf+0x58>)
 802ae22:	f7ff ffa9 	bl	802ad78 <CDC_Transmit_FS>
 802ae26:	4603      	mov	r3, r0
 802ae28:	2b00      	cmp	r3, #0
 802ae2a:	d002      	beq.n	802ae32 <usb_printf+0x4a>
 802ae2c:	68fb      	ldr	r3, [r7, #12]
 802ae2e:	2b63      	cmp	r3, #99	; 0x63
 802ae30:	d9ed      	bls.n	802ae0e <usb_printf+0x26>
    }
  #endif
}
 802ae32:	bf00      	nop
 802ae34:	3710      	adds	r7, #16
 802ae36:	46bd      	mov	sp, r7
 802ae38:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 802ae3c:	b004      	add	sp, #16
 802ae3e:	4770      	bx	lr
 802ae40:	2000c560 	.word	0x2000c560

0802ae44 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 802ae44:	b480      	push	{r7}
 802ae46:	b083      	sub	sp, #12
 802ae48:	af00      	add	r7, sp, #0
 802ae4a:	4603      	mov	r3, r0
 802ae4c:	6039      	str	r1, [r7, #0]
 802ae4e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 802ae50:	683b      	ldr	r3, [r7, #0]
 802ae52:	2212      	movs	r2, #18
 802ae54:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 802ae56:	4b03      	ldr	r3, [pc, #12]	; (802ae64 <USBD_FS_DeviceDescriptor+0x20>)
}
 802ae58:	4618      	mov	r0, r3
 802ae5a:	370c      	adds	r7, #12
 802ae5c:	46bd      	mov	sp, r7
 802ae5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 802ae62:	4770      	bx	lr
 802ae64:	200000d4 	.word	0x200000d4

0802ae68 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 802ae68:	b480      	push	{r7}
 802ae6a:	b083      	sub	sp, #12
 802ae6c:	af00      	add	r7, sp, #0
 802ae6e:	4603      	mov	r3, r0
 802ae70:	6039      	str	r1, [r7, #0]
 802ae72:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 802ae74:	683b      	ldr	r3, [r7, #0]
 802ae76:	2204      	movs	r2, #4
 802ae78:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 802ae7a:	4b03      	ldr	r3, [pc, #12]	; (802ae88 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 802ae7c:	4618      	mov	r0, r3
 802ae7e:	370c      	adds	r7, #12
 802ae80:	46bd      	mov	sp, r7
 802ae82:	f85d 7b04 	ldr.w	r7, [sp], #4
 802ae86:	4770      	bx	lr
 802ae88:	200000f4 	.word	0x200000f4

0802ae8c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 802ae8c:	b580      	push	{r7, lr}
 802ae8e:	b082      	sub	sp, #8
 802ae90:	af00      	add	r7, sp, #0
 802ae92:	4603      	mov	r3, r0
 802ae94:	6039      	str	r1, [r7, #0]
 802ae96:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 802ae98:	79fb      	ldrb	r3, [r7, #7]
 802ae9a:	2b00      	cmp	r3, #0
 802ae9c:	d105      	bne.n	802aeaa <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 802ae9e:	683a      	ldr	r2, [r7, #0]
 802aea0:	4907      	ldr	r1, [pc, #28]	; (802aec0 <USBD_FS_ProductStrDescriptor+0x34>)
 802aea2:	4808      	ldr	r0, [pc, #32]	; (802aec4 <USBD_FS_ProductStrDescriptor+0x38>)
 802aea4:	f7ff fd74 	bl	802a990 <USBD_GetString>
 802aea8:	e004      	b.n	802aeb4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 802aeaa:	683a      	ldr	r2, [r7, #0]
 802aeac:	4904      	ldr	r1, [pc, #16]	; (802aec0 <USBD_FS_ProductStrDescriptor+0x34>)
 802aeae:	4805      	ldr	r0, [pc, #20]	; (802aec4 <USBD_FS_ProductStrDescriptor+0x38>)
 802aeb0:	f7ff fd6e 	bl	802a990 <USBD_GetString>
  }
  return USBD_StrDesc;
 802aeb4:	4b02      	ldr	r3, [pc, #8]	; (802aec0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 802aeb6:	4618      	mov	r0, r3
 802aeb8:	3708      	adds	r7, #8
 802aeba:	46bd      	mov	sp, r7
 802aebc:	bd80      	pop	{r7, pc}
 802aebe:	bf00      	nop
 802aec0:	2000cd60 	.word	0x2000cd60
 802aec4:	0802c318 	.word	0x0802c318

0802aec8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 802aec8:	b580      	push	{r7, lr}
 802aeca:	b082      	sub	sp, #8
 802aecc:	af00      	add	r7, sp, #0
 802aece:	4603      	mov	r3, r0
 802aed0:	6039      	str	r1, [r7, #0]
 802aed2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 802aed4:	683a      	ldr	r2, [r7, #0]
 802aed6:	4904      	ldr	r1, [pc, #16]	; (802aee8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 802aed8:	4804      	ldr	r0, [pc, #16]	; (802aeec <USBD_FS_ManufacturerStrDescriptor+0x24>)
 802aeda:	f7ff fd59 	bl	802a990 <USBD_GetString>
  return USBD_StrDesc;
 802aede:	4b02      	ldr	r3, [pc, #8]	; (802aee8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 802aee0:	4618      	mov	r0, r3
 802aee2:	3708      	adds	r7, #8
 802aee4:	46bd      	mov	sp, r7
 802aee6:	bd80      	pop	{r7, pc}
 802aee8:	2000cd60 	.word	0x2000cd60
 802aeec:	0802c330 	.word	0x0802c330

0802aef0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 802aef0:	b580      	push	{r7, lr}
 802aef2:	b082      	sub	sp, #8
 802aef4:	af00      	add	r7, sp, #0
 802aef6:	4603      	mov	r3, r0
 802aef8:	6039      	str	r1, [r7, #0]
 802aefa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 802aefc:	683b      	ldr	r3, [r7, #0]
 802aefe:	221a      	movs	r2, #26
 802af00:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 802af02:	f000 f855 	bl	802afb0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 802af06:	4b02      	ldr	r3, [pc, #8]	; (802af10 <USBD_FS_SerialStrDescriptor+0x20>)
}
 802af08:	4618      	mov	r0, r3
 802af0a:	3708      	adds	r7, #8
 802af0c:	46bd      	mov	sp, r7
 802af0e:	bd80      	pop	{r7, pc}
 802af10:	200000f8 	.word	0x200000f8

0802af14 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 802af14:	b580      	push	{r7, lr}
 802af16:	b082      	sub	sp, #8
 802af18:	af00      	add	r7, sp, #0
 802af1a:	4603      	mov	r3, r0
 802af1c:	6039      	str	r1, [r7, #0]
 802af1e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 802af20:	79fb      	ldrb	r3, [r7, #7]
 802af22:	2b00      	cmp	r3, #0
 802af24:	d105      	bne.n	802af32 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 802af26:	683a      	ldr	r2, [r7, #0]
 802af28:	4907      	ldr	r1, [pc, #28]	; (802af48 <USBD_FS_ConfigStrDescriptor+0x34>)
 802af2a:	4808      	ldr	r0, [pc, #32]	; (802af4c <USBD_FS_ConfigStrDescriptor+0x38>)
 802af2c:	f7ff fd30 	bl	802a990 <USBD_GetString>
 802af30:	e004      	b.n	802af3c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 802af32:	683a      	ldr	r2, [r7, #0]
 802af34:	4904      	ldr	r1, [pc, #16]	; (802af48 <USBD_FS_ConfigStrDescriptor+0x34>)
 802af36:	4805      	ldr	r0, [pc, #20]	; (802af4c <USBD_FS_ConfigStrDescriptor+0x38>)
 802af38:	f7ff fd2a 	bl	802a990 <USBD_GetString>
  }
  return USBD_StrDesc;
 802af3c:	4b02      	ldr	r3, [pc, #8]	; (802af48 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 802af3e:	4618      	mov	r0, r3
 802af40:	3708      	adds	r7, #8
 802af42:	46bd      	mov	sp, r7
 802af44:	bd80      	pop	{r7, pc}
 802af46:	bf00      	nop
 802af48:	2000cd60 	.word	0x2000cd60
 802af4c:	0802c344 	.word	0x0802c344

0802af50 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 802af50:	b580      	push	{r7, lr}
 802af52:	b082      	sub	sp, #8
 802af54:	af00      	add	r7, sp, #0
 802af56:	4603      	mov	r3, r0
 802af58:	6039      	str	r1, [r7, #0]
 802af5a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 802af5c:	79fb      	ldrb	r3, [r7, #7]
 802af5e:	2b00      	cmp	r3, #0
 802af60:	d105      	bne.n	802af6e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 802af62:	683a      	ldr	r2, [r7, #0]
 802af64:	4907      	ldr	r1, [pc, #28]	; (802af84 <USBD_FS_InterfaceStrDescriptor+0x34>)
 802af66:	4808      	ldr	r0, [pc, #32]	; (802af88 <USBD_FS_InterfaceStrDescriptor+0x38>)
 802af68:	f7ff fd12 	bl	802a990 <USBD_GetString>
 802af6c:	e004      	b.n	802af78 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 802af6e:	683a      	ldr	r2, [r7, #0]
 802af70:	4904      	ldr	r1, [pc, #16]	; (802af84 <USBD_FS_InterfaceStrDescriptor+0x34>)
 802af72:	4805      	ldr	r0, [pc, #20]	; (802af88 <USBD_FS_InterfaceStrDescriptor+0x38>)
 802af74:	f7ff fd0c 	bl	802a990 <USBD_GetString>
  }
  return USBD_StrDesc;
 802af78:	4b02      	ldr	r3, [pc, #8]	; (802af84 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 802af7a:	4618      	mov	r0, r3
 802af7c:	3708      	adds	r7, #8
 802af7e:	46bd      	mov	sp, r7
 802af80:	bd80      	pop	{r7, pc}
 802af82:	bf00      	nop
 802af84:	2000cd60 	.word	0x2000cd60
 802af88:	0802c350 	.word	0x0802c350

0802af8c <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 802af8c:	b480      	push	{r7}
 802af8e:	b083      	sub	sp, #12
 802af90:	af00      	add	r7, sp, #0
 802af92:	4603      	mov	r3, r0
 802af94:	6039      	str	r1, [r7, #0]
 802af96:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 802af98:	683b      	ldr	r3, [r7, #0]
 802af9a:	220c      	movs	r2, #12
 802af9c:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 802af9e:	4b03      	ldr	r3, [pc, #12]	; (802afac <USBD_FS_USR_BOSDescriptor+0x20>)
}
 802afa0:	4618      	mov	r0, r3
 802afa2:	370c      	adds	r7, #12
 802afa4:	46bd      	mov	sp, r7
 802afa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 802afaa:	4770      	bx	lr
 802afac:	200000e8 	.word	0x200000e8

0802afb0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 802afb0:	b580      	push	{r7, lr}
 802afb2:	b084      	sub	sp, #16
 802afb4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 802afb6:	4b0f      	ldr	r3, [pc, #60]	; (802aff4 <Get_SerialNum+0x44>)
 802afb8:	681b      	ldr	r3, [r3, #0]
 802afba:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 802afbc:	4b0e      	ldr	r3, [pc, #56]	; (802aff8 <Get_SerialNum+0x48>)
 802afbe:	681b      	ldr	r3, [r3, #0]
 802afc0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 802afc2:	4b0e      	ldr	r3, [pc, #56]	; (802affc <Get_SerialNum+0x4c>)
 802afc4:	681b      	ldr	r3, [r3, #0]
 802afc6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 802afc8:	68fa      	ldr	r2, [r7, #12]
 802afca:	687b      	ldr	r3, [r7, #4]
 802afcc:	4413      	add	r3, r2
 802afce:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 802afd0:	68fb      	ldr	r3, [r7, #12]
 802afd2:	2b00      	cmp	r3, #0
 802afd4:	d009      	beq.n	802afea <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 802afd6:	2208      	movs	r2, #8
 802afd8:	4909      	ldr	r1, [pc, #36]	; (802b000 <Get_SerialNum+0x50>)
 802afda:	68f8      	ldr	r0, [r7, #12]
 802afdc:	f000 f814 	bl	802b008 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 802afe0:	2204      	movs	r2, #4
 802afe2:	4908      	ldr	r1, [pc, #32]	; (802b004 <Get_SerialNum+0x54>)
 802afe4:	68b8      	ldr	r0, [r7, #8]
 802afe6:	f000 f80f 	bl	802b008 <IntToUnicode>
  }
}
 802afea:	bf00      	nop
 802afec:	3710      	adds	r7, #16
 802afee:	46bd      	mov	sp, r7
 802aff0:	bd80      	pop	{r7, pc}
 802aff2:	bf00      	nop
 802aff4:	1ff07a10 	.word	0x1ff07a10
 802aff8:	1ff07a14 	.word	0x1ff07a14
 802affc:	1ff07a18 	.word	0x1ff07a18
 802b000:	200000fa 	.word	0x200000fa
 802b004:	2000010a 	.word	0x2000010a

0802b008 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 802b008:	b480      	push	{r7}
 802b00a:	b087      	sub	sp, #28
 802b00c:	af00      	add	r7, sp, #0
 802b00e:	60f8      	str	r0, [r7, #12]
 802b010:	60b9      	str	r1, [r7, #8]
 802b012:	4613      	mov	r3, r2
 802b014:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 802b016:	2300      	movs	r3, #0
 802b018:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 802b01a:	2300      	movs	r3, #0
 802b01c:	75fb      	strb	r3, [r7, #23]
 802b01e:	e027      	b.n	802b070 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 802b020:	68fb      	ldr	r3, [r7, #12]
 802b022:	0f1b      	lsrs	r3, r3, #28
 802b024:	2b09      	cmp	r3, #9
 802b026:	d80b      	bhi.n	802b040 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 802b028:	68fb      	ldr	r3, [r7, #12]
 802b02a:	0f1b      	lsrs	r3, r3, #28
 802b02c:	b2da      	uxtb	r2, r3
 802b02e:	7dfb      	ldrb	r3, [r7, #23]
 802b030:	005b      	lsls	r3, r3, #1
 802b032:	4619      	mov	r1, r3
 802b034:	68bb      	ldr	r3, [r7, #8]
 802b036:	440b      	add	r3, r1
 802b038:	3230      	adds	r2, #48	; 0x30
 802b03a:	b2d2      	uxtb	r2, r2
 802b03c:	701a      	strb	r2, [r3, #0]
 802b03e:	e00a      	b.n	802b056 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 802b040:	68fb      	ldr	r3, [r7, #12]
 802b042:	0f1b      	lsrs	r3, r3, #28
 802b044:	b2da      	uxtb	r2, r3
 802b046:	7dfb      	ldrb	r3, [r7, #23]
 802b048:	005b      	lsls	r3, r3, #1
 802b04a:	4619      	mov	r1, r3
 802b04c:	68bb      	ldr	r3, [r7, #8]
 802b04e:	440b      	add	r3, r1
 802b050:	3237      	adds	r2, #55	; 0x37
 802b052:	b2d2      	uxtb	r2, r2
 802b054:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 802b056:	68fb      	ldr	r3, [r7, #12]
 802b058:	011b      	lsls	r3, r3, #4
 802b05a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 802b05c:	7dfb      	ldrb	r3, [r7, #23]
 802b05e:	005b      	lsls	r3, r3, #1
 802b060:	3301      	adds	r3, #1
 802b062:	68ba      	ldr	r2, [r7, #8]
 802b064:	4413      	add	r3, r2
 802b066:	2200      	movs	r2, #0
 802b068:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 802b06a:	7dfb      	ldrb	r3, [r7, #23]
 802b06c:	3301      	adds	r3, #1
 802b06e:	75fb      	strb	r3, [r7, #23]
 802b070:	7dfa      	ldrb	r2, [r7, #23]
 802b072:	79fb      	ldrb	r3, [r7, #7]
 802b074:	429a      	cmp	r2, r3
 802b076:	d3d3      	bcc.n	802b020 <IntToUnicode+0x18>
  }
}
 802b078:	bf00      	nop
 802b07a:	bf00      	nop
 802b07c:	371c      	adds	r7, #28
 802b07e:	46bd      	mov	sp, r7
 802b080:	f85d 7b04 	ldr.w	r7, [sp], #4
 802b084:	4770      	bx	lr
	...

0802b088 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 802b088:	b580      	push	{r7, lr}
 802b08a:	b0aa      	sub	sp, #168	; 0xa8
 802b08c:	af00      	add	r7, sp, #0
 802b08e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 802b090:	f107 0394 	add.w	r3, r7, #148	; 0x94
 802b094:	2200      	movs	r2, #0
 802b096:	601a      	str	r2, [r3, #0]
 802b098:	605a      	str	r2, [r3, #4]
 802b09a:	609a      	str	r2, [r3, #8]
 802b09c:	60da      	str	r2, [r3, #12]
 802b09e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 802b0a0:	f107 0314 	add.w	r3, r7, #20
 802b0a4:	2280      	movs	r2, #128	; 0x80
 802b0a6:	2100      	movs	r1, #0
 802b0a8:	4618      	mov	r0, r3
 802b0aa:	f000 fcb7 	bl	802ba1c <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 802b0ae:	687b      	ldr	r3, [r7, #4]
 802b0b0:	681b      	ldr	r3, [r3, #0]
 802b0b2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 802b0b6:	d151      	bne.n	802b15c <HAL_PCD_MspInit+0xd4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 802b0b8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 802b0bc:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 802b0be:	2300      	movs	r3, #0
 802b0c0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 802b0c4:	f107 0314 	add.w	r3, r7, #20
 802b0c8:	4618      	mov	r0, r3
 802b0ca:	f7fb fbf3 	bl	80268b4 <HAL_RCCEx_PeriphCLKConfig>
 802b0ce:	4603      	mov	r3, r0
 802b0d0:	2b00      	cmp	r3, #0
 802b0d2:	d001      	beq.n	802b0d8 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 802b0d4:	f7f6 fc94 	bl	8021a00 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 802b0d8:	4b22      	ldr	r3, [pc, #136]	; (802b164 <HAL_PCD_MspInit+0xdc>)
 802b0da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802b0dc:	4a21      	ldr	r2, [pc, #132]	; (802b164 <HAL_PCD_MspInit+0xdc>)
 802b0de:	f043 0301 	orr.w	r3, r3, #1
 802b0e2:	6313      	str	r3, [r2, #48]	; 0x30
 802b0e4:	4b1f      	ldr	r3, [pc, #124]	; (802b164 <HAL_PCD_MspInit+0xdc>)
 802b0e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802b0e8:	f003 0301 	and.w	r3, r3, #1
 802b0ec:	613b      	str	r3, [r7, #16]
 802b0ee:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA12     ------> USB_OTG_FS_DP
    PA11     ------> USB_OTG_FS_DM
    */
    GPIO_InitStruct.Pin = OTG_FS_DP_Pin|OTG_FS_DM_Pin;
 802b0f0:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 802b0f4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 802b0f8:	2302      	movs	r3, #2
 802b0fa:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 802b0fe:	2300      	movs	r3, #0
 802b100:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 802b104:	2303      	movs	r3, #3
 802b106:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 802b10a:	230a      	movs	r3, #10
 802b10c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 802b110:	f107 0394 	add.w	r3, r7, #148	; 0x94
 802b114:	4619      	mov	r1, r3
 802b116:	4814      	ldr	r0, [pc, #80]	; (802b168 <HAL_PCD_MspInit+0xe0>)
 802b118:	f7f7 fbfc 	bl	8022914 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 802b11c:	4b11      	ldr	r3, [pc, #68]	; (802b164 <HAL_PCD_MspInit+0xdc>)
 802b11e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 802b120:	4a10      	ldr	r2, [pc, #64]	; (802b164 <HAL_PCD_MspInit+0xdc>)
 802b122:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 802b126:	6353      	str	r3, [r2, #52]	; 0x34
 802b128:	4b0e      	ldr	r3, [pc, #56]	; (802b164 <HAL_PCD_MspInit+0xdc>)
 802b12a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 802b12c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 802b130:	60fb      	str	r3, [r7, #12]
 802b132:	68fb      	ldr	r3, [r7, #12]
 802b134:	4b0b      	ldr	r3, [pc, #44]	; (802b164 <HAL_PCD_MspInit+0xdc>)
 802b136:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 802b138:	4a0a      	ldr	r2, [pc, #40]	; (802b164 <HAL_PCD_MspInit+0xdc>)
 802b13a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 802b13e:	6453      	str	r3, [r2, #68]	; 0x44
 802b140:	4b08      	ldr	r3, [pc, #32]	; (802b164 <HAL_PCD_MspInit+0xdc>)
 802b142:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 802b144:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 802b148:	60bb      	str	r3, [r7, #8]
 802b14a:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 802b14c:	2200      	movs	r2, #0
 802b14e:	2100      	movs	r1, #0
 802b150:	2043      	movs	r0, #67	; 0x43
 802b152:	f7f7 f804 	bl	802215e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 802b156:	2043      	movs	r0, #67	; 0x43
 802b158:	f7f7 f81d 	bl	8022196 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 802b15c:	bf00      	nop
 802b15e:	37a8      	adds	r7, #168	; 0xa8
 802b160:	46bd      	mov	sp, r7
 802b162:	bd80      	pop	{r7, pc}
 802b164:	40023800 	.word	0x40023800
 802b168:	40020000 	.word	0x40020000

0802b16c <HAL_PCD_MspDeInit>:

void HAL_PCD_MspDeInit(PCD_HandleTypeDef* pcdHandle)
{
 802b16c:	b580      	push	{r7, lr}
 802b16e:	b082      	sub	sp, #8
 802b170:	af00      	add	r7, sp, #0
 802b172:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB_OTG_FS)
 802b174:	687b      	ldr	r3, [r7, #4]
 802b176:	681b      	ldr	r3, [r3, #0]
 802b178:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 802b17c:	d10d      	bne.n	802b19a <HAL_PCD_MspDeInit+0x2e>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspDeInit 0 */

  /* USER CODE END USB_OTG_FS_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USB_OTG_FS_CLK_DISABLE();
 802b17e:	4b09      	ldr	r3, [pc, #36]	; (802b1a4 <HAL_PCD_MspDeInit+0x38>)
 802b180:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 802b182:	4a08      	ldr	r2, [pc, #32]	; (802b1a4 <HAL_PCD_MspDeInit+0x38>)
 802b184:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 802b188:	6353      	str	r3, [r2, #52]	; 0x34

    /**USB_OTG_FS GPIO Configuration
    PA12     ------> USB_OTG_FS_DP
    PA11     ------> USB_OTG_FS_DM
    */
    HAL_GPIO_DeInit(GPIOA, OTG_FS_DP_Pin|OTG_FS_DM_Pin);
 802b18a:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 802b18e:	4806      	ldr	r0, [pc, #24]	; (802b1a8 <HAL_PCD_MspDeInit+0x3c>)
 802b190:	f7f7 fd5c 	bl	8022c4c <HAL_GPIO_DeInit>

    /* Peripheral interrupt Deinit*/
    HAL_NVIC_DisableIRQ(OTG_FS_IRQn);
 802b194:	2043      	movs	r0, #67	; 0x43
 802b196:	f7f7 f80c 	bl	80221b2 <HAL_NVIC_DisableIRQ>

  /* USER CODE BEGIN USB_OTG_FS_MspDeInit 1 */

  /* USER CODE END USB_OTG_FS_MspDeInit 1 */
  }
}
 802b19a:	bf00      	nop
 802b19c:	3708      	adds	r7, #8
 802b19e:	46bd      	mov	sp, r7
 802b1a0:	bd80      	pop	{r7, pc}
 802b1a2:	bf00      	nop
 802b1a4:	40023800 	.word	0x40023800
 802b1a8:	40020000 	.word	0x40020000

0802b1ac <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 802b1ac:	b580      	push	{r7, lr}
 802b1ae:	b082      	sub	sp, #8
 802b1b0:	af00      	add	r7, sp, #0
 802b1b2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 802b1b4:	687b      	ldr	r3, [r7, #4]
 802b1b6:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
 802b1ba:	687b      	ldr	r3, [r7, #4]
 802b1bc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 802b1c0:	4619      	mov	r1, r3
 802b1c2:	4610      	mov	r0, r2
 802b1c4:	f7fe fa5a 	bl	802967c <USBD_LL_SetupStage>
}
 802b1c8:	bf00      	nop
 802b1ca:	3708      	adds	r7, #8
 802b1cc:	46bd      	mov	sp, r7
 802b1ce:	bd80      	pop	{r7, pc}

0802b1d0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 802b1d0:	b580      	push	{r7, lr}
 802b1d2:	b082      	sub	sp, #8
 802b1d4:	af00      	add	r7, sp, #0
 802b1d6:	6078      	str	r0, [r7, #4]
 802b1d8:	460b      	mov	r3, r1
 802b1da:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 802b1dc:	687b      	ldr	r3, [r7, #4]
 802b1de:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
 802b1e2:	78fa      	ldrb	r2, [r7, #3]
 802b1e4:	6879      	ldr	r1, [r7, #4]
 802b1e6:	4613      	mov	r3, r2
 802b1e8:	00db      	lsls	r3, r3, #3
 802b1ea:	4413      	add	r3, r2
 802b1ec:	009b      	lsls	r3, r3, #2
 802b1ee:	440b      	add	r3, r1
 802b1f0:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 802b1f4:	681a      	ldr	r2, [r3, #0]
 802b1f6:	78fb      	ldrb	r3, [r7, #3]
 802b1f8:	4619      	mov	r1, r3
 802b1fa:	f7fe fa94 	bl	8029726 <USBD_LL_DataOutStage>
}
 802b1fe:	bf00      	nop
 802b200:	3708      	adds	r7, #8
 802b202:	46bd      	mov	sp, r7
 802b204:	bd80      	pop	{r7, pc}

0802b206 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 802b206:	b580      	push	{r7, lr}
 802b208:	b082      	sub	sp, #8
 802b20a:	af00      	add	r7, sp, #0
 802b20c:	6078      	str	r0, [r7, #4]
 802b20e:	460b      	mov	r3, r1
 802b210:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 802b212:	687b      	ldr	r3, [r7, #4]
 802b214:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
 802b218:	78fa      	ldrb	r2, [r7, #3]
 802b21a:	6879      	ldr	r1, [r7, #4]
 802b21c:	4613      	mov	r3, r2
 802b21e:	00db      	lsls	r3, r3, #3
 802b220:	4413      	add	r3, r2
 802b222:	009b      	lsls	r3, r3, #2
 802b224:	440b      	add	r3, r1
 802b226:	334c      	adds	r3, #76	; 0x4c
 802b228:	681a      	ldr	r2, [r3, #0]
 802b22a:	78fb      	ldrb	r3, [r7, #3]
 802b22c:	4619      	mov	r1, r3
 802b22e:	f7fe fb2d 	bl	802988c <USBD_LL_DataInStage>
}
 802b232:	bf00      	nop
 802b234:	3708      	adds	r7, #8
 802b236:	46bd      	mov	sp, r7
 802b238:	bd80      	pop	{r7, pc}

0802b23a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 802b23a:	b580      	push	{r7, lr}
 802b23c:	b082      	sub	sp, #8
 802b23e:	af00      	add	r7, sp, #0
 802b240:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 802b242:	687b      	ldr	r3, [r7, #4]
 802b244:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 802b248:	4618      	mov	r0, r3
 802b24a:	f7fe fc61 	bl	8029b10 <USBD_LL_SOF>
}
 802b24e:	bf00      	nop
 802b250:	3708      	adds	r7, #8
 802b252:	46bd      	mov	sp, r7
 802b254:	bd80      	pop	{r7, pc}

0802b256 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 802b256:	b580      	push	{r7, lr}
 802b258:	b084      	sub	sp, #16
 802b25a:	af00      	add	r7, sp, #0
 802b25c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 802b25e:	2301      	movs	r3, #1
 802b260:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 802b262:	687b      	ldr	r3, [r7, #4]
 802b264:	68db      	ldr	r3, [r3, #12]
 802b266:	2b00      	cmp	r3, #0
 802b268:	d102      	bne.n	802b270 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 802b26a:	2300      	movs	r3, #0
 802b26c:	73fb      	strb	r3, [r7, #15]
 802b26e:	e008      	b.n	802b282 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 802b270:	687b      	ldr	r3, [r7, #4]
 802b272:	68db      	ldr	r3, [r3, #12]
 802b274:	2b02      	cmp	r3, #2
 802b276:	d102      	bne.n	802b27e <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 802b278:	2301      	movs	r3, #1
 802b27a:	73fb      	strb	r3, [r7, #15]
 802b27c:	e001      	b.n	802b282 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 802b27e:	f7f6 fbbf 	bl	8021a00 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 802b282:	687b      	ldr	r3, [r7, #4]
 802b284:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 802b288:	7bfa      	ldrb	r2, [r7, #15]
 802b28a:	4611      	mov	r1, r2
 802b28c:	4618      	mov	r0, r3
 802b28e:	f7fe fc01 	bl	8029a94 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 802b292:	687b      	ldr	r3, [r7, #4]
 802b294:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 802b298:	4618      	mov	r0, r3
 802b29a:	f7fe fba9 	bl	80299f0 <USBD_LL_Reset>
}
 802b29e:	bf00      	nop
 802b2a0:	3710      	adds	r7, #16
 802b2a2:	46bd      	mov	sp, r7
 802b2a4:	bd80      	pop	{r7, pc}
	...

0802b2a8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 802b2a8:	b580      	push	{r7, lr}
 802b2aa:	b082      	sub	sp, #8
 802b2ac:	af00      	add	r7, sp, #0
 802b2ae:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 802b2b0:	687b      	ldr	r3, [r7, #4]
 802b2b2:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 802b2b6:	4618      	mov	r0, r3
 802b2b8:	f7fe fbfc 	bl	8029ab4 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 802b2bc:	687b      	ldr	r3, [r7, #4]
 802b2be:	681b      	ldr	r3, [r3, #0]
 802b2c0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 802b2c4:	681b      	ldr	r3, [r3, #0]
 802b2c6:	687a      	ldr	r2, [r7, #4]
 802b2c8:	6812      	ldr	r2, [r2, #0]
 802b2ca:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 802b2ce:	f043 0301 	orr.w	r3, r3, #1
 802b2d2:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 802b2d4:	687b      	ldr	r3, [r7, #4]
 802b2d6:	6a1b      	ldr	r3, [r3, #32]
 802b2d8:	2b00      	cmp	r3, #0
 802b2da:	d005      	beq.n	802b2e8 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 802b2dc:	4b04      	ldr	r3, [pc, #16]	; (802b2f0 <HAL_PCD_SuspendCallback+0x48>)
 802b2de:	691b      	ldr	r3, [r3, #16]
 802b2e0:	4a03      	ldr	r2, [pc, #12]	; (802b2f0 <HAL_PCD_SuspendCallback+0x48>)
 802b2e2:	f043 0306 	orr.w	r3, r3, #6
 802b2e6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 802b2e8:	bf00      	nop
 802b2ea:	3708      	adds	r7, #8
 802b2ec:	46bd      	mov	sp, r7
 802b2ee:	bd80      	pop	{r7, pc}
 802b2f0:	e000ed00 	.word	0xe000ed00

0802b2f4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 802b2f4:	b580      	push	{r7, lr}
 802b2f6:	b082      	sub	sp, #8
 802b2f8:	af00      	add	r7, sp, #0
 802b2fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 802b2fc:	687b      	ldr	r3, [r7, #4]
 802b2fe:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 802b302:	4618      	mov	r0, r3
 802b304:	f7fe fbec 	bl	8029ae0 <USBD_LL_Resume>
}
 802b308:	bf00      	nop
 802b30a:	3708      	adds	r7, #8
 802b30c:	46bd      	mov	sp, r7
 802b30e:	bd80      	pop	{r7, pc}

0802b310 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 802b310:	b580      	push	{r7, lr}
 802b312:	b082      	sub	sp, #8
 802b314:	af00      	add	r7, sp, #0
 802b316:	6078      	str	r0, [r7, #4]
 802b318:	460b      	mov	r3, r1
 802b31a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 802b31c:	687b      	ldr	r3, [r7, #4]
 802b31e:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 802b322:	78fa      	ldrb	r2, [r7, #3]
 802b324:	4611      	mov	r1, r2
 802b326:	4618      	mov	r0, r3
 802b328:	f7fe fc44 	bl	8029bb4 <USBD_LL_IsoOUTIncomplete>
}
 802b32c:	bf00      	nop
 802b32e:	3708      	adds	r7, #8
 802b330:	46bd      	mov	sp, r7
 802b332:	bd80      	pop	{r7, pc}

0802b334 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 802b334:	b580      	push	{r7, lr}
 802b336:	b082      	sub	sp, #8
 802b338:	af00      	add	r7, sp, #0
 802b33a:	6078      	str	r0, [r7, #4]
 802b33c:	460b      	mov	r3, r1
 802b33e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 802b340:	687b      	ldr	r3, [r7, #4]
 802b342:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 802b346:	78fa      	ldrb	r2, [r7, #3]
 802b348:	4611      	mov	r1, r2
 802b34a:	4618      	mov	r0, r3
 802b34c:	f7fe fc00 	bl	8029b50 <USBD_LL_IsoINIncomplete>
}
 802b350:	bf00      	nop
 802b352:	3708      	adds	r7, #8
 802b354:	46bd      	mov	sp, r7
 802b356:	bd80      	pop	{r7, pc}

0802b358 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 802b358:	b580      	push	{r7, lr}
 802b35a:	b082      	sub	sp, #8
 802b35c:	af00      	add	r7, sp, #0
 802b35e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 802b360:	687b      	ldr	r3, [r7, #4]
 802b362:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 802b366:	4618      	mov	r0, r3
 802b368:	f7fe fc56 	bl	8029c18 <USBD_LL_DevConnected>
}
 802b36c:	bf00      	nop
 802b36e:	3708      	adds	r7, #8
 802b370:	46bd      	mov	sp, r7
 802b372:	bd80      	pop	{r7, pc}

0802b374 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 802b374:	b580      	push	{r7, lr}
 802b376:	b082      	sub	sp, #8
 802b378:	af00      	add	r7, sp, #0
 802b37a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 802b37c:	687b      	ldr	r3, [r7, #4]
 802b37e:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 802b382:	4618      	mov	r0, r3
 802b384:	f7fe fc53 	bl	8029c2e <USBD_LL_DevDisconnected>
}
 802b388:	bf00      	nop
 802b38a:	3708      	adds	r7, #8
 802b38c:	46bd      	mov	sp, r7
 802b38e:	bd80      	pop	{r7, pc}

0802b390 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 802b390:	b580      	push	{r7, lr}
 802b392:	b082      	sub	sp, #8
 802b394:	af00      	add	r7, sp, #0
 802b396:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 802b398:	687b      	ldr	r3, [r7, #4]
 802b39a:	781b      	ldrb	r3, [r3, #0]
 802b39c:	2b00      	cmp	r3, #0
 802b39e:	d13c      	bne.n	802b41a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 802b3a0:	4a20      	ldr	r2, [pc, #128]	; (802b424 <USBD_LL_Init+0x94>)
 802b3a2:	687b      	ldr	r3, [r7, #4]
 802b3a4:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
  pdev->pData = &hpcd_USB_OTG_FS;
 802b3a8:	687b      	ldr	r3, [r7, #4]
 802b3aa:	4a1e      	ldr	r2, [pc, #120]	; (802b424 <USBD_LL_Init+0x94>)
 802b3ac:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 802b3b0:	4b1c      	ldr	r3, [pc, #112]	; (802b424 <USBD_LL_Init+0x94>)
 802b3b2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 802b3b6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 802b3b8:	4b1a      	ldr	r3, [pc, #104]	; (802b424 <USBD_LL_Init+0x94>)
 802b3ba:	2206      	movs	r2, #6
 802b3bc:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 802b3be:	4b19      	ldr	r3, [pc, #100]	; (802b424 <USBD_LL_Init+0x94>)
 802b3c0:	2200      	movs	r2, #0
 802b3c2:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 802b3c4:	4b17      	ldr	r3, [pc, #92]	; (802b424 <USBD_LL_Init+0x94>)
 802b3c6:	2202      	movs	r2, #2
 802b3c8:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 802b3ca:	4b16      	ldr	r3, [pc, #88]	; (802b424 <USBD_LL_Init+0x94>)
 802b3cc:	2200      	movs	r2, #0
 802b3ce:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 802b3d0:	4b14      	ldr	r3, [pc, #80]	; (802b424 <USBD_LL_Init+0x94>)
 802b3d2:	2200      	movs	r2, #0
 802b3d4:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 802b3d6:	4b13      	ldr	r3, [pc, #76]	; (802b424 <USBD_LL_Init+0x94>)
 802b3d8:	2200      	movs	r2, #0
 802b3da:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 802b3dc:	4b11      	ldr	r3, [pc, #68]	; (802b424 <USBD_LL_Init+0x94>)
 802b3de:	2200      	movs	r2, #0
 802b3e0:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 802b3e2:	4b10      	ldr	r3, [pc, #64]	; (802b424 <USBD_LL_Init+0x94>)
 802b3e4:	2200      	movs	r2, #0
 802b3e6:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 802b3e8:	4b0e      	ldr	r3, [pc, #56]	; (802b424 <USBD_LL_Init+0x94>)
 802b3ea:	2200      	movs	r2, #0
 802b3ec:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 802b3ee:	480d      	ldr	r0, [pc, #52]	; (802b424 <USBD_LL_Init+0x94>)
 802b3f0:	f7f9 faab 	bl	802494a <HAL_PCD_Init>
 802b3f4:	4603      	mov	r3, r0
 802b3f6:	2b00      	cmp	r3, #0
 802b3f8:	d001      	beq.n	802b3fe <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 802b3fa:	f7f6 fb01 	bl	8021a00 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 802b3fe:	2180      	movs	r1, #128	; 0x80
 802b400:	4808      	ldr	r0, [pc, #32]	; (802b424 <USBD_LL_Init+0x94>)
 802b402:	f7fa fd70 	bl	8025ee6 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 802b406:	2240      	movs	r2, #64	; 0x40
 802b408:	2100      	movs	r1, #0
 802b40a:	4806      	ldr	r0, [pc, #24]	; (802b424 <USBD_LL_Init+0x94>)
 802b40c:	f7fa fd24 	bl	8025e58 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 802b410:	2280      	movs	r2, #128	; 0x80
 802b412:	2101      	movs	r1, #1
 802b414:	4803      	ldr	r0, [pc, #12]	; (802b424 <USBD_LL_Init+0x94>)
 802b416:	f7fa fd1f 	bl	8025e58 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 802b41a:	2300      	movs	r3, #0
}
 802b41c:	4618      	mov	r0, r3
 802b41e:	3708      	adds	r7, #8
 802b420:	46bd      	mov	sp, r7
 802b422:	bd80      	pop	{r7, pc}
 802b424:	2000cf60 	.word	0x2000cf60

0802b428 <USBD_LL_DeInit>:
  * @brief  De-Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_DeInit(USBD_HandleTypeDef *pdev)
{
 802b428:	b580      	push	{r7, lr}
 802b42a:	b084      	sub	sp, #16
 802b42c:	af00      	add	r7, sp, #0
 802b42e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 802b430:	2300      	movs	r3, #0
 802b432:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 802b434:	2300      	movs	r3, #0
 802b436:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_DeInit(pdev->pData);
 802b438:	687b      	ldr	r3, [r7, #4]
 802b43a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 802b43e:	4618      	mov	r0, r3
 802b440:	f7f9 fba7 	bl	8024b92 <HAL_PCD_DeInit>
 802b444:	4603      	mov	r3, r0
 802b446:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 802b448:	7bfb      	ldrb	r3, [r7, #15]
 802b44a:	4618      	mov	r0, r3
 802b44c:	f000 f9b4 	bl	802b7b8 <USBD_Get_USB_Status>
 802b450:	4603      	mov	r3, r0
 802b452:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 802b454:	7bbb      	ldrb	r3, [r7, #14]
}
 802b456:	4618      	mov	r0, r3
 802b458:	3710      	adds	r7, #16
 802b45a:	46bd      	mov	sp, r7
 802b45c:	bd80      	pop	{r7, pc}

0802b45e <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 802b45e:	b580      	push	{r7, lr}
 802b460:	b084      	sub	sp, #16
 802b462:	af00      	add	r7, sp, #0
 802b464:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 802b466:	2300      	movs	r3, #0
 802b468:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 802b46a:	2300      	movs	r3, #0
 802b46c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 802b46e:	687b      	ldr	r3, [r7, #4]
 802b470:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 802b474:	4618      	mov	r0, r3
 802b476:	f7f9 fbaf 	bl	8024bd8 <HAL_PCD_Start>
 802b47a:	4603      	mov	r3, r0
 802b47c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 802b47e:	7bfb      	ldrb	r3, [r7, #15]
 802b480:	4618      	mov	r0, r3
 802b482:	f000 f999 	bl	802b7b8 <USBD_Get_USB_Status>
 802b486:	4603      	mov	r3, r0
 802b488:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 802b48a:	7bbb      	ldrb	r3, [r7, #14]
}
 802b48c:	4618      	mov	r0, r3
 802b48e:	3710      	adds	r7, #16
 802b490:	46bd      	mov	sp, r7
 802b492:	bd80      	pop	{r7, pc}

0802b494 <USBD_LL_Stop>:
  * @brief  Stops the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Stop(USBD_HandleTypeDef *pdev)
{
 802b494:	b580      	push	{r7, lr}
 802b496:	b084      	sub	sp, #16
 802b498:	af00      	add	r7, sp, #0
 802b49a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 802b49c:	2300      	movs	r3, #0
 802b49e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 802b4a0:	2300      	movs	r3, #0
 802b4a2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Stop(pdev->pData);
 802b4a4:	687b      	ldr	r3, [r7, #4]
 802b4a6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 802b4aa:	4618      	mov	r0, r3
 802b4ac:	f7f9 fbb6 	bl	8024c1c <HAL_PCD_Stop>
 802b4b0:	4603      	mov	r3, r0
 802b4b2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 802b4b4:	7bfb      	ldrb	r3, [r7, #15]
 802b4b6:	4618      	mov	r0, r3
 802b4b8:	f000 f97e 	bl	802b7b8 <USBD_Get_USB_Status>
 802b4bc:	4603      	mov	r3, r0
 802b4be:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 802b4c0:	7bbb      	ldrb	r3, [r7, #14]
}
 802b4c2:	4618      	mov	r0, r3
 802b4c4:	3710      	adds	r7, #16
 802b4c6:	46bd      	mov	sp, r7
 802b4c8:	bd80      	pop	{r7, pc}

0802b4ca <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 802b4ca:	b580      	push	{r7, lr}
 802b4cc:	b084      	sub	sp, #16
 802b4ce:	af00      	add	r7, sp, #0
 802b4d0:	6078      	str	r0, [r7, #4]
 802b4d2:	4608      	mov	r0, r1
 802b4d4:	4611      	mov	r1, r2
 802b4d6:	461a      	mov	r2, r3
 802b4d8:	4603      	mov	r3, r0
 802b4da:	70fb      	strb	r3, [r7, #3]
 802b4dc:	460b      	mov	r3, r1
 802b4de:	70bb      	strb	r3, [r7, #2]
 802b4e0:	4613      	mov	r3, r2
 802b4e2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 802b4e4:	2300      	movs	r3, #0
 802b4e6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 802b4e8:	2300      	movs	r3, #0
 802b4ea:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 802b4ec:	687b      	ldr	r3, [r7, #4]
 802b4ee:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 802b4f2:	78bb      	ldrb	r3, [r7, #2]
 802b4f4:	883a      	ldrh	r2, [r7, #0]
 802b4f6:	78f9      	ldrb	r1, [r7, #3]
 802b4f8:	f7fa f8a9 	bl	802564e <HAL_PCD_EP_Open>
 802b4fc:	4603      	mov	r3, r0
 802b4fe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 802b500:	7bfb      	ldrb	r3, [r7, #15]
 802b502:	4618      	mov	r0, r3
 802b504:	f000 f958 	bl	802b7b8 <USBD_Get_USB_Status>
 802b508:	4603      	mov	r3, r0
 802b50a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 802b50c:	7bbb      	ldrb	r3, [r7, #14]
}
 802b50e:	4618      	mov	r0, r3
 802b510:	3710      	adds	r7, #16
 802b512:	46bd      	mov	sp, r7
 802b514:	bd80      	pop	{r7, pc}

0802b516 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 802b516:	b580      	push	{r7, lr}
 802b518:	b084      	sub	sp, #16
 802b51a:	af00      	add	r7, sp, #0
 802b51c:	6078      	str	r0, [r7, #4]
 802b51e:	460b      	mov	r3, r1
 802b520:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 802b522:	2300      	movs	r3, #0
 802b524:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 802b526:	2300      	movs	r3, #0
 802b528:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 802b52a:	687b      	ldr	r3, [r7, #4]
 802b52c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 802b530:	78fa      	ldrb	r2, [r7, #3]
 802b532:	4611      	mov	r1, r2
 802b534:	4618      	mov	r0, r3
 802b536:	f7fa f8f2 	bl	802571e <HAL_PCD_EP_Close>
 802b53a:	4603      	mov	r3, r0
 802b53c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 802b53e:	7bfb      	ldrb	r3, [r7, #15]
 802b540:	4618      	mov	r0, r3
 802b542:	f000 f939 	bl	802b7b8 <USBD_Get_USB_Status>
 802b546:	4603      	mov	r3, r0
 802b548:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 802b54a:	7bbb      	ldrb	r3, [r7, #14]
}
 802b54c:	4618      	mov	r0, r3
 802b54e:	3710      	adds	r7, #16
 802b550:	46bd      	mov	sp, r7
 802b552:	bd80      	pop	{r7, pc}

0802b554 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 802b554:	b580      	push	{r7, lr}
 802b556:	b084      	sub	sp, #16
 802b558:	af00      	add	r7, sp, #0
 802b55a:	6078      	str	r0, [r7, #4]
 802b55c:	460b      	mov	r3, r1
 802b55e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 802b560:	2300      	movs	r3, #0
 802b562:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 802b564:	2300      	movs	r3, #0
 802b566:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 802b568:	687b      	ldr	r3, [r7, #4]
 802b56a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 802b56e:	78fa      	ldrb	r2, [r7, #3]
 802b570:	4611      	mov	r1, r2
 802b572:	4618      	mov	r0, r3
 802b574:	f7fa f9ca 	bl	802590c <HAL_PCD_EP_SetStall>
 802b578:	4603      	mov	r3, r0
 802b57a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 802b57c:	7bfb      	ldrb	r3, [r7, #15]
 802b57e:	4618      	mov	r0, r3
 802b580:	f000 f91a 	bl	802b7b8 <USBD_Get_USB_Status>
 802b584:	4603      	mov	r3, r0
 802b586:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 802b588:	7bbb      	ldrb	r3, [r7, #14]
}
 802b58a:	4618      	mov	r0, r3
 802b58c:	3710      	adds	r7, #16
 802b58e:	46bd      	mov	sp, r7
 802b590:	bd80      	pop	{r7, pc}

0802b592 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 802b592:	b580      	push	{r7, lr}
 802b594:	b084      	sub	sp, #16
 802b596:	af00      	add	r7, sp, #0
 802b598:	6078      	str	r0, [r7, #4]
 802b59a:	460b      	mov	r3, r1
 802b59c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 802b59e:	2300      	movs	r3, #0
 802b5a0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 802b5a2:	2300      	movs	r3, #0
 802b5a4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 802b5a6:	687b      	ldr	r3, [r7, #4]
 802b5a8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 802b5ac:	78fa      	ldrb	r2, [r7, #3]
 802b5ae:	4611      	mov	r1, r2
 802b5b0:	4618      	mov	r0, r3
 802b5b2:	f7fa fa0f 	bl	80259d4 <HAL_PCD_EP_ClrStall>
 802b5b6:	4603      	mov	r3, r0
 802b5b8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 802b5ba:	7bfb      	ldrb	r3, [r7, #15]
 802b5bc:	4618      	mov	r0, r3
 802b5be:	f000 f8fb 	bl	802b7b8 <USBD_Get_USB_Status>
 802b5c2:	4603      	mov	r3, r0
 802b5c4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 802b5c6:	7bbb      	ldrb	r3, [r7, #14]
}
 802b5c8:	4618      	mov	r0, r3
 802b5ca:	3710      	adds	r7, #16
 802b5cc:	46bd      	mov	sp, r7
 802b5ce:	bd80      	pop	{r7, pc}

0802b5d0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 802b5d0:	b480      	push	{r7}
 802b5d2:	b085      	sub	sp, #20
 802b5d4:	af00      	add	r7, sp, #0
 802b5d6:	6078      	str	r0, [r7, #4]
 802b5d8:	460b      	mov	r3, r1
 802b5da:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 802b5dc:	687b      	ldr	r3, [r7, #4]
 802b5de:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 802b5e2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 802b5e4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 802b5e8:	2b00      	cmp	r3, #0
 802b5ea:	da0b      	bge.n	802b604 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 802b5ec:	78fb      	ldrb	r3, [r7, #3]
 802b5ee:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 802b5f2:	68f9      	ldr	r1, [r7, #12]
 802b5f4:	4613      	mov	r3, r2
 802b5f6:	00db      	lsls	r3, r3, #3
 802b5f8:	4413      	add	r3, r2
 802b5fa:	009b      	lsls	r3, r3, #2
 802b5fc:	440b      	add	r3, r1
 802b5fe:	333e      	adds	r3, #62	; 0x3e
 802b600:	781b      	ldrb	r3, [r3, #0]
 802b602:	e00b      	b.n	802b61c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 802b604:	78fb      	ldrb	r3, [r7, #3]
 802b606:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 802b60a:	68f9      	ldr	r1, [r7, #12]
 802b60c:	4613      	mov	r3, r2
 802b60e:	00db      	lsls	r3, r3, #3
 802b610:	4413      	add	r3, r2
 802b612:	009b      	lsls	r3, r3, #2
 802b614:	440b      	add	r3, r1
 802b616:	f203 237e 	addw	r3, r3, #638	; 0x27e
 802b61a:	781b      	ldrb	r3, [r3, #0]
  }
}
 802b61c:	4618      	mov	r0, r3
 802b61e:	3714      	adds	r7, #20
 802b620:	46bd      	mov	sp, r7
 802b622:	f85d 7b04 	ldr.w	r7, [sp], #4
 802b626:	4770      	bx	lr

0802b628 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 802b628:	b580      	push	{r7, lr}
 802b62a:	b084      	sub	sp, #16
 802b62c:	af00      	add	r7, sp, #0
 802b62e:	6078      	str	r0, [r7, #4]
 802b630:	460b      	mov	r3, r1
 802b632:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 802b634:	2300      	movs	r3, #0
 802b636:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 802b638:	2300      	movs	r3, #0
 802b63a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 802b63c:	687b      	ldr	r3, [r7, #4]
 802b63e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 802b642:	78fa      	ldrb	r2, [r7, #3]
 802b644:	4611      	mov	r1, r2
 802b646:	4618      	mov	r0, r3
 802b648:	f7f9 ffdc 	bl	8025604 <HAL_PCD_SetAddress>
 802b64c:	4603      	mov	r3, r0
 802b64e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 802b650:	7bfb      	ldrb	r3, [r7, #15]
 802b652:	4618      	mov	r0, r3
 802b654:	f000 f8b0 	bl	802b7b8 <USBD_Get_USB_Status>
 802b658:	4603      	mov	r3, r0
 802b65a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 802b65c:	7bbb      	ldrb	r3, [r7, #14]
}
 802b65e:	4618      	mov	r0, r3
 802b660:	3710      	adds	r7, #16
 802b662:	46bd      	mov	sp, r7
 802b664:	bd80      	pop	{r7, pc}

0802b666 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 802b666:	b580      	push	{r7, lr}
 802b668:	b086      	sub	sp, #24
 802b66a:	af00      	add	r7, sp, #0
 802b66c:	60f8      	str	r0, [r7, #12]
 802b66e:	607a      	str	r2, [r7, #4]
 802b670:	603b      	str	r3, [r7, #0]
 802b672:	460b      	mov	r3, r1
 802b674:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 802b676:	2300      	movs	r3, #0
 802b678:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 802b67a:	2300      	movs	r3, #0
 802b67c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 802b67e:	68fb      	ldr	r3, [r7, #12]
 802b680:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 802b684:	7af9      	ldrb	r1, [r7, #11]
 802b686:	683b      	ldr	r3, [r7, #0]
 802b688:	687a      	ldr	r2, [r7, #4]
 802b68a:	f7fa f8f5 	bl	8025878 <HAL_PCD_EP_Transmit>
 802b68e:	4603      	mov	r3, r0
 802b690:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 802b692:	7dfb      	ldrb	r3, [r7, #23]
 802b694:	4618      	mov	r0, r3
 802b696:	f000 f88f 	bl	802b7b8 <USBD_Get_USB_Status>
 802b69a:	4603      	mov	r3, r0
 802b69c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 802b69e:	7dbb      	ldrb	r3, [r7, #22]
}
 802b6a0:	4618      	mov	r0, r3
 802b6a2:	3718      	adds	r7, #24
 802b6a4:	46bd      	mov	sp, r7
 802b6a6:	bd80      	pop	{r7, pc}

0802b6a8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 802b6a8:	b580      	push	{r7, lr}
 802b6aa:	b086      	sub	sp, #24
 802b6ac:	af00      	add	r7, sp, #0
 802b6ae:	60f8      	str	r0, [r7, #12]
 802b6b0:	607a      	str	r2, [r7, #4]
 802b6b2:	603b      	str	r3, [r7, #0]
 802b6b4:	460b      	mov	r3, r1
 802b6b6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 802b6b8:	2300      	movs	r3, #0
 802b6ba:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 802b6bc:	2300      	movs	r3, #0
 802b6be:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 802b6c0:	68fb      	ldr	r3, [r7, #12]
 802b6c2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 802b6c6:	7af9      	ldrb	r1, [r7, #11]
 802b6c8:	683b      	ldr	r3, [r7, #0]
 802b6ca:	687a      	ldr	r2, [r7, #4]
 802b6cc:	f7fa f871 	bl	80257b2 <HAL_PCD_EP_Receive>
 802b6d0:	4603      	mov	r3, r0
 802b6d2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 802b6d4:	7dfb      	ldrb	r3, [r7, #23]
 802b6d6:	4618      	mov	r0, r3
 802b6d8:	f000 f86e 	bl	802b7b8 <USBD_Get_USB_Status>
 802b6dc:	4603      	mov	r3, r0
 802b6de:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 802b6e0:	7dbb      	ldrb	r3, [r7, #22]
}
 802b6e2:	4618      	mov	r0, r3
 802b6e4:	3718      	adds	r7, #24
 802b6e6:	46bd      	mov	sp, r7
 802b6e8:	bd80      	pop	{r7, pc}

0802b6ea <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 802b6ea:	b580      	push	{r7, lr}
 802b6ec:	b082      	sub	sp, #8
 802b6ee:	af00      	add	r7, sp, #0
 802b6f0:	6078      	str	r0, [r7, #4]
 802b6f2:	460b      	mov	r3, r1
 802b6f4:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 802b6f6:	687b      	ldr	r3, [r7, #4]
 802b6f8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 802b6fc:	78fa      	ldrb	r2, [r7, #3]
 802b6fe:	4611      	mov	r1, r2
 802b700:	4618      	mov	r0, r3
 802b702:	f7fa f8a1 	bl	8025848 <HAL_PCD_EP_GetRxCount>
 802b706:	4603      	mov	r3, r0
}
 802b708:	4618      	mov	r0, r3
 802b70a:	3708      	adds	r7, #8
 802b70c:	46bd      	mov	sp, r7
 802b70e:	bd80      	pop	{r7, pc}

0802b710 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 802b710:	b580      	push	{r7, lr}
 802b712:	b082      	sub	sp, #8
 802b714:	af00      	add	r7, sp, #0
 802b716:	6078      	str	r0, [r7, #4]
 802b718:	460b      	mov	r3, r1
 802b71a:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 802b71c:	78fb      	ldrb	r3, [r7, #3]
 802b71e:	2b00      	cmp	r3, #0
 802b720:	d002      	beq.n	802b728 <HAL_PCDEx_LPM_Callback+0x18>
 802b722:	2b01      	cmp	r3, #1
 802b724:	d01f      	beq.n	802b766 <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 802b726:	e03b      	b.n	802b7a0 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 802b728:	687b      	ldr	r3, [r7, #4]
 802b72a:	6a1b      	ldr	r3, [r3, #32]
 802b72c:	2b00      	cmp	r3, #0
 802b72e:	d007      	beq.n	802b740 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 802b730:	f000 f83c 	bl	802b7ac <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 802b734:	4b1c      	ldr	r3, [pc, #112]	; (802b7a8 <HAL_PCDEx_LPM_Callback+0x98>)
 802b736:	691b      	ldr	r3, [r3, #16]
 802b738:	4a1b      	ldr	r2, [pc, #108]	; (802b7a8 <HAL_PCDEx_LPM_Callback+0x98>)
 802b73a:	f023 0306 	bic.w	r3, r3, #6
 802b73e:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 802b740:	687b      	ldr	r3, [r7, #4]
 802b742:	681b      	ldr	r3, [r3, #0]
 802b744:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 802b748:	681b      	ldr	r3, [r3, #0]
 802b74a:	687a      	ldr	r2, [r7, #4]
 802b74c:	6812      	ldr	r2, [r2, #0]
 802b74e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 802b752:	f023 0301 	bic.w	r3, r3, #1
 802b756:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 802b758:	687b      	ldr	r3, [r7, #4]
 802b75a:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 802b75e:	4618      	mov	r0, r3
 802b760:	f7fe f9be 	bl	8029ae0 <USBD_LL_Resume>
    break;
 802b764:	e01c      	b.n	802b7a0 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 802b766:	687b      	ldr	r3, [r7, #4]
 802b768:	681b      	ldr	r3, [r3, #0]
 802b76a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 802b76e:	681b      	ldr	r3, [r3, #0]
 802b770:	687a      	ldr	r2, [r7, #4]
 802b772:	6812      	ldr	r2, [r2, #0]
 802b774:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 802b778:	f043 0301 	orr.w	r3, r3, #1
 802b77c:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 802b77e:	687b      	ldr	r3, [r7, #4]
 802b780:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 802b784:	4618      	mov	r0, r3
 802b786:	f7fe f995 	bl	8029ab4 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 802b78a:	687b      	ldr	r3, [r7, #4]
 802b78c:	6a1b      	ldr	r3, [r3, #32]
 802b78e:	2b00      	cmp	r3, #0
 802b790:	d005      	beq.n	802b79e <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 802b792:	4b05      	ldr	r3, [pc, #20]	; (802b7a8 <HAL_PCDEx_LPM_Callback+0x98>)
 802b794:	691b      	ldr	r3, [r3, #16]
 802b796:	4a04      	ldr	r2, [pc, #16]	; (802b7a8 <HAL_PCDEx_LPM_Callback+0x98>)
 802b798:	f043 0306 	orr.w	r3, r3, #6
 802b79c:	6113      	str	r3, [r2, #16]
    break;
 802b79e:	bf00      	nop
}
 802b7a0:	bf00      	nop
 802b7a2:	3708      	adds	r7, #8
 802b7a4:	46bd      	mov	sp, r7
 802b7a6:	bd80      	pop	{r7, pc}
 802b7a8:	e000ed00 	.word	0xe000ed00

0802b7ac <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 802b7ac:	b580      	push	{r7, lr}
 802b7ae:	af00      	add	r7, sp, #0
  SystemClock_Config();
 802b7b0:	f7f6 f84e 	bl	8021850 <SystemClock_Config>
}
 802b7b4:	bf00      	nop
 802b7b6:	bd80      	pop	{r7, pc}

0802b7b8 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 802b7b8:	b480      	push	{r7}
 802b7ba:	b085      	sub	sp, #20
 802b7bc:	af00      	add	r7, sp, #0
 802b7be:	4603      	mov	r3, r0
 802b7c0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 802b7c2:	2300      	movs	r3, #0
 802b7c4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 802b7c6:	79fb      	ldrb	r3, [r7, #7]
 802b7c8:	2b03      	cmp	r3, #3
 802b7ca:	d817      	bhi.n	802b7fc <USBD_Get_USB_Status+0x44>
 802b7cc:	a201      	add	r2, pc, #4	; (adr r2, 802b7d4 <USBD_Get_USB_Status+0x1c>)
 802b7ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802b7d2:	bf00      	nop
 802b7d4:	0802b7e5 	.word	0x0802b7e5
 802b7d8:	0802b7eb 	.word	0x0802b7eb
 802b7dc:	0802b7f1 	.word	0x0802b7f1
 802b7e0:	0802b7f7 	.word	0x0802b7f7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 802b7e4:	2300      	movs	r3, #0
 802b7e6:	73fb      	strb	r3, [r7, #15]
    break;
 802b7e8:	e00b      	b.n	802b802 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 802b7ea:	2303      	movs	r3, #3
 802b7ec:	73fb      	strb	r3, [r7, #15]
    break;
 802b7ee:	e008      	b.n	802b802 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 802b7f0:	2301      	movs	r3, #1
 802b7f2:	73fb      	strb	r3, [r7, #15]
    break;
 802b7f4:	e005      	b.n	802b802 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 802b7f6:	2303      	movs	r3, #3
 802b7f8:	73fb      	strb	r3, [r7, #15]
    break;
 802b7fa:	e002      	b.n	802b802 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 802b7fc:	2303      	movs	r3, #3
 802b7fe:	73fb      	strb	r3, [r7, #15]
    break;
 802b800:	bf00      	nop
  }
  return usb_status;
 802b802:	7bfb      	ldrb	r3, [r7, #15]
}
 802b804:	4618      	mov	r0, r3
 802b806:	3714      	adds	r7, #20
 802b808:	46bd      	mov	sp, r7
 802b80a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802b80e:	4770      	bx	lr

0802b810 <malloc>:
 802b810:	4b02      	ldr	r3, [pc, #8]	; (802b81c <malloc+0xc>)
 802b812:	4601      	mov	r1, r0
 802b814:	6818      	ldr	r0, [r3, #0]
 802b816:	f000 b82b 	b.w	802b870 <_malloc_r>
 802b81a:	bf00      	nop
 802b81c:	20000160 	.word	0x20000160

0802b820 <free>:
 802b820:	4b02      	ldr	r3, [pc, #8]	; (802b82c <free+0xc>)
 802b822:	4601      	mov	r1, r0
 802b824:	6818      	ldr	r0, [r3, #0]
 802b826:	f000 b94b 	b.w	802bac0 <_free_r>
 802b82a:	bf00      	nop
 802b82c:	20000160 	.word	0x20000160

0802b830 <sbrk_aligned>:
 802b830:	b570      	push	{r4, r5, r6, lr}
 802b832:	4e0e      	ldr	r6, [pc, #56]	; (802b86c <sbrk_aligned+0x3c>)
 802b834:	460c      	mov	r4, r1
 802b836:	6831      	ldr	r1, [r6, #0]
 802b838:	4605      	mov	r5, r0
 802b83a:	b911      	cbnz	r1, 802b842 <sbrk_aligned+0x12>
 802b83c:	f000 f8f6 	bl	802ba2c <_sbrk_r>
 802b840:	6030      	str	r0, [r6, #0]
 802b842:	4621      	mov	r1, r4
 802b844:	4628      	mov	r0, r5
 802b846:	f000 f8f1 	bl	802ba2c <_sbrk_r>
 802b84a:	1c43      	adds	r3, r0, #1
 802b84c:	d00a      	beq.n	802b864 <sbrk_aligned+0x34>
 802b84e:	1cc4      	adds	r4, r0, #3
 802b850:	f024 0403 	bic.w	r4, r4, #3
 802b854:	42a0      	cmp	r0, r4
 802b856:	d007      	beq.n	802b868 <sbrk_aligned+0x38>
 802b858:	1a21      	subs	r1, r4, r0
 802b85a:	4628      	mov	r0, r5
 802b85c:	f000 f8e6 	bl	802ba2c <_sbrk_r>
 802b860:	3001      	adds	r0, #1
 802b862:	d101      	bne.n	802b868 <sbrk_aligned+0x38>
 802b864:	f04f 34ff 	mov.w	r4, #4294967295
 802b868:	4620      	mov	r0, r4
 802b86a:	bd70      	pop	{r4, r5, r6, pc}
 802b86c:	2000d46c 	.word	0x2000d46c

0802b870 <_malloc_r>:
 802b870:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802b874:	1ccd      	adds	r5, r1, #3
 802b876:	f025 0503 	bic.w	r5, r5, #3
 802b87a:	3508      	adds	r5, #8
 802b87c:	2d0c      	cmp	r5, #12
 802b87e:	bf38      	it	cc
 802b880:	250c      	movcc	r5, #12
 802b882:	2d00      	cmp	r5, #0
 802b884:	4607      	mov	r7, r0
 802b886:	db01      	blt.n	802b88c <_malloc_r+0x1c>
 802b888:	42a9      	cmp	r1, r5
 802b88a:	d905      	bls.n	802b898 <_malloc_r+0x28>
 802b88c:	230c      	movs	r3, #12
 802b88e:	603b      	str	r3, [r7, #0]
 802b890:	2600      	movs	r6, #0
 802b892:	4630      	mov	r0, r6
 802b894:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802b898:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 802b96c <_malloc_r+0xfc>
 802b89c:	f000 f868 	bl	802b970 <__malloc_lock>
 802b8a0:	f8d8 3000 	ldr.w	r3, [r8]
 802b8a4:	461c      	mov	r4, r3
 802b8a6:	bb5c      	cbnz	r4, 802b900 <_malloc_r+0x90>
 802b8a8:	4629      	mov	r1, r5
 802b8aa:	4638      	mov	r0, r7
 802b8ac:	f7ff ffc0 	bl	802b830 <sbrk_aligned>
 802b8b0:	1c43      	adds	r3, r0, #1
 802b8b2:	4604      	mov	r4, r0
 802b8b4:	d155      	bne.n	802b962 <_malloc_r+0xf2>
 802b8b6:	f8d8 4000 	ldr.w	r4, [r8]
 802b8ba:	4626      	mov	r6, r4
 802b8bc:	2e00      	cmp	r6, #0
 802b8be:	d145      	bne.n	802b94c <_malloc_r+0xdc>
 802b8c0:	2c00      	cmp	r4, #0
 802b8c2:	d048      	beq.n	802b956 <_malloc_r+0xe6>
 802b8c4:	6823      	ldr	r3, [r4, #0]
 802b8c6:	4631      	mov	r1, r6
 802b8c8:	4638      	mov	r0, r7
 802b8ca:	eb04 0903 	add.w	r9, r4, r3
 802b8ce:	f000 f8ad 	bl	802ba2c <_sbrk_r>
 802b8d2:	4581      	cmp	r9, r0
 802b8d4:	d13f      	bne.n	802b956 <_malloc_r+0xe6>
 802b8d6:	6821      	ldr	r1, [r4, #0]
 802b8d8:	1a6d      	subs	r5, r5, r1
 802b8da:	4629      	mov	r1, r5
 802b8dc:	4638      	mov	r0, r7
 802b8de:	f7ff ffa7 	bl	802b830 <sbrk_aligned>
 802b8e2:	3001      	adds	r0, #1
 802b8e4:	d037      	beq.n	802b956 <_malloc_r+0xe6>
 802b8e6:	6823      	ldr	r3, [r4, #0]
 802b8e8:	442b      	add	r3, r5
 802b8ea:	6023      	str	r3, [r4, #0]
 802b8ec:	f8d8 3000 	ldr.w	r3, [r8]
 802b8f0:	2b00      	cmp	r3, #0
 802b8f2:	d038      	beq.n	802b966 <_malloc_r+0xf6>
 802b8f4:	685a      	ldr	r2, [r3, #4]
 802b8f6:	42a2      	cmp	r2, r4
 802b8f8:	d12b      	bne.n	802b952 <_malloc_r+0xe2>
 802b8fa:	2200      	movs	r2, #0
 802b8fc:	605a      	str	r2, [r3, #4]
 802b8fe:	e00f      	b.n	802b920 <_malloc_r+0xb0>
 802b900:	6822      	ldr	r2, [r4, #0]
 802b902:	1b52      	subs	r2, r2, r5
 802b904:	d41f      	bmi.n	802b946 <_malloc_r+0xd6>
 802b906:	2a0b      	cmp	r2, #11
 802b908:	d917      	bls.n	802b93a <_malloc_r+0xca>
 802b90a:	1961      	adds	r1, r4, r5
 802b90c:	42a3      	cmp	r3, r4
 802b90e:	6025      	str	r5, [r4, #0]
 802b910:	bf18      	it	ne
 802b912:	6059      	strne	r1, [r3, #4]
 802b914:	6863      	ldr	r3, [r4, #4]
 802b916:	bf08      	it	eq
 802b918:	f8c8 1000 	streq.w	r1, [r8]
 802b91c:	5162      	str	r2, [r4, r5]
 802b91e:	604b      	str	r3, [r1, #4]
 802b920:	4638      	mov	r0, r7
 802b922:	f104 060b 	add.w	r6, r4, #11
 802b926:	f000 f829 	bl	802b97c <__malloc_unlock>
 802b92a:	f026 0607 	bic.w	r6, r6, #7
 802b92e:	1d23      	adds	r3, r4, #4
 802b930:	1af2      	subs	r2, r6, r3
 802b932:	d0ae      	beq.n	802b892 <_malloc_r+0x22>
 802b934:	1b9b      	subs	r3, r3, r6
 802b936:	50a3      	str	r3, [r4, r2]
 802b938:	e7ab      	b.n	802b892 <_malloc_r+0x22>
 802b93a:	42a3      	cmp	r3, r4
 802b93c:	6862      	ldr	r2, [r4, #4]
 802b93e:	d1dd      	bne.n	802b8fc <_malloc_r+0x8c>
 802b940:	f8c8 2000 	str.w	r2, [r8]
 802b944:	e7ec      	b.n	802b920 <_malloc_r+0xb0>
 802b946:	4623      	mov	r3, r4
 802b948:	6864      	ldr	r4, [r4, #4]
 802b94a:	e7ac      	b.n	802b8a6 <_malloc_r+0x36>
 802b94c:	4634      	mov	r4, r6
 802b94e:	6876      	ldr	r6, [r6, #4]
 802b950:	e7b4      	b.n	802b8bc <_malloc_r+0x4c>
 802b952:	4613      	mov	r3, r2
 802b954:	e7cc      	b.n	802b8f0 <_malloc_r+0x80>
 802b956:	230c      	movs	r3, #12
 802b958:	603b      	str	r3, [r7, #0]
 802b95a:	4638      	mov	r0, r7
 802b95c:	f000 f80e 	bl	802b97c <__malloc_unlock>
 802b960:	e797      	b.n	802b892 <_malloc_r+0x22>
 802b962:	6025      	str	r5, [r4, #0]
 802b964:	e7dc      	b.n	802b920 <_malloc_r+0xb0>
 802b966:	605b      	str	r3, [r3, #4]
 802b968:	deff      	udf	#255	; 0xff
 802b96a:	bf00      	nop
 802b96c:	2000d468 	.word	0x2000d468

0802b970 <__malloc_lock>:
 802b970:	4801      	ldr	r0, [pc, #4]	; (802b978 <__malloc_lock+0x8>)
 802b972:	f000 b895 	b.w	802baa0 <__retarget_lock_acquire_recursive>
 802b976:	bf00      	nop
 802b978:	2000d5ac 	.word	0x2000d5ac

0802b97c <__malloc_unlock>:
 802b97c:	4801      	ldr	r0, [pc, #4]	; (802b984 <__malloc_unlock+0x8>)
 802b97e:	f000 b890 	b.w	802baa2 <__retarget_lock_release_recursive>
 802b982:	bf00      	nop
 802b984:	2000d5ac 	.word	0x2000d5ac

0802b988 <_vsniprintf_r>:
 802b988:	b530      	push	{r4, r5, lr}
 802b98a:	4614      	mov	r4, r2
 802b98c:	2c00      	cmp	r4, #0
 802b98e:	b09b      	sub	sp, #108	; 0x6c
 802b990:	4605      	mov	r5, r0
 802b992:	461a      	mov	r2, r3
 802b994:	da05      	bge.n	802b9a2 <_vsniprintf_r+0x1a>
 802b996:	238b      	movs	r3, #139	; 0x8b
 802b998:	6003      	str	r3, [r0, #0]
 802b99a:	f04f 30ff 	mov.w	r0, #4294967295
 802b99e:	b01b      	add	sp, #108	; 0x6c
 802b9a0:	bd30      	pop	{r4, r5, pc}
 802b9a2:	f44f 7302 	mov.w	r3, #520	; 0x208
 802b9a6:	f8ad 300c 	strh.w	r3, [sp, #12]
 802b9aa:	bf14      	ite	ne
 802b9ac:	f104 33ff 	addne.w	r3, r4, #4294967295
 802b9b0:	4623      	moveq	r3, r4
 802b9b2:	9302      	str	r3, [sp, #8]
 802b9b4:	9305      	str	r3, [sp, #20]
 802b9b6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 802b9ba:	9100      	str	r1, [sp, #0]
 802b9bc:	9104      	str	r1, [sp, #16]
 802b9be:	f8ad 300e 	strh.w	r3, [sp, #14]
 802b9c2:	4669      	mov	r1, sp
 802b9c4:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 802b9c6:	f000 f921 	bl	802bc0c <_svfiprintf_r>
 802b9ca:	1c43      	adds	r3, r0, #1
 802b9cc:	bfbc      	itt	lt
 802b9ce:	238b      	movlt	r3, #139	; 0x8b
 802b9d0:	602b      	strlt	r3, [r5, #0]
 802b9d2:	2c00      	cmp	r4, #0
 802b9d4:	d0e3      	beq.n	802b99e <_vsniprintf_r+0x16>
 802b9d6:	9b00      	ldr	r3, [sp, #0]
 802b9d8:	2200      	movs	r2, #0
 802b9da:	701a      	strb	r2, [r3, #0]
 802b9dc:	e7df      	b.n	802b99e <_vsniprintf_r+0x16>
	...

0802b9e0 <vsniprintf>:
 802b9e0:	b507      	push	{r0, r1, r2, lr}
 802b9e2:	9300      	str	r3, [sp, #0]
 802b9e4:	4613      	mov	r3, r2
 802b9e6:	460a      	mov	r2, r1
 802b9e8:	4601      	mov	r1, r0
 802b9ea:	4803      	ldr	r0, [pc, #12]	; (802b9f8 <vsniprintf+0x18>)
 802b9ec:	6800      	ldr	r0, [r0, #0]
 802b9ee:	f7ff ffcb 	bl	802b988 <_vsniprintf_r>
 802b9f2:	b003      	add	sp, #12
 802b9f4:	f85d fb04 	ldr.w	pc, [sp], #4
 802b9f8:	20000160 	.word	0x20000160

0802b9fc <memcmp>:
 802b9fc:	b510      	push	{r4, lr}
 802b9fe:	3901      	subs	r1, #1
 802ba00:	4402      	add	r2, r0
 802ba02:	4290      	cmp	r0, r2
 802ba04:	d101      	bne.n	802ba0a <memcmp+0xe>
 802ba06:	2000      	movs	r0, #0
 802ba08:	e005      	b.n	802ba16 <memcmp+0x1a>
 802ba0a:	7803      	ldrb	r3, [r0, #0]
 802ba0c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 802ba10:	42a3      	cmp	r3, r4
 802ba12:	d001      	beq.n	802ba18 <memcmp+0x1c>
 802ba14:	1b18      	subs	r0, r3, r4
 802ba16:	bd10      	pop	{r4, pc}
 802ba18:	3001      	adds	r0, #1
 802ba1a:	e7f2      	b.n	802ba02 <memcmp+0x6>

0802ba1c <memset>:
 802ba1c:	4402      	add	r2, r0
 802ba1e:	4603      	mov	r3, r0
 802ba20:	4293      	cmp	r3, r2
 802ba22:	d100      	bne.n	802ba26 <memset+0xa>
 802ba24:	4770      	bx	lr
 802ba26:	f803 1b01 	strb.w	r1, [r3], #1
 802ba2a:	e7f9      	b.n	802ba20 <memset+0x4>

0802ba2c <_sbrk_r>:
 802ba2c:	b538      	push	{r3, r4, r5, lr}
 802ba2e:	4d06      	ldr	r5, [pc, #24]	; (802ba48 <_sbrk_r+0x1c>)
 802ba30:	2300      	movs	r3, #0
 802ba32:	4604      	mov	r4, r0
 802ba34:	4608      	mov	r0, r1
 802ba36:	602b      	str	r3, [r5, #0]
 802ba38:	f7f6 f99c 	bl	8021d74 <_sbrk>
 802ba3c:	1c43      	adds	r3, r0, #1
 802ba3e:	d102      	bne.n	802ba46 <_sbrk_r+0x1a>
 802ba40:	682b      	ldr	r3, [r5, #0]
 802ba42:	b103      	cbz	r3, 802ba46 <_sbrk_r+0x1a>
 802ba44:	6023      	str	r3, [r4, #0]
 802ba46:	bd38      	pop	{r3, r4, r5, pc}
 802ba48:	2000d5a8 	.word	0x2000d5a8

0802ba4c <__errno>:
 802ba4c:	4b01      	ldr	r3, [pc, #4]	; (802ba54 <__errno+0x8>)
 802ba4e:	6818      	ldr	r0, [r3, #0]
 802ba50:	4770      	bx	lr
 802ba52:	bf00      	nop
 802ba54:	20000160 	.word	0x20000160

0802ba58 <__libc_init_array>:
 802ba58:	b570      	push	{r4, r5, r6, lr}
 802ba5a:	4d0d      	ldr	r5, [pc, #52]	; (802ba90 <__libc_init_array+0x38>)
 802ba5c:	4c0d      	ldr	r4, [pc, #52]	; (802ba94 <__libc_init_array+0x3c>)
 802ba5e:	1b64      	subs	r4, r4, r5
 802ba60:	10a4      	asrs	r4, r4, #2
 802ba62:	2600      	movs	r6, #0
 802ba64:	42a6      	cmp	r6, r4
 802ba66:	d109      	bne.n	802ba7c <__libc_init_array+0x24>
 802ba68:	4d0b      	ldr	r5, [pc, #44]	; (802ba98 <__libc_init_array+0x40>)
 802ba6a:	4c0c      	ldr	r4, [pc, #48]	; (802ba9c <__libc_init_array+0x44>)
 802ba6c:	f000 fbae 	bl	802c1cc <_init>
 802ba70:	1b64      	subs	r4, r4, r5
 802ba72:	10a4      	asrs	r4, r4, #2
 802ba74:	2600      	movs	r6, #0
 802ba76:	42a6      	cmp	r6, r4
 802ba78:	d105      	bne.n	802ba86 <__libc_init_array+0x2e>
 802ba7a:	bd70      	pop	{r4, r5, r6, pc}
 802ba7c:	f855 3b04 	ldr.w	r3, [r5], #4
 802ba80:	4798      	blx	r3
 802ba82:	3601      	adds	r6, #1
 802ba84:	e7ee      	b.n	802ba64 <__libc_init_array+0xc>
 802ba86:	f855 3b04 	ldr.w	r3, [r5], #4
 802ba8a:	4798      	blx	r3
 802ba8c:	3601      	adds	r6, #1
 802ba8e:	e7f2      	b.n	802ba76 <__libc_init_array+0x1e>
 802ba90:	08037a2c 	.word	0x08037a2c
 802ba94:	08037a2c 	.word	0x08037a2c
 802ba98:	08037a2c 	.word	0x08037a2c
 802ba9c:	08037a30 	.word	0x08037a30

0802baa0 <__retarget_lock_acquire_recursive>:
 802baa0:	4770      	bx	lr

0802baa2 <__retarget_lock_release_recursive>:
 802baa2:	4770      	bx	lr

0802baa4 <memcpy>:
 802baa4:	440a      	add	r2, r1
 802baa6:	4291      	cmp	r1, r2
 802baa8:	f100 33ff 	add.w	r3, r0, #4294967295
 802baac:	d100      	bne.n	802bab0 <memcpy+0xc>
 802baae:	4770      	bx	lr
 802bab0:	b510      	push	{r4, lr}
 802bab2:	f811 4b01 	ldrb.w	r4, [r1], #1
 802bab6:	f803 4f01 	strb.w	r4, [r3, #1]!
 802baba:	4291      	cmp	r1, r2
 802babc:	d1f9      	bne.n	802bab2 <memcpy+0xe>
 802babe:	bd10      	pop	{r4, pc}

0802bac0 <_free_r>:
 802bac0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 802bac2:	2900      	cmp	r1, #0
 802bac4:	d044      	beq.n	802bb50 <_free_r+0x90>
 802bac6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 802baca:	9001      	str	r0, [sp, #4]
 802bacc:	2b00      	cmp	r3, #0
 802bace:	f1a1 0404 	sub.w	r4, r1, #4
 802bad2:	bfb8      	it	lt
 802bad4:	18e4      	addlt	r4, r4, r3
 802bad6:	f7ff ff4b 	bl	802b970 <__malloc_lock>
 802bada:	4a1e      	ldr	r2, [pc, #120]	; (802bb54 <_free_r+0x94>)
 802badc:	9801      	ldr	r0, [sp, #4]
 802bade:	6813      	ldr	r3, [r2, #0]
 802bae0:	b933      	cbnz	r3, 802baf0 <_free_r+0x30>
 802bae2:	6063      	str	r3, [r4, #4]
 802bae4:	6014      	str	r4, [r2, #0]
 802bae6:	b003      	add	sp, #12
 802bae8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 802baec:	f7ff bf46 	b.w	802b97c <__malloc_unlock>
 802baf0:	42a3      	cmp	r3, r4
 802baf2:	d908      	bls.n	802bb06 <_free_r+0x46>
 802baf4:	6825      	ldr	r5, [r4, #0]
 802baf6:	1961      	adds	r1, r4, r5
 802baf8:	428b      	cmp	r3, r1
 802bafa:	bf01      	itttt	eq
 802bafc:	6819      	ldreq	r1, [r3, #0]
 802bafe:	685b      	ldreq	r3, [r3, #4]
 802bb00:	1949      	addeq	r1, r1, r5
 802bb02:	6021      	streq	r1, [r4, #0]
 802bb04:	e7ed      	b.n	802bae2 <_free_r+0x22>
 802bb06:	461a      	mov	r2, r3
 802bb08:	685b      	ldr	r3, [r3, #4]
 802bb0a:	b10b      	cbz	r3, 802bb10 <_free_r+0x50>
 802bb0c:	42a3      	cmp	r3, r4
 802bb0e:	d9fa      	bls.n	802bb06 <_free_r+0x46>
 802bb10:	6811      	ldr	r1, [r2, #0]
 802bb12:	1855      	adds	r5, r2, r1
 802bb14:	42a5      	cmp	r5, r4
 802bb16:	d10b      	bne.n	802bb30 <_free_r+0x70>
 802bb18:	6824      	ldr	r4, [r4, #0]
 802bb1a:	4421      	add	r1, r4
 802bb1c:	1854      	adds	r4, r2, r1
 802bb1e:	42a3      	cmp	r3, r4
 802bb20:	6011      	str	r1, [r2, #0]
 802bb22:	d1e0      	bne.n	802bae6 <_free_r+0x26>
 802bb24:	681c      	ldr	r4, [r3, #0]
 802bb26:	685b      	ldr	r3, [r3, #4]
 802bb28:	6053      	str	r3, [r2, #4]
 802bb2a:	440c      	add	r4, r1
 802bb2c:	6014      	str	r4, [r2, #0]
 802bb2e:	e7da      	b.n	802bae6 <_free_r+0x26>
 802bb30:	d902      	bls.n	802bb38 <_free_r+0x78>
 802bb32:	230c      	movs	r3, #12
 802bb34:	6003      	str	r3, [r0, #0]
 802bb36:	e7d6      	b.n	802bae6 <_free_r+0x26>
 802bb38:	6825      	ldr	r5, [r4, #0]
 802bb3a:	1961      	adds	r1, r4, r5
 802bb3c:	428b      	cmp	r3, r1
 802bb3e:	bf04      	itt	eq
 802bb40:	6819      	ldreq	r1, [r3, #0]
 802bb42:	685b      	ldreq	r3, [r3, #4]
 802bb44:	6063      	str	r3, [r4, #4]
 802bb46:	bf04      	itt	eq
 802bb48:	1949      	addeq	r1, r1, r5
 802bb4a:	6021      	streq	r1, [r4, #0]
 802bb4c:	6054      	str	r4, [r2, #4]
 802bb4e:	e7ca      	b.n	802bae6 <_free_r+0x26>
 802bb50:	b003      	add	sp, #12
 802bb52:	bd30      	pop	{r4, r5, pc}
 802bb54:	2000d468 	.word	0x2000d468

0802bb58 <__ssputs_r>:
 802bb58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802bb5c:	688e      	ldr	r6, [r1, #8]
 802bb5e:	461f      	mov	r7, r3
 802bb60:	42be      	cmp	r6, r7
 802bb62:	680b      	ldr	r3, [r1, #0]
 802bb64:	4682      	mov	sl, r0
 802bb66:	460c      	mov	r4, r1
 802bb68:	4690      	mov	r8, r2
 802bb6a:	d82c      	bhi.n	802bbc6 <__ssputs_r+0x6e>
 802bb6c:	898a      	ldrh	r2, [r1, #12]
 802bb6e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 802bb72:	d026      	beq.n	802bbc2 <__ssputs_r+0x6a>
 802bb74:	6965      	ldr	r5, [r4, #20]
 802bb76:	6909      	ldr	r1, [r1, #16]
 802bb78:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 802bb7c:	eba3 0901 	sub.w	r9, r3, r1
 802bb80:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 802bb84:	1c7b      	adds	r3, r7, #1
 802bb86:	444b      	add	r3, r9
 802bb88:	106d      	asrs	r5, r5, #1
 802bb8a:	429d      	cmp	r5, r3
 802bb8c:	bf38      	it	cc
 802bb8e:	461d      	movcc	r5, r3
 802bb90:	0553      	lsls	r3, r2, #21
 802bb92:	d527      	bpl.n	802bbe4 <__ssputs_r+0x8c>
 802bb94:	4629      	mov	r1, r5
 802bb96:	f7ff fe6b 	bl	802b870 <_malloc_r>
 802bb9a:	4606      	mov	r6, r0
 802bb9c:	b360      	cbz	r0, 802bbf8 <__ssputs_r+0xa0>
 802bb9e:	6921      	ldr	r1, [r4, #16]
 802bba0:	464a      	mov	r2, r9
 802bba2:	f7ff ff7f 	bl	802baa4 <memcpy>
 802bba6:	89a3      	ldrh	r3, [r4, #12]
 802bba8:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 802bbac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 802bbb0:	81a3      	strh	r3, [r4, #12]
 802bbb2:	6126      	str	r6, [r4, #16]
 802bbb4:	6165      	str	r5, [r4, #20]
 802bbb6:	444e      	add	r6, r9
 802bbb8:	eba5 0509 	sub.w	r5, r5, r9
 802bbbc:	6026      	str	r6, [r4, #0]
 802bbbe:	60a5      	str	r5, [r4, #8]
 802bbc0:	463e      	mov	r6, r7
 802bbc2:	42be      	cmp	r6, r7
 802bbc4:	d900      	bls.n	802bbc8 <__ssputs_r+0x70>
 802bbc6:	463e      	mov	r6, r7
 802bbc8:	6820      	ldr	r0, [r4, #0]
 802bbca:	4632      	mov	r2, r6
 802bbcc:	4641      	mov	r1, r8
 802bbce:	f000 faab 	bl	802c128 <memmove>
 802bbd2:	68a3      	ldr	r3, [r4, #8]
 802bbd4:	1b9b      	subs	r3, r3, r6
 802bbd6:	60a3      	str	r3, [r4, #8]
 802bbd8:	6823      	ldr	r3, [r4, #0]
 802bbda:	4433      	add	r3, r6
 802bbdc:	6023      	str	r3, [r4, #0]
 802bbde:	2000      	movs	r0, #0
 802bbe0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802bbe4:	462a      	mov	r2, r5
 802bbe6:	f000 fab9 	bl	802c15c <_realloc_r>
 802bbea:	4606      	mov	r6, r0
 802bbec:	2800      	cmp	r0, #0
 802bbee:	d1e0      	bne.n	802bbb2 <__ssputs_r+0x5a>
 802bbf0:	6921      	ldr	r1, [r4, #16]
 802bbf2:	4650      	mov	r0, sl
 802bbf4:	f7ff ff64 	bl	802bac0 <_free_r>
 802bbf8:	230c      	movs	r3, #12
 802bbfa:	f8ca 3000 	str.w	r3, [sl]
 802bbfe:	89a3      	ldrh	r3, [r4, #12]
 802bc00:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802bc04:	81a3      	strh	r3, [r4, #12]
 802bc06:	f04f 30ff 	mov.w	r0, #4294967295
 802bc0a:	e7e9      	b.n	802bbe0 <__ssputs_r+0x88>

0802bc0c <_svfiprintf_r>:
 802bc0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802bc10:	4698      	mov	r8, r3
 802bc12:	898b      	ldrh	r3, [r1, #12]
 802bc14:	061b      	lsls	r3, r3, #24
 802bc16:	b09d      	sub	sp, #116	; 0x74
 802bc18:	4607      	mov	r7, r0
 802bc1a:	460d      	mov	r5, r1
 802bc1c:	4614      	mov	r4, r2
 802bc1e:	d50e      	bpl.n	802bc3e <_svfiprintf_r+0x32>
 802bc20:	690b      	ldr	r3, [r1, #16]
 802bc22:	b963      	cbnz	r3, 802bc3e <_svfiprintf_r+0x32>
 802bc24:	2140      	movs	r1, #64	; 0x40
 802bc26:	f7ff fe23 	bl	802b870 <_malloc_r>
 802bc2a:	6028      	str	r0, [r5, #0]
 802bc2c:	6128      	str	r0, [r5, #16]
 802bc2e:	b920      	cbnz	r0, 802bc3a <_svfiprintf_r+0x2e>
 802bc30:	230c      	movs	r3, #12
 802bc32:	603b      	str	r3, [r7, #0]
 802bc34:	f04f 30ff 	mov.w	r0, #4294967295
 802bc38:	e0d0      	b.n	802bddc <_svfiprintf_r+0x1d0>
 802bc3a:	2340      	movs	r3, #64	; 0x40
 802bc3c:	616b      	str	r3, [r5, #20]
 802bc3e:	2300      	movs	r3, #0
 802bc40:	9309      	str	r3, [sp, #36]	; 0x24
 802bc42:	2320      	movs	r3, #32
 802bc44:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 802bc48:	f8cd 800c 	str.w	r8, [sp, #12]
 802bc4c:	2330      	movs	r3, #48	; 0x30
 802bc4e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 802bdf4 <_svfiprintf_r+0x1e8>
 802bc52:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 802bc56:	f04f 0901 	mov.w	r9, #1
 802bc5a:	4623      	mov	r3, r4
 802bc5c:	469a      	mov	sl, r3
 802bc5e:	f813 2b01 	ldrb.w	r2, [r3], #1
 802bc62:	b10a      	cbz	r2, 802bc68 <_svfiprintf_r+0x5c>
 802bc64:	2a25      	cmp	r2, #37	; 0x25
 802bc66:	d1f9      	bne.n	802bc5c <_svfiprintf_r+0x50>
 802bc68:	ebba 0b04 	subs.w	fp, sl, r4
 802bc6c:	d00b      	beq.n	802bc86 <_svfiprintf_r+0x7a>
 802bc6e:	465b      	mov	r3, fp
 802bc70:	4622      	mov	r2, r4
 802bc72:	4629      	mov	r1, r5
 802bc74:	4638      	mov	r0, r7
 802bc76:	f7ff ff6f 	bl	802bb58 <__ssputs_r>
 802bc7a:	3001      	adds	r0, #1
 802bc7c:	f000 80a9 	beq.w	802bdd2 <_svfiprintf_r+0x1c6>
 802bc80:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802bc82:	445a      	add	r2, fp
 802bc84:	9209      	str	r2, [sp, #36]	; 0x24
 802bc86:	f89a 3000 	ldrb.w	r3, [sl]
 802bc8a:	2b00      	cmp	r3, #0
 802bc8c:	f000 80a1 	beq.w	802bdd2 <_svfiprintf_r+0x1c6>
 802bc90:	2300      	movs	r3, #0
 802bc92:	f04f 32ff 	mov.w	r2, #4294967295
 802bc96:	e9cd 2305 	strd	r2, r3, [sp, #20]
 802bc9a:	f10a 0a01 	add.w	sl, sl, #1
 802bc9e:	9304      	str	r3, [sp, #16]
 802bca0:	9307      	str	r3, [sp, #28]
 802bca2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 802bca6:	931a      	str	r3, [sp, #104]	; 0x68
 802bca8:	4654      	mov	r4, sl
 802bcaa:	2205      	movs	r2, #5
 802bcac:	f814 1b01 	ldrb.w	r1, [r4], #1
 802bcb0:	4850      	ldr	r0, [pc, #320]	; (802bdf4 <_svfiprintf_r+0x1e8>)
 802bcb2:	f7f4 fab5 	bl	8020220 <memchr>
 802bcb6:	9a04      	ldr	r2, [sp, #16]
 802bcb8:	b9d8      	cbnz	r0, 802bcf2 <_svfiprintf_r+0xe6>
 802bcba:	06d0      	lsls	r0, r2, #27
 802bcbc:	bf44      	itt	mi
 802bcbe:	2320      	movmi	r3, #32
 802bcc0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 802bcc4:	0711      	lsls	r1, r2, #28
 802bcc6:	bf44      	itt	mi
 802bcc8:	232b      	movmi	r3, #43	; 0x2b
 802bcca:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 802bcce:	f89a 3000 	ldrb.w	r3, [sl]
 802bcd2:	2b2a      	cmp	r3, #42	; 0x2a
 802bcd4:	d015      	beq.n	802bd02 <_svfiprintf_r+0xf6>
 802bcd6:	9a07      	ldr	r2, [sp, #28]
 802bcd8:	4654      	mov	r4, sl
 802bcda:	2000      	movs	r0, #0
 802bcdc:	f04f 0c0a 	mov.w	ip, #10
 802bce0:	4621      	mov	r1, r4
 802bce2:	f811 3b01 	ldrb.w	r3, [r1], #1
 802bce6:	3b30      	subs	r3, #48	; 0x30
 802bce8:	2b09      	cmp	r3, #9
 802bcea:	d94d      	bls.n	802bd88 <_svfiprintf_r+0x17c>
 802bcec:	b1b0      	cbz	r0, 802bd1c <_svfiprintf_r+0x110>
 802bcee:	9207      	str	r2, [sp, #28]
 802bcf0:	e014      	b.n	802bd1c <_svfiprintf_r+0x110>
 802bcf2:	eba0 0308 	sub.w	r3, r0, r8
 802bcf6:	fa09 f303 	lsl.w	r3, r9, r3
 802bcfa:	4313      	orrs	r3, r2
 802bcfc:	9304      	str	r3, [sp, #16]
 802bcfe:	46a2      	mov	sl, r4
 802bd00:	e7d2      	b.n	802bca8 <_svfiprintf_r+0x9c>
 802bd02:	9b03      	ldr	r3, [sp, #12]
 802bd04:	1d19      	adds	r1, r3, #4
 802bd06:	681b      	ldr	r3, [r3, #0]
 802bd08:	9103      	str	r1, [sp, #12]
 802bd0a:	2b00      	cmp	r3, #0
 802bd0c:	bfbb      	ittet	lt
 802bd0e:	425b      	neglt	r3, r3
 802bd10:	f042 0202 	orrlt.w	r2, r2, #2
 802bd14:	9307      	strge	r3, [sp, #28]
 802bd16:	9307      	strlt	r3, [sp, #28]
 802bd18:	bfb8      	it	lt
 802bd1a:	9204      	strlt	r2, [sp, #16]
 802bd1c:	7823      	ldrb	r3, [r4, #0]
 802bd1e:	2b2e      	cmp	r3, #46	; 0x2e
 802bd20:	d10c      	bne.n	802bd3c <_svfiprintf_r+0x130>
 802bd22:	7863      	ldrb	r3, [r4, #1]
 802bd24:	2b2a      	cmp	r3, #42	; 0x2a
 802bd26:	d134      	bne.n	802bd92 <_svfiprintf_r+0x186>
 802bd28:	9b03      	ldr	r3, [sp, #12]
 802bd2a:	1d1a      	adds	r2, r3, #4
 802bd2c:	681b      	ldr	r3, [r3, #0]
 802bd2e:	9203      	str	r2, [sp, #12]
 802bd30:	2b00      	cmp	r3, #0
 802bd32:	bfb8      	it	lt
 802bd34:	f04f 33ff 	movlt.w	r3, #4294967295
 802bd38:	3402      	adds	r4, #2
 802bd3a:	9305      	str	r3, [sp, #20]
 802bd3c:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 802be04 <_svfiprintf_r+0x1f8>
 802bd40:	7821      	ldrb	r1, [r4, #0]
 802bd42:	2203      	movs	r2, #3
 802bd44:	4650      	mov	r0, sl
 802bd46:	f7f4 fa6b 	bl	8020220 <memchr>
 802bd4a:	b138      	cbz	r0, 802bd5c <_svfiprintf_r+0x150>
 802bd4c:	9b04      	ldr	r3, [sp, #16]
 802bd4e:	eba0 000a 	sub.w	r0, r0, sl
 802bd52:	2240      	movs	r2, #64	; 0x40
 802bd54:	4082      	lsls	r2, r0
 802bd56:	4313      	orrs	r3, r2
 802bd58:	3401      	adds	r4, #1
 802bd5a:	9304      	str	r3, [sp, #16]
 802bd5c:	f814 1b01 	ldrb.w	r1, [r4], #1
 802bd60:	4825      	ldr	r0, [pc, #148]	; (802bdf8 <_svfiprintf_r+0x1ec>)
 802bd62:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 802bd66:	2206      	movs	r2, #6
 802bd68:	f7f4 fa5a 	bl	8020220 <memchr>
 802bd6c:	2800      	cmp	r0, #0
 802bd6e:	d038      	beq.n	802bde2 <_svfiprintf_r+0x1d6>
 802bd70:	4b22      	ldr	r3, [pc, #136]	; (802bdfc <_svfiprintf_r+0x1f0>)
 802bd72:	bb1b      	cbnz	r3, 802bdbc <_svfiprintf_r+0x1b0>
 802bd74:	9b03      	ldr	r3, [sp, #12]
 802bd76:	3307      	adds	r3, #7
 802bd78:	f023 0307 	bic.w	r3, r3, #7
 802bd7c:	3308      	adds	r3, #8
 802bd7e:	9303      	str	r3, [sp, #12]
 802bd80:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802bd82:	4433      	add	r3, r6
 802bd84:	9309      	str	r3, [sp, #36]	; 0x24
 802bd86:	e768      	b.n	802bc5a <_svfiprintf_r+0x4e>
 802bd88:	fb0c 3202 	mla	r2, ip, r2, r3
 802bd8c:	460c      	mov	r4, r1
 802bd8e:	2001      	movs	r0, #1
 802bd90:	e7a6      	b.n	802bce0 <_svfiprintf_r+0xd4>
 802bd92:	2300      	movs	r3, #0
 802bd94:	3401      	adds	r4, #1
 802bd96:	9305      	str	r3, [sp, #20]
 802bd98:	4619      	mov	r1, r3
 802bd9a:	f04f 0c0a 	mov.w	ip, #10
 802bd9e:	4620      	mov	r0, r4
 802bda0:	f810 2b01 	ldrb.w	r2, [r0], #1
 802bda4:	3a30      	subs	r2, #48	; 0x30
 802bda6:	2a09      	cmp	r2, #9
 802bda8:	d903      	bls.n	802bdb2 <_svfiprintf_r+0x1a6>
 802bdaa:	2b00      	cmp	r3, #0
 802bdac:	d0c6      	beq.n	802bd3c <_svfiprintf_r+0x130>
 802bdae:	9105      	str	r1, [sp, #20]
 802bdb0:	e7c4      	b.n	802bd3c <_svfiprintf_r+0x130>
 802bdb2:	fb0c 2101 	mla	r1, ip, r1, r2
 802bdb6:	4604      	mov	r4, r0
 802bdb8:	2301      	movs	r3, #1
 802bdba:	e7f0      	b.n	802bd9e <_svfiprintf_r+0x192>
 802bdbc:	ab03      	add	r3, sp, #12
 802bdbe:	9300      	str	r3, [sp, #0]
 802bdc0:	462a      	mov	r2, r5
 802bdc2:	4b0f      	ldr	r3, [pc, #60]	; (802be00 <_svfiprintf_r+0x1f4>)
 802bdc4:	a904      	add	r1, sp, #16
 802bdc6:	4638      	mov	r0, r7
 802bdc8:	f3af 8000 	nop.w
 802bdcc:	1c42      	adds	r2, r0, #1
 802bdce:	4606      	mov	r6, r0
 802bdd0:	d1d6      	bne.n	802bd80 <_svfiprintf_r+0x174>
 802bdd2:	89ab      	ldrh	r3, [r5, #12]
 802bdd4:	065b      	lsls	r3, r3, #25
 802bdd6:	f53f af2d 	bmi.w	802bc34 <_svfiprintf_r+0x28>
 802bdda:	9809      	ldr	r0, [sp, #36]	; 0x24
 802bddc:	b01d      	add	sp, #116	; 0x74
 802bdde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802bde2:	ab03      	add	r3, sp, #12
 802bde4:	9300      	str	r3, [sp, #0]
 802bde6:	462a      	mov	r2, r5
 802bde8:	4b05      	ldr	r3, [pc, #20]	; (802be00 <_svfiprintf_r+0x1f4>)
 802bdea:	a904      	add	r1, sp, #16
 802bdec:	4638      	mov	r0, r7
 802bdee:	f000 f879 	bl	802bee4 <_printf_i>
 802bdf2:	e7eb      	b.n	802bdcc <_svfiprintf_r+0x1c0>
 802bdf4:	080379f0 	.word	0x080379f0
 802bdf8:	080379fa 	.word	0x080379fa
 802bdfc:	00000000 	.word	0x00000000
 802be00:	0802bb59 	.word	0x0802bb59
 802be04:	080379f6 	.word	0x080379f6

0802be08 <_printf_common>:
 802be08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802be0c:	4616      	mov	r6, r2
 802be0e:	4699      	mov	r9, r3
 802be10:	688a      	ldr	r2, [r1, #8]
 802be12:	690b      	ldr	r3, [r1, #16]
 802be14:	f8dd 8020 	ldr.w	r8, [sp, #32]
 802be18:	4293      	cmp	r3, r2
 802be1a:	bfb8      	it	lt
 802be1c:	4613      	movlt	r3, r2
 802be1e:	6033      	str	r3, [r6, #0]
 802be20:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 802be24:	4607      	mov	r7, r0
 802be26:	460c      	mov	r4, r1
 802be28:	b10a      	cbz	r2, 802be2e <_printf_common+0x26>
 802be2a:	3301      	adds	r3, #1
 802be2c:	6033      	str	r3, [r6, #0]
 802be2e:	6823      	ldr	r3, [r4, #0]
 802be30:	0699      	lsls	r1, r3, #26
 802be32:	bf42      	ittt	mi
 802be34:	6833      	ldrmi	r3, [r6, #0]
 802be36:	3302      	addmi	r3, #2
 802be38:	6033      	strmi	r3, [r6, #0]
 802be3a:	6825      	ldr	r5, [r4, #0]
 802be3c:	f015 0506 	ands.w	r5, r5, #6
 802be40:	d106      	bne.n	802be50 <_printf_common+0x48>
 802be42:	f104 0a19 	add.w	sl, r4, #25
 802be46:	68e3      	ldr	r3, [r4, #12]
 802be48:	6832      	ldr	r2, [r6, #0]
 802be4a:	1a9b      	subs	r3, r3, r2
 802be4c:	42ab      	cmp	r3, r5
 802be4e:	dc26      	bgt.n	802be9e <_printf_common+0x96>
 802be50:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 802be54:	1e13      	subs	r3, r2, #0
 802be56:	6822      	ldr	r2, [r4, #0]
 802be58:	bf18      	it	ne
 802be5a:	2301      	movne	r3, #1
 802be5c:	0692      	lsls	r2, r2, #26
 802be5e:	d42b      	bmi.n	802beb8 <_printf_common+0xb0>
 802be60:	f104 0243 	add.w	r2, r4, #67	; 0x43
 802be64:	4649      	mov	r1, r9
 802be66:	4638      	mov	r0, r7
 802be68:	47c0      	blx	r8
 802be6a:	3001      	adds	r0, #1
 802be6c:	d01e      	beq.n	802beac <_printf_common+0xa4>
 802be6e:	6823      	ldr	r3, [r4, #0]
 802be70:	6922      	ldr	r2, [r4, #16]
 802be72:	f003 0306 	and.w	r3, r3, #6
 802be76:	2b04      	cmp	r3, #4
 802be78:	bf02      	ittt	eq
 802be7a:	68e5      	ldreq	r5, [r4, #12]
 802be7c:	6833      	ldreq	r3, [r6, #0]
 802be7e:	1aed      	subeq	r5, r5, r3
 802be80:	68a3      	ldr	r3, [r4, #8]
 802be82:	bf0c      	ite	eq
 802be84:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 802be88:	2500      	movne	r5, #0
 802be8a:	4293      	cmp	r3, r2
 802be8c:	bfc4      	itt	gt
 802be8e:	1a9b      	subgt	r3, r3, r2
 802be90:	18ed      	addgt	r5, r5, r3
 802be92:	2600      	movs	r6, #0
 802be94:	341a      	adds	r4, #26
 802be96:	42b5      	cmp	r5, r6
 802be98:	d11a      	bne.n	802bed0 <_printf_common+0xc8>
 802be9a:	2000      	movs	r0, #0
 802be9c:	e008      	b.n	802beb0 <_printf_common+0xa8>
 802be9e:	2301      	movs	r3, #1
 802bea0:	4652      	mov	r2, sl
 802bea2:	4649      	mov	r1, r9
 802bea4:	4638      	mov	r0, r7
 802bea6:	47c0      	blx	r8
 802bea8:	3001      	adds	r0, #1
 802beaa:	d103      	bne.n	802beb4 <_printf_common+0xac>
 802beac:	f04f 30ff 	mov.w	r0, #4294967295
 802beb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802beb4:	3501      	adds	r5, #1
 802beb6:	e7c6      	b.n	802be46 <_printf_common+0x3e>
 802beb8:	18e1      	adds	r1, r4, r3
 802beba:	1c5a      	adds	r2, r3, #1
 802bebc:	2030      	movs	r0, #48	; 0x30
 802bebe:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 802bec2:	4422      	add	r2, r4
 802bec4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 802bec8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 802becc:	3302      	adds	r3, #2
 802bece:	e7c7      	b.n	802be60 <_printf_common+0x58>
 802bed0:	2301      	movs	r3, #1
 802bed2:	4622      	mov	r2, r4
 802bed4:	4649      	mov	r1, r9
 802bed6:	4638      	mov	r0, r7
 802bed8:	47c0      	blx	r8
 802beda:	3001      	adds	r0, #1
 802bedc:	d0e6      	beq.n	802beac <_printf_common+0xa4>
 802bede:	3601      	adds	r6, #1
 802bee0:	e7d9      	b.n	802be96 <_printf_common+0x8e>
	...

0802bee4 <_printf_i>:
 802bee4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 802bee8:	7e0f      	ldrb	r7, [r1, #24]
 802beea:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 802beec:	2f78      	cmp	r7, #120	; 0x78
 802beee:	4691      	mov	r9, r2
 802bef0:	4680      	mov	r8, r0
 802bef2:	460c      	mov	r4, r1
 802bef4:	469a      	mov	sl, r3
 802bef6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 802befa:	d807      	bhi.n	802bf0c <_printf_i+0x28>
 802befc:	2f62      	cmp	r7, #98	; 0x62
 802befe:	d80a      	bhi.n	802bf16 <_printf_i+0x32>
 802bf00:	2f00      	cmp	r7, #0
 802bf02:	f000 80d4 	beq.w	802c0ae <_printf_i+0x1ca>
 802bf06:	2f58      	cmp	r7, #88	; 0x58
 802bf08:	f000 80c0 	beq.w	802c08c <_printf_i+0x1a8>
 802bf0c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 802bf10:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 802bf14:	e03a      	b.n	802bf8c <_printf_i+0xa8>
 802bf16:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 802bf1a:	2b15      	cmp	r3, #21
 802bf1c:	d8f6      	bhi.n	802bf0c <_printf_i+0x28>
 802bf1e:	a101      	add	r1, pc, #4	; (adr r1, 802bf24 <_printf_i+0x40>)
 802bf20:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 802bf24:	0802bf7d 	.word	0x0802bf7d
 802bf28:	0802bf91 	.word	0x0802bf91
 802bf2c:	0802bf0d 	.word	0x0802bf0d
 802bf30:	0802bf0d 	.word	0x0802bf0d
 802bf34:	0802bf0d 	.word	0x0802bf0d
 802bf38:	0802bf0d 	.word	0x0802bf0d
 802bf3c:	0802bf91 	.word	0x0802bf91
 802bf40:	0802bf0d 	.word	0x0802bf0d
 802bf44:	0802bf0d 	.word	0x0802bf0d
 802bf48:	0802bf0d 	.word	0x0802bf0d
 802bf4c:	0802bf0d 	.word	0x0802bf0d
 802bf50:	0802c095 	.word	0x0802c095
 802bf54:	0802bfbd 	.word	0x0802bfbd
 802bf58:	0802c04f 	.word	0x0802c04f
 802bf5c:	0802bf0d 	.word	0x0802bf0d
 802bf60:	0802bf0d 	.word	0x0802bf0d
 802bf64:	0802c0b7 	.word	0x0802c0b7
 802bf68:	0802bf0d 	.word	0x0802bf0d
 802bf6c:	0802bfbd 	.word	0x0802bfbd
 802bf70:	0802bf0d 	.word	0x0802bf0d
 802bf74:	0802bf0d 	.word	0x0802bf0d
 802bf78:	0802c057 	.word	0x0802c057
 802bf7c:	682b      	ldr	r3, [r5, #0]
 802bf7e:	1d1a      	adds	r2, r3, #4
 802bf80:	681b      	ldr	r3, [r3, #0]
 802bf82:	602a      	str	r2, [r5, #0]
 802bf84:	f104 0542 	add.w	r5, r4, #66	; 0x42
 802bf88:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 802bf8c:	2301      	movs	r3, #1
 802bf8e:	e09f      	b.n	802c0d0 <_printf_i+0x1ec>
 802bf90:	6820      	ldr	r0, [r4, #0]
 802bf92:	682b      	ldr	r3, [r5, #0]
 802bf94:	0607      	lsls	r7, r0, #24
 802bf96:	f103 0104 	add.w	r1, r3, #4
 802bf9a:	6029      	str	r1, [r5, #0]
 802bf9c:	d501      	bpl.n	802bfa2 <_printf_i+0xbe>
 802bf9e:	681e      	ldr	r6, [r3, #0]
 802bfa0:	e003      	b.n	802bfaa <_printf_i+0xc6>
 802bfa2:	0646      	lsls	r6, r0, #25
 802bfa4:	d5fb      	bpl.n	802bf9e <_printf_i+0xba>
 802bfa6:	f9b3 6000 	ldrsh.w	r6, [r3]
 802bfaa:	2e00      	cmp	r6, #0
 802bfac:	da03      	bge.n	802bfb6 <_printf_i+0xd2>
 802bfae:	232d      	movs	r3, #45	; 0x2d
 802bfb0:	4276      	negs	r6, r6
 802bfb2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 802bfb6:	485a      	ldr	r0, [pc, #360]	; (802c120 <_printf_i+0x23c>)
 802bfb8:	230a      	movs	r3, #10
 802bfba:	e012      	b.n	802bfe2 <_printf_i+0xfe>
 802bfbc:	682b      	ldr	r3, [r5, #0]
 802bfbe:	6820      	ldr	r0, [r4, #0]
 802bfc0:	1d19      	adds	r1, r3, #4
 802bfc2:	6029      	str	r1, [r5, #0]
 802bfc4:	0605      	lsls	r5, r0, #24
 802bfc6:	d501      	bpl.n	802bfcc <_printf_i+0xe8>
 802bfc8:	681e      	ldr	r6, [r3, #0]
 802bfca:	e002      	b.n	802bfd2 <_printf_i+0xee>
 802bfcc:	0641      	lsls	r1, r0, #25
 802bfce:	d5fb      	bpl.n	802bfc8 <_printf_i+0xe4>
 802bfd0:	881e      	ldrh	r6, [r3, #0]
 802bfd2:	4853      	ldr	r0, [pc, #332]	; (802c120 <_printf_i+0x23c>)
 802bfd4:	2f6f      	cmp	r7, #111	; 0x6f
 802bfd6:	bf0c      	ite	eq
 802bfd8:	2308      	moveq	r3, #8
 802bfda:	230a      	movne	r3, #10
 802bfdc:	2100      	movs	r1, #0
 802bfde:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 802bfe2:	6865      	ldr	r5, [r4, #4]
 802bfe4:	60a5      	str	r5, [r4, #8]
 802bfe6:	2d00      	cmp	r5, #0
 802bfe8:	bfa2      	ittt	ge
 802bfea:	6821      	ldrge	r1, [r4, #0]
 802bfec:	f021 0104 	bicge.w	r1, r1, #4
 802bff0:	6021      	strge	r1, [r4, #0]
 802bff2:	b90e      	cbnz	r6, 802bff8 <_printf_i+0x114>
 802bff4:	2d00      	cmp	r5, #0
 802bff6:	d04b      	beq.n	802c090 <_printf_i+0x1ac>
 802bff8:	4615      	mov	r5, r2
 802bffa:	fbb6 f1f3 	udiv	r1, r6, r3
 802bffe:	fb03 6711 	mls	r7, r3, r1, r6
 802c002:	5dc7      	ldrb	r7, [r0, r7]
 802c004:	f805 7d01 	strb.w	r7, [r5, #-1]!
 802c008:	4637      	mov	r7, r6
 802c00a:	42bb      	cmp	r3, r7
 802c00c:	460e      	mov	r6, r1
 802c00e:	d9f4      	bls.n	802bffa <_printf_i+0x116>
 802c010:	2b08      	cmp	r3, #8
 802c012:	d10b      	bne.n	802c02c <_printf_i+0x148>
 802c014:	6823      	ldr	r3, [r4, #0]
 802c016:	07de      	lsls	r6, r3, #31
 802c018:	d508      	bpl.n	802c02c <_printf_i+0x148>
 802c01a:	6923      	ldr	r3, [r4, #16]
 802c01c:	6861      	ldr	r1, [r4, #4]
 802c01e:	4299      	cmp	r1, r3
 802c020:	bfde      	ittt	le
 802c022:	2330      	movle	r3, #48	; 0x30
 802c024:	f805 3c01 	strble.w	r3, [r5, #-1]
 802c028:	f105 35ff 	addle.w	r5, r5, #4294967295
 802c02c:	1b52      	subs	r2, r2, r5
 802c02e:	6122      	str	r2, [r4, #16]
 802c030:	f8cd a000 	str.w	sl, [sp]
 802c034:	464b      	mov	r3, r9
 802c036:	aa03      	add	r2, sp, #12
 802c038:	4621      	mov	r1, r4
 802c03a:	4640      	mov	r0, r8
 802c03c:	f7ff fee4 	bl	802be08 <_printf_common>
 802c040:	3001      	adds	r0, #1
 802c042:	d14a      	bne.n	802c0da <_printf_i+0x1f6>
 802c044:	f04f 30ff 	mov.w	r0, #4294967295
 802c048:	b004      	add	sp, #16
 802c04a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802c04e:	6823      	ldr	r3, [r4, #0]
 802c050:	f043 0320 	orr.w	r3, r3, #32
 802c054:	6023      	str	r3, [r4, #0]
 802c056:	4833      	ldr	r0, [pc, #204]	; (802c124 <_printf_i+0x240>)
 802c058:	2778      	movs	r7, #120	; 0x78
 802c05a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 802c05e:	6823      	ldr	r3, [r4, #0]
 802c060:	6829      	ldr	r1, [r5, #0]
 802c062:	061f      	lsls	r7, r3, #24
 802c064:	f851 6b04 	ldr.w	r6, [r1], #4
 802c068:	d402      	bmi.n	802c070 <_printf_i+0x18c>
 802c06a:	065f      	lsls	r7, r3, #25
 802c06c:	bf48      	it	mi
 802c06e:	b2b6      	uxthmi	r6, r6
 802c070:	07df      	lsls	r7, r3, #31
 802c072:	bf48      	it	mi
 802c074:	f043 0320 	orrmi.w	r3, r3, #32
 802c078:	6029      	str	r1, [r5, #0]
 802c07a:	bf48      	it	mi
 802c07c:	6023      	strmi	r3, [r4, #0]
 802c07e:	b91e      	cbnz	r6, 802c088 <_printf_i+0x1a4>
 802c080:	6823      	ldr	r3, [r4, #0]
 802c082:	f023 0320 	bic.w	r3, r3, #32
 802c086:	6023      	str	r3, [r4, #0]
 802c088:	2310      	movs	r3, #16
 802c08a:	e7a7      	b.n	802bfdc <_printf_i+0xf8>
 802c08c:	4824      	ldr	r0, [pc, #144]	; (802c120 <_printf_i+0x23c>)
 802c08e:	e7e4      	b.n	802c05a <_printf_i+0x176>
 802c090:	4615      	mov	r5, r2
 802c092:	e7bd      	b.n	802c010 <_printf_i+0x12c>
 802c094:	682b      	ldr	r3, [r5, #0]
 802c096:	6826      	ldr	r6, [r4, #0]
 802c098:	6961      	ldr	r1, [r4, #20]
 802c09a:	1d18      	adds	r0, r3, #4
 802c09c:	6028      	str	r0, [r5, #0]
 802c09e:	0635      	lsls	r5, r6, #24
 802c0a0:	681b      	ldr	r3, [r3, #0]
 802c0a2:	d501      	bpl.n	802c0a8 <_printf_i+0x1c4>
 802c0a4:	6019      	str	r1, [r3, #0]
 802c0a6:	e002      	b.n	802c0ae <_printf_i+0x1ca>
 802c0a8:	0670      	lsls	r0, r6, #25
 802c0aa:	d5fb      	bpl.n	802c0a4 <_printf_i+0x1c0>
 802c0ac:	8019      	strh	r1, [r3, #0]
 802c0ae:	2300      	movs	r3, #0
 802c0b0:	6123      	str	r3, [r4, #16]
 802c0b2:	4615      	mov	r5, r2
 802c0b4:	e7bc      	b.n	802c030 <_printf_i+0x14c>
 802c0b6:	682b      	ldr	r3, [r5, #0]
 802c0b8:	1d1a      	adds	r2, r3, #4
 802c0ba:	602a      	str	r2, [r5, #0]
 802c0bc:	681d      	ldr	r5, [r3, #0]
 802c0be:	6862      	ldr	r2, [r4, #4]
 802c0c0:	2100      	movs	r1, #0
 802c0c2:	4628      	mov	r0, r5
 802c0c4:	f7f4 f8ac 	bl	8020220 <memchr>
 802c0c8:	b108      	cbz	r0, 802c0ce <_printf_i+0x1ea>
 802c0ca:	1b40      	subs	r0, r0, r5
 802c0cc:	6060      	str	r0, [r4, #4]
 802c0ce:	6863      	ldr	r3, [r4, #4]
 802c0d0:	6123      	str	r3, [r4, #16]
 802c0d2:	2300      	movs	r3, #0
 802c0d4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 802c0d8:	e7aa      	b.n	802c030 <_printf_i+0x14c>
 802c0da:	6923      	ldr	r3, [r4, #16]
 802c0dc:	462a      	mov	r2, r5
 802c0de:	4649      	mov	r1, r9
 802c0e0:	4640      	mov	r0, r8
 802c0e2:	47d0      	blx	sl
 802c0e4:	3001      	adds	r0, #1
 802c0e6:	d0ad      	beq.n	802c044 <_printf_i+0x160>
 802c0e8:	6823      	ldr	r3, [r4, #0]
 802c0ea:	079b      	lsls	r3, r3, #30
 802c0ec:	d413      	bmi.n	802c116 <_printf_i+0x232>
 802c0ee:	68e0      	ldr	r0, [r4, #12]
 802c0f0:	9b03      	ldr	r3, [sp, #12]
 802c0f2:	4298      	cmp	r0, r3
 802c0f4:	bfb8      	it	lt
 802c0f6:	4618      	movlt	r0, r3
 802c0f8:	e7a6      	b.n	802c048 <_printf_i+0x164>
 802c0fa:	2301      	movs	r3, #1
 802c0fc:	4632      	mov	r2, r6
 802c0fe:	4649      	mov	r1, r9
 802c100:	4640      	mov	r0, r8
 802c102:	47d0      	blx	sl
 802c104:	3001      	adds	r0, #1
 802c106:	d09d      	beq.n	802c044 <_printf_i+0x160>
 802c108:	3501      	adds	r5, #1
 802c10a:	68e3      	ldr	r3, [r4, #12]
 802c10c:	9903      	ldr	r1, [sp, #12]
 802c10e:	1a5b      	subs	r3, r3, r1
 802c110:	42ab      	cmp	r3, r5
 802c112:	dcf2      	bgt.n	802c0fa <_printf_i+0x216>
 802c114:	e7eb      	b.n	802c0ee <_printf_i+0x20a>
 802c116:	2500      	movs	r5, #0
 802c118:	f104 0619 	add.w	r6, r4, #25
 802c11c:	e7f5      	b.n	802c10a <_printf_i+0x226>
 802c11e:	bf00      	nop
 802c120:	08037a01 	.word	0x08037a01
 802c124:	08037a12 	.word	0x08037a12

0802c128 <memmove>:
 802c128:	4288      	cmp	r0, r1
 802c12a:	b510      	push	{r4, lr}
 802c12c:	eb01 0402 	add.w	r4, r1, r2
 802c130:	d902      	bls.n	802c138 <memmove+0x10>
 802c132:	4284      	cmp	r4, r0
 802c134:	4623      	mov	r3, r4
 802c136:	d807      	bhi.n	802c148 <memmove+0x20>
 802c138:	1e43      	subs	r3, r0, #1
 802c13a:	42a1      	cmp	r1, r4
 802c13c:	d008      	beq.n	802c150 <memmove+0x28>
 802c13e:	f811 2b01 	ldrb.w	r2, [r1], #1
 802c142:	f803 2f01 	strb.w	r2, [r3, #1]!
 802c146:	e7f8      	b.n	802c13a <memmove+0x12>
 802c148:	4402      	add	r2, r0
 802c14a:	4601      	mov	r1, r0
 802c14c:	428a      	cmp	r2, r1
 802c14e:	d100      	bne.n	802c152 <memmove+0x2a>
 802c150:	bd10      	pop	{r4, pc}
 802c152:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 802c156:	f802 4d01 	strb.w	r4, [r2, #-1]!
 802c15a:	e7f7      	b.n	802c14c <memmove+0x24>

0802c15c <_realloc_r>:
 802c15c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802c160:	4680      	mov	r8, r0
 802c162:	4614      	mov	r4, r2
 802c164:	460e      	mov	r6, r1
 802c166:	b921      	cbnz	r1, 802c172 <_realloc_r+0x16>
 802c168:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802c16c:	4611      	mov	r1, r2
 802c16e:	f7ff bb7f 	b.w	802b870 <_malloc_r>
 802c172:	b92a      	cbnz	r2, 802c180 <_realloc_r+0x24>
 802c174:	f7ff fca4 	bl	802bac0 <_free_r>
 802c178:	4625      	mov	r5, r4
 802c17a:	4628      	mov	r0, r5
 802c17c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802c180:	f000 f81b 	bl	802c1ba <_malloc_usable_size_r>
 802c184:	4284      	cmp	r4, r0
 802c186:	4607      	mov	r7, r0
 802c188:	d802      	bhi.n	802c190 <_realloc_r+0x34>
 802c18a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 802c18e:	d812      	bhi.n	802c1b6 <_realloc_r+0x5a>
 802c190:	4621      	mov	r1, r4
 802c192:	4640      	mov	r0, r8
 802c194:	f7ff fb6c 	bl	802b870 <_malloc_r>
 802c198:	4605      	mov	r5, r0
 802c19a:	2800      	cmp	r0, #0
 802c19c:	d0ed      	beq.n	802c17a <_realloc_r+0x1e>
 802c19e:	42bc      	cmp	r4, r7
 802c1a0:	4622      	mov	r2, r4
 802c1a2:	4631      	mov	r1, r6
 802c1a4:	bf28      	it	cs
 802c1a6:	463a      	movcs	r2, r7
 802c1a8:	f7ff fc7c 	bl	802baa4 <memcpy>
 802c1ac:	4631      	mov	r1, r6
 802c1ae:	4640      	mov	r0, r8
 802c1b0:	f7ff fc86 	bl	802bac0 <_free_r>
 802c1b4:	e7e1      	b.n	802c17a <_realloc_r+0x1e>
 802c1b6:	4635      	mov	r5, r6
 802c1b8:	e7df      	b.n	802c17a <_realloc_r+0x1e>

0802c1ba <_malloc_usable_size_r>:
 802c1ba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 802c1be:	1f18      	subs	r0, r3, #4
 802c1c0:	2b00      	cmp	r3, #0
 802c1c2:	bfbc      	itt	lt
 802c1c4:	580b      	ldrlt	r3, [r1, r0]
 802c1c6:	18c0      	addlt	r0, r0, r3
 802c1c8:	4770      	bx	lr
	...

0802c1cc <_init>:
 802c1cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802c1ce:	bf00      	nop
 802c1d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802c1d2:	bc08      	pop	{r3}
 802c1d4:	469e      	mov	lr, r3
 802c1d6:	4770      	bx	lr

0802c1d8 <_fini>:
 802c1d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802c1da:	bf00      	nop
 802c1dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802c1de:	bc08      	pop	{r3}
 802c1e0:	469e      	mov	lr, r3
 802c1e2:	4770      	bx	lr
